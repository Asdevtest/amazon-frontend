/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TestSwagger);
  }
}(this, function(expect, TestSwagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TestSwagger.UserAdminFullSchema();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserAdminFullSchema', function() {
    it('should create an instance of UserAdminFullSchema', function() {
      // uncomment below and update the code to test UserAdminFullSchema
      //var instane = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be.a(TestSwagger.UserAdminFullSchema);
    });

    it('should have the property _id (base name: "_id")', function() {
      // uncomment below and update the code to test the property _id
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property fba (base name: "fba")', function() {
      // uncomment below and update the code to test the property fba
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property rate (base name: "rate")', function() {
      // uncomment below and update the code to test the property rate
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property balance (base name: "balance")', function() {
      // uncomment below and update the code to test the property balance
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property balanceFreeze (base name: "balanceFreeze")', function() {
      // uncomment below and update the code to test the property balanceFreeze
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property overdraft (base name: "overdraft")', function() {
      // uncomment below and update the code to test the property overdraft
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property permissionGroups (base name: "permissionGroups")', function() {
      // uncomment below and update the code to test the property permissionGroups
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property masterUser (base name: "masterUser")', function() {
      // uncomment below and update the code to test the property masterUser
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property allowedRoles (base name: "allowedRoles")', function() {
      // uncomment below and update the code to test the property allowedRoles
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

<<<<<<< HEAD
=======
    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new TestSwagger.UserAdminFullSchema();
      //expect(instance).to.be();
    });

>>>>>>> 7f563425... 989, 1085, 1086, 1083, 1090, 1091, 1089, 1087, 1092, 1094, 1086, 1082, 1085, 1073, 1076, 1075, 1077, 1078, 1068 tasks
  });

}));
