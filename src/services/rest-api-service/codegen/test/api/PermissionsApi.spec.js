/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TestSwagger);
  }
}(this, function(expect, TestSwagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TestSwagger.PermissionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PermissionsApi', function() {
    describe('apiV1PermissionsGet', function() {
      it('should call apiV1PermissionsGet successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGet
        //instance.apiV1PermissionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsGroupsGet', function() {
      it('should call apiV1PermissionsGroupsGet successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGroupsGet
        //instance.apiV1PermissionsGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsGroupsGuidDelete', function() {
      it('should call apiV1PermissionsGroupsGuidDelete successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGroupsGuidDelete
        //instance.apiV1PermissionsGroupsGuidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsGroupsGuidPatch', function() {
      it('should call apiV1PermissionsGroupsGuidPatch successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGroupsGuidPatch
        //instance.apiV1PermissionsGroupsGuidPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsGroupsPost', function() {
      it('should call apiV1PermissionsGroupsPost successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGroupsPost
        //instance.apiV1PermissionsGroupsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsGuidDelete', function() {
      it('should call apiV1PermissionsGuidDelete successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGuidDelete
        //instance.apiV1PermissionsGuidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsGuidPatch', function() {
      it('should call apiV1PermissionsGuidPatch successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsGuidPatch
        //instance.apiV1PermissionsGuidPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsPost', function() {
      it('should call apiV1PermissionsPost successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsPost
        //instance.apiV1PermissionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsProductsGet', function() {
      it('should call apiV1PermissionsProductsGet successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsProductsGet
        //instance.apiV1PermissionsProductsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsProductsGuidGet', function() {
      it('should call apiV1PermissionsProductsGuidGet successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsProductsGuidGet
        //instance.apiV1PermissionsProductsGuidGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsProductsPatch', function() {
      it('should call apiV1PermissionsProductsPatch successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsProductsPatch
        //instance.apiV1PermissionsProductsPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1PermissionsSetForUserGuidPatch', function() {
      it('should call apiV1PermissionsSetForUserGuidPatch successfully', function(done) {
        //uncomment below and update the code to test apiV1PermissionsSetForUserGuidPatch
        //instance.apiV1PermissionsSetForUserGuidPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
