/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { ConflictInTheState } from '../models';
// @ts-ignore
import { InlineObject89 } from '../models';
// @ts-ignore
import { InlineObject90 } from '../models';
// @ts-ignore
import { InlineResponse20074 } from '../models';
// @ts-ignore
import { InlineResponse20075 } from '../models';
// @ts-ignore
import { InlineResponse20076 } from '../models';
// @ts-ignore
import { InlineResponse20077 } from '../models';
// @ts-ignore
import { InlineResponse20078 } from '../models';
// @ts-ignore
import { InlineResponse20079 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
// @ts-ignore
import { PermissionGetDtoSchema } from '../models';
// @ts-ignore
import { PermissionGroupGetDtoSchema } from '../models';
// @ts-ignore
import { PermissionGroupPatchDtoSchema } from '../models';
// @ts-ignore
import { PermissionGroupPostDtoSchema } from '../models';
// @ts-ignore
import { PermissionPatchDtoSchema } from '../models';
// @ts-ignore
import { PermissionPostDtoSchema } from '../models';
// @ts-ignore
import { SetPermissionsForUsersPathDTOSchema } from '../models';
// @ts-ignore
import { SuccessResponseBodyWithGuid } from '../models';
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
         * @summary Получить список permissions. (DEPRECATED)
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGet: async (role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список permissions для SideBar
         * @summary Получить список permissions для SideBar
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupNavGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/group/nav`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список групп permissions.   
         * @summary Получить список групп permissions.
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsGet: async (role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Удалить группу permission по его GUID.   
         * @summary # Удалить группу permission по его GUID.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsGuidDelete: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsGroupsGuidDelete', 'guid', guid)
            const localVarPath = `/api/v1/permissions/groups/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить группу permission.   ## Нельзя изменять поле key и role.   ## При изменении массива permission-ов, старый массив затирается
         * @summary #  Изменить группу permission.
         * @param {string} guid GUID permission в БД
         * @param {PermissionGroupPatchDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsGuidPatch: async (guid: string, body?: PermissionGroupPatchDtoSchema, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsGroupsGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/permissions/groups/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Создать группу permission.   
         * @summary # Создать группу permission.
         * @param {PermissionGroupPostDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsPost: async (body?: PermissionGroupPostDtoSchema, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Удалить permission по его GUID.   
         * @summary # Удалить permission по его GUID.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGuidDelete: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsGuidDelete', 'guid', guid)
            const localVarPath = `/api/v1/permissions/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить permission.   ## Нельзя менять поле key.   
         * @summary #  Изменить permission.
         * @param {string} guid GUID permission в БД
         * @param {PermissionPatchDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGuidPatch: async (guid: string, body?: PermissionPatchDtoSchema, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/permissions/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
         * @summary Получить список permissions (Paginated).
         * @param {string} [groupIds] GUID-ы груп разделение через запятую.
         * @param {number} [offset] Отступ от первой записи получаемой в запросе
         * @param {number} [limit] Кол-во получаемых записей
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsPagGet: async (groupIds?: string, offset?: number, limit?: number, role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/pag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (groupIds !== undefined) {
                localVarQueryParameter['groupIds'] = groupIds;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Создать permission.   
         * @summary # Создать permission.
         * @param {PermissionPostDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsPost: async (body?: PermissionPostDtoSchema, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список разрешений для продуктов всех сабъюзеров.
         * @summary Получить список разрешений для продуктов всех сабъюзеров (DEPRECATED).
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список разрешений для продуктов юзера по его айди.
         * @summary Получить список разрешений для продуктов юзера по его айди.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsProductsGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/permissions/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список разрешений для продуктов всех сабъюзеров (Paginated).
         * @summary Получить список разрешений для продуктов всех сабъюзеров (Paginated).
         * @param {string} [filters]                Возможные поля: asin, amazonTitle, title, humanFriendlyId, orderHumanFriendlyId, orderItem               Поиск для полей продукта идет через схему Коробка -&gt; Айтем коробки -&gt; Продукт               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsPagGet: async (filters?: string, limit?: number, offset?: number, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/products/pag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Переписать разрешения для продукта для саба.
         * @summary Переписать разрешения для продукта для саба.
         * @param {InlineObject89} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsPatch: async (body?: InlineObject89, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid.   
         * @summary #   !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid
         * @param {string} guid GUID permission в БД
         * @param {SetPermissionsForUsersPathDTOSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsSetForUserGuidPatch: async (guid: string, body?: SetPermissionsForUsersPathDTOSchema, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsSetForUserGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/permissions/set-for-user/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список разрешений для магазинов юзера по его айди.
         * @summary Получить список разрешений для магазинов юзера по его айди.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsShopsGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1PermissionsShopsGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/permissions/shops/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Переписать разрешения для магазина для юзера.
         * @summary Переписать разрешения для магазина для юзера.
         * @param {InlineObject90} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsShopsPatch: async (body?: InlineObject90, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/permissions/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
         * @summary Получить список permissions. (DEPRECATED)
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGet(role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionGetDtoSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGet(role, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список permissions для SideBar
         * @summary Получить список permissions для SideBar
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGroupNavGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20074>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGroupNavGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список групп permissions.   
         * @summary Получить список групп permissions.
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGroupsGet(role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionGroupGetDtoSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGroupsGet(role, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Удалить группу permission по его GUID.   
         * @summary # Удалить группу permission по его GUID.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGroupsGuidDelete(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGroupsGuidDelete(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить группу permission.   ## Нельзя изменять поле key и role.   ## При изменении массива permission-ов, старый массив затирается
         * @summary #  Изменить группу permission.
         * @param {string} guid GUID permission в БД
         * @param {PermissionGroupPatchDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGroupsGuidPatch(guid: string, body?: PermissionGroupPatchDtoSchema, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGroupsGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Создать группу permission.   
         * @summary # Создать группу permission.
         * @param {PermissionGroupPostDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGroupsPost(body?: PermissionGroupPostDtoSchema, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseBodyWithGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGroupsPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Удалить permission по его GUID.   
         * @summary # Удалить permission по его GUID.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGuidDelete(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGuidDelete(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить permission.   ## Нельзя менять поле key.   
         * @summary #  Изменить permission.
         * @param {string} guid GUID permission в БД
         * @param {PermissionPatchDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsGuidPatch(guid: string, body?: PermissionPatchDtoSchema, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
         * @summary Получить список permissions (Paginated).
         * @param {string} [groupIds] GUID-ы груп разделение через запятую.
         * @param {number} [offset] Отступ от первой записи получаемой в запросе
         * @param {number} [limit] Кол-во получаемых записей
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsPagGet(groupIds?: string, offset?: number, limit?: number, role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20075>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsPagGet(groupIds, offset, limit, role, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Создать permission.   
         * @summary # Создать permission.
         * @param {PermissionPostDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsPost(body?: PermissionPostDtoSchema, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseBodyWithGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список разрешений для продуктов всех сабъюзеров.
         * @summary Получить список разрешений для продуктов всех сабъюзеров (DEPRECATED).
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsProductsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20076>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsProductsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список разрешений для продуктов юзера по его айди.
         * @summary Получить список разрешений для продуктов юзера по его айди.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsProductsGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20079>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsProductsGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список разрешений для продуктов всех сабъюзеров (Paginated).
         * @summary Получить список разрешений для продуктов всех сабъюзеров (Paginated).
         * @param {string} [filters]                Возможные поля: asin, amazonTitle, title, humanFriendlyId, orderHumanFriendlyId, orderItem               Поиск для полей продукта идет через схему Коробка -&gt; Айтем коробки -&gt; Продукт               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsProductsPagGet(filters?: string, limit?: number, offset?: number, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20078>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsProductsPagGet(filters, limit, offset, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Переписать разрешения для продукта для саба.
         * @summary Переписать разрешения для продукта для саба.
         * @param {InlineObject89} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsProductsPatch(body?: InlineObject89, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsProductsPatch(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid.   
         * @summary #   !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid
         * @param {string} guid GUID permission в БД
         * @param {SetPermissionsForUsersPathDTOSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsSetForUserGuidPatch(guid: string, body?: SetPermissionsForUsersPathDTOSchema, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsSetForUserGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список разрешений для магазинов юзера по его айди.
         * @summary Получить список разрешений для магазинов юзера по его айди.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsShopsGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20077>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsShopsGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Переписать разрешения для магазина для юзера.
         * @summary Переписать разрешения для магазина для юзера.
         * @param {InlineObject90} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PermissionsShopsPatch(body?: InlineObject90, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PermissionsShopsPatch(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionsApiFp(configuration)
    return {
        /**
         * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
         * @summary Получить список permissions. (DEPRECATED)
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGet(role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<Array<PermissionGetDtoSchema>> {
            return localVarFp.apiV1PermissionsGet(role, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список permissions для SideBar
         * @summary Получить список permissions для SideBar
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupNavGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20074>> {
            return localVarFp.apiV1PermissionsGroupNavGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список групп permissions.   
         * @summary Получить список групп permissions.
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsGet(role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<Array<PermissionGroupGetDtoSchema>> {
            return localVarFp.apiV1PermissionsGroupsGet(role, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Удалить группу permission по его GUID.   
         * @summary # Удалить группу permission по его GUID.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsGuidDelete(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsGroupsGuidDelete(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить группу permission.   ## Нельзя изменять поле key и role.   ## При изменении массива permission-ов, старый массив затирается
         * @summary #  Изменить группу permission.
         * @param {string} guid GUID permission в БД
         * @param {PermissionGroupPatchDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsGuidPatch(guid: string, body?: PermissionGroupPatchDtoSchema, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsGroupsGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Создать группу permission.   
         * @summary # Создать группу permission.
         * @param {PermissionGroupPostDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGroupsPost(body?: PermissionGroupPostDtoSchema, acceptEncoding?: string, options?: any): AxiosPromise<SuccessResponseBodyWithGuid> {
            return localVarFp.apiV1PermissionsGroupsPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Удалить permission по его GUID.   
         * @summary # Удалить permission по его GUID.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGuidDelete(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsGuidDelete(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить permission.   ## Нельзя менять поле key.   
         * @summary #  Изменить permission.
         * @param {string} guid GUID permission в БД
         * @param {PermissionPatchDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsGuidPatch(guid: string, body?: PermissionPatchDtoSchema, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
         * @summary Получить список permissions (Paginated).
         * @param {string} [groupIds] GUID-ы груп разделение через запятую.
         * @param {number} [offset] Отступ от первой записи получаемой в запросе
         * @param {number} [limit] Кол-во получаемых записей
         * @param {10 | 20 | 30 | 35 | 40 | 45 | 60} [role] Если указать role - отфильтрует, нет - выведет все.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsPagGet(groupIds?: string, offset?: number, limit?: number, role?: 10 | 20 | 30 | 35 | 40 | 45 | 60, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20075> {
            return localVarFp.apiV1PermissionsPagGet(groupIds, offset, limit, role, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Создать permission.   
         * @summary # Создать permission.
         * @param {PermissionPostDtoSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsPost(body?: PermissionPostDtoSchema, acceptEncoding?: string, options?: any): AxiosPromise<SuccessResponseBodyWithGuid> {
            return localVarFp.apiV1PermissionsPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список разрешений для продуктов всех сабъюзеров.
         * @summary Получить список разрешений для продуктов всех сабъюзеров (DEPRECATED).
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20076>> {
            return localVarFp.apiV1PermissionsProductsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список разрешений для продуктов юзера по его айди.
         * @summary Получить список разрешений для продуктов юзера по его айди.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20079>> {
            return localVarFp.apiV1PermissionsProductsGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список разрешений для продуктов всех сабъюзеров (Paginated).
         * @summary Получить список разрешений для продуктов всех сабъюзеров (Paginated).
         * @param {string} [filters]                Возможные поля: asin, amazonTitle, title, humanFriendlyId, orderHumanFriendlyId, orderItem               Поиск для полей продукта идет через схему Коробка -&gt; Айтем коробки -&gt; Продукт               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsPagGet(filters?: string, limit?: number, offset?: number, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20078> {
            return localVarFp.apiV1PermissionsProductsPagGet(filters, limit, offset, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Переписать разрешения для продукта для саба.
         * @summary Переписать разрешения для продукта для саба.
         * @param {InlineObject89} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsProductsPatch(body?: InlineObject89, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsProductsPatch(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid.   
         * @summary #   !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid
         * @param {string} guid GUID permission в БД
         * @param {SetPermissionsForUsersPathDTOSchema} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsSetForUserGuidPatch(guid: string, body?: SetPermissionsForUsersPathDTOSchema, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsSetForUserGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список разрешений для магазинов юзера по его айди.
         * @summary Получить список разрешений для магазинов юзера по его айди.
         * @param {string} guid GUID permission в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsShopsGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20077> {
            return localVarFp.apiV1PermissionsShopsGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Переписать разрешения для магазина для юзера.
         * @summary Переписать разрешения для магазина для юзера.
         * @param {InlineObject90} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PermissionsShopsPatch(body?: InlineObject90, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1PermissionsShopsPatch(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1PermissionsGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGetRequest
 */
export interface PermissionsApiApiV1PermissionsGetRequest {
    /**
     * Если указать role - отфильтрует, нет - выведет все.
     * @type {10 | 20 | 30 | 35 | 40 | 45 | 60}
     * @memberof PermissionsApiApiV1PermissionsGet
     */
    readonly role?: 10 | 20 | 30 | 35 | 40 | 45 | 60

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof PermissionsApiApiV1PermissionsGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGroupNavGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGroupNavGetRequest
 */
export interface PermissionsApiApiV1PermissionsGroupNavGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupNavGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGroupsGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGroupsGetRequest
 */
export interface PermissionsApiApiV1PermissionsGroupsGetRequest {
    /**
     * Если указать role - отфильтрует, нет - выведет все.
     * @type {10 | 20 | 30 | 35 | 40 | 45 | 60}
     * @memberof PermissionsApiApiV1PermissionsGroupsGet
     */
    readonly role?: 10 | 20 | 30 | 35 | 40 | 45 | 60

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof PermissionsApiApiV1PermissionsGroupsGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGroupsGuidDelete operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGroupsGuidDeleteRequest
 */
export interface PermissionsApiApiV1PermissionsGroupsGuidDeleteRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupsGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupsGuidDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGroupsGuidPatch operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGroupsGuidPatchRequest
 */
export interface PermissionsApiApiV1PermissionsGroupsGuidPatchRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupsGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {PermissionGroupPatchDtoSchema}
     * @memberof PermissionsApiApiV1PermissionsGroupsGuidPatch
     */
    readonly body?: PermissionGroupPatchDtoSchema

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupsGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGroupsPost operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGroupsPostRequest
 */
export interface PermissionsApiApiV1PermissionsGroupsPostRequest {
    /**
     * 
     * @type {PermissionGroupPostDtoSchema}
     * @memberof PermissionsApiApiV1PermissionsGroupsPost
     */
    readonly body?: PermissionGroupPostDtoSchema

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGroupsPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGuidDelete operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGuidDeleteRequest
 */
export interface PermissionsApiApiV1PermissionsGuidDeleteRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGuidDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsGuidPatch operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsGuidPatchRequest
 */
export interface PermissionsApiApiV1PermissionsGuidPatchRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {PermissionPatchDtoSchema}
     * @memberof PermissionsApiApiV1PermissionsGuidPatch
     */
    readonly body?: PermissionPatchDtoSchema

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsPagGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsPagGetRequest
 */
export interface PermissionsApiApiV1PermissionsPagGetRequest {
    /**
     * GUID-ы груп разделение через запятую.
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsPagGet
     */
    readonly groupIds?: string

    /**
     * Отступ от первой записи получаемой в запросе
     * @type {number}
     * @memberof PermissionsApiApiV1PermissionsPagGet
     */
    readonly offset?: number

    /**
     * Кол-во получаемых записей
     * @type {number}
     * @memberof PermissionsApiApiV1PermissionsPagGet
     */
    readonly limit?: number

    /**
     * Если указать role - отфильтрует, нет - выведет все.
     * @type {10 | 20 | 30 | 35 | 40 | 45 | 60}
     * @memberof PermissionsApiApiV1PermissionsPagGet
     */
    readonly role?: 10 | 20 | 30 | 35 | 40 | 45 | 60

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof PermissionsApiApiV1PermissionsPagGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsPagGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsPost operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsPostRequest
 */
export interface PermissionsApiApiV1PermissionsPostRequest {
    /**
     * 
     * @type {PermissionPostDtoSchema}
     * @memberof PermissionsApiApiV1PermissionsPost
     */
    readonly body?: PermissionPostDtoSchema

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsProductsGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsProductsGetRequest
 */
export interface PermissionsApiApiV1PermissionsProductsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsProductsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsProductsGuidGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsProductsGuidGetRequest
 */
export interface PermissionsApiApiV1PermissionsProductsGuidGetRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsProductsGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsProductsGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsProductsPagGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsProductsPagGetRequest
 */
export interface PermissionsApiApiV1PermissionsProductsPagGetRequest {
    /**
     *                Возможные поля: asin, amazonTitle, title, humanFriendlyId, orderHumanFriendlyId, orderItem               Поиск для полей продукта идет через схему Коробка -&gt; Айтем коробки -&gt; Продукт               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsProductsPagGet
     */
    readonly filters?: string

    /**
     * Лимит записей для пагинации
     * @type {number}
     * @memberof PermissionsApiApiV1PermissionsProductsPagGet
     */
    readonly limit?: number

    /**
     * Смещение для пагинации
     * @type {number}
     * @memberof PermissionsApiApiV1PermissionsProductsPagGet
     */
    readonly offset?: number

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof PermissionsApiApiV1PermissionsProductsPagGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsProductsPagGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsProductsPatch operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsProductsPatchRequest
 */
export interface PermissionsApiApiV1PermissionsProductsPatchRequest {
    /**
     * 
     * @type {InlineObject89}
     * @memberof PermissionsApiApiV1PermissionsProductsPatch
     */
    readonly body?: InlineObject89

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsProductsPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsSetForUserGuidPatch operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsSetForUserGuidPatchRequest
 */
export interface PermissionsApiApiV1PermissionsSetForUserGuidPatchRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsSetForUserGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {SetPermissionsForUsersPathDTOSchema}
     * @memberof PermissionsApiApiV1PermissionsSetForUserGuidPatch
     */
    readonly body?: SetPermissionsForUsersPathDTOSchema

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsSetForUserGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsShopsGuidGet operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsShopsGuidGetRequest
 */
export interface PermissionsApiApiV1PermissionsShopsGuidGetRequest {
    /**
     * GUID permission в БД
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsShopsGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsShopsGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1PermissionsShopsPatch operation in PermissionsApi.
 * @export
 * @interface PermissionsApiApiV1PermissionsShopsPatchRequest
 */
export interface PermissionsApiApiV1PermissionsShopsPatchRequest {
    /**
     * 
     * @type {InlineObject90}
     * @memberof PermissionsApiApiV1PermissionsShopsPatch
     */
    readonly body?: InlineObject90

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiApiV1PermissionsShopsPatch
     */
    readonly acceptEncoding?: string
}

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
     * @summary Получить список permissions. (DEPRECATED)
     * @param {PermissionsApiApiV1PermissionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGet(requestParameters: PermissionsApiApiV1PermissionsGetRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGet(requestParameters.role, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список permissions для SideBar
     * @summary Получить список permissions для SideBar
     * @param {PermissionsApiApiV1PermissionsGroupNavGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGroupNavGet(requestParameters: PermissionsApiApiV1PermissionsGroupNavGetRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGroupNavGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список групп permissions.   
     * @summary Получить список групп permissions.
     * @param {PermissionsApiApiV1PermissionsGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGroupsGet(requestParameters: PermissionsApiApiV1PermissionsGroupsGetRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGroupsGet(requestParameters.role, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Удалить группу permission по его GUID.   
     * @summary # Удалить группу permission по его GUID.
     * @param {PermissionsApiApiV1PermissionsGroupsGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGroupsGuidDelete(requestParameters: PermissionsApiApiV1PermissionsGroupsGuidDeleteRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGroupsGuidDelete(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить группу permission.   ## Нельзя изменять поле key и role.   ## При изменении массива permission-ов, старый массив затирается
     * @summary #  Изменить группу permission.
     * @param {PermissionsApiApiV1PermissionsGroupsGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGroupsGuidPatch(requestParameters: PermissionsApiApiV1PermissionsGroupsGuidPatchRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGroupsGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Создать группу permission.   
     * @summary # Создать группу permission.
     * @param {PermissionsApiApiV1PermissionsGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGroupsPost(requestParameters: PermissionsApiApiV1PermissionsGroupsPostRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGroupsPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Удалить permission по его GUID.   
     * @summary # Удалить permission по его GUID.
     * @param {PermissionsApiApiV1PermissionsGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGuidDelete(requestParameters: PermissionsApiApiV1PermissionsGuidDeleteRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGuidDelete(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить permission.   ## Нельзя менять поле key.   
     * @summary #  Изменить permission.
     * @param {PermissionsApiApiV1PermissionsGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsGuidPatch(requestParameters: PermissionsApiApiV1PermissionsGuidPatchRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список permission-ы. Админ может запращивать по всем ролям.  ## Обычный пользователь может получить только permission-ы из его роли.
     * @summary Получить список permissions (Paginated).
     * @param {PermissionsApiApiV1PermissionsPagGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsPagGet(requestParameters: PermissionsApiApiV1PermissionsPagGetRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsPagGet(requestParameters.groupIds, requestParameters.offset, requestParameters.limit, requestParameters.role, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Создать permission.   
     * @summary # Создать permission.
     * @param {PermissionsApiApiV1PermissionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsPost(requestParameters: PermissionsApiApiV1PermissionsPostRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список разрешений для продуктов всех сабъюзеров.
     * @summary Получить список разрешений для продуктов всех сабъюзеров (DEPRECATED).
     * @param {PermissionsApiApiV1PermissionsProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsProductsGet(requestParameters: PermissionsApiApiV1PermissionsProductsGetRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsProductsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список разрешений для продуктов юзера по его айди.
     * @summary Получить список разрешений для продуктов юзера по его айди.
     * @param {PermissionsApiApiV1PermissionsProductsGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsProductsGuidGet(requestParameters: PermissionsApiApiV1PermissionsProductsGuidGetRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsProductsGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список разрешений для продуктов всех сабъюзеров (Paginated).
     * @summary Получить список разрешений для продуктов всех сабъюзеров (Paginated).
     * @param {PermissionsApiApiV1PermissionsProductsPagGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsProductsPagGet(requestParameters: PermissionsApiApiV1PermissionsProductsPagGetRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsProductsPagGet(requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Переписать разрешения для продукта для саба.
     * @summary Переписать разрешения для продукта для саба.
     * @param {PermissionsApiApiV1PermissionsProductsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsProductsPatch(requestParameters: PermissionsApiApiV1PermissionsProductsPatchRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsProductsPatch(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid.   
     * @summary #   !!! не актуально, нужно использовать  /users/edit_my_sub-users/:guid
     * @param {PermissionsApiApiV1PermissionsSetForUserGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsSetForUserGuidPatch(requestParameters: PermissionsApiApiV1PermissionsSetForUserGuidPatchRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsSetForUserGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список разрешений для магазинов юзера по его айди.
     * @summary Получить список разрешений для магазинов юзера по его айди.
     * @param {PermissionsApiApiV1PermissionsShopsGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsShopsGuidGet(requestParameters: PermissionsApiApiV1PermissionsShopsGuidGetRequest, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsShopsGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Переписать разрешения для магазина для юзера.
     * @summary Переписать разрешения для магазина для юзера.
     * @param {PermissionsApiApiV1PermissionsShopsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiV1PermissionsShopsPatch(requestParameters: PermissionsApiApiV1PermissionsShopsPatchRequest = {}, options?: any) {
        return PermissionsApiFp(this.configuration).apiV1PermissionsShopsPatch(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
