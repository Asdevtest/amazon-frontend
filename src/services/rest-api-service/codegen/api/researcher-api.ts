/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { ConflictInTheState } from '../models';
// @ts-ignore
import { InlineObject122 } from '../models';
// @ts-ignore
import { InlineObject123 } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { InlineResponse20095 } from '../models';
// @ts-ignore
import { InlineResponse2017 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * ResearcherApi - axios parameter creator
 * @export
 */
export const ResearcherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Проверить продукт по ID существует ли он в базе.  В базе ASIN продукта должно быть уникально. База не даст завести дубль. Перед добавление продукта   нужно проверить, нет ли в базе уже продукта с таким ID   
         * @summary Проверить продукт по ID существует ли он в базе.
         * @param {string} asin ASIN для проверки
         * @param {string} strategy Стратегия АСИНА для проверки
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersCheckProductsAsinStrategyGet: async (asin: string, strategy: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('apiV1ResearchersCheckProductsAsinStrategyGet', 'asin', asin)
            // verify required parameter 'strategy' is not null or undefined
            assertParamExists('apiV1ResearchersCheckProductsAsinStrategyGet', 'strategy', strategy)
            const localVarPath = `/api/v1/researchers/check_products/{asin}/{strategy}`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)))
                .replace(`{${"strategy"}}`, encodeURIComponent(String(strategy)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список товаров созданных данным пользователем.   
         * @summary Получить список товаров созданных данным пользователем.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/researchers/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Удалить продукт.   
         * @summary Удалить продукт.
         * @param {string} guid GUID продукта.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGuidDelete: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ResearchersProductsGuidDelete', 'guid', guid)
            const localVarPath = `/api/v1/researchers/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить товар по GUID.
         * @summary Получить товар по GUID.
         * @param {string} guid GUID запрашиваемого ресурса.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ResearchersProductsGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/researchers/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить продукт.   ## ASIN нельзя менять после того как создан продукт.   Может редактировать только товары со статусами 0, 5, 10
         * @summary #  Изменить продукт.
         * @param {string} guid GUID продукта БД
         * @param {InlineObject123} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGuidPatch: async (guid: string, body?: InlineObject123, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ResearchersProductsGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/researchers/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Добавить новый продукт.   
         * @summary # Добавить новый продукт.
         * @param {InlineObject122} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsPost: async (body?: InlineObject122, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/researchers/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResearcherApi - functional programming interface
 * @export
 */
export const ResearcherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResearcherApiAxiosParamCreator(configuration)
    return {
        /**
         * Проверить продукт по ID существует ли он в базе.  В базе ASIN продукта должно быть уникально. База не даст завести дубль. Перед добавление продукта   нужно проверить, нет ли в базе уже продукта с таким ID   
         * @summary Проверить продукт по ID существует ли он в базе.
         * @param {string} asin ASIN для проверки
         * @param {string} strategy Стратегия АСИНА для проверки
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResearchersCheckProductsAsinStrategyGet(asin: string, strategy: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20095>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResearchersCheckProductsAsinStrategyGet(asin, strategy, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить список товаров созданных данным пользователем.   
         * @summary Получить список товаров созданных данным пользователем.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResearchersProductsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2002>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResearchersProductsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Удалить продукт.   
         * @summary Удалить продукт.
         * @param {string} guid GUID продукта.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResearchersProductsGuidDelete(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResearchersProductsGuidDelete(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить товар по GUID.
         * @summary Получить товар по GUID.
         * @param {string} guid GUID запрашиваемого ресурса.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResearchersProductsGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResearchersProductsGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить продукт.   ## ASIN нельзя менять после того как создан продукт.   Может редактировать только товары со статусами 0, 5, 10
         * @summary #  Изменить продукт.
         * @param {string} guid GUID продукта БД
         * @param {InlineObject123} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResearchersProductsGuidPatch(guid: string, body?: InlineObject123, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResearchersProductsGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Добавить новый продукт.   
         * @summary # Добавить новый продукт.
         * @param {InlineObject122} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResearchersProductsPost(body?: InlineObject122, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResearchersProductsPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResearcherApi - factory interface
 * @export
 */
export const ResearcherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResearcherApiFp(configuration)
    return {
        /**
         * Проверить продукт по ID существует ли он в базе.  В базе ASIN продукта должно быть уникально. База не даст завести дубль. Перед добавление продукта   нужно проверить, нет ли в базе уже продукта с таким ID   
         * @summary Проверить продукт по ID существует ли он в базе.
         * @param {string} asin ASIN для проверки
         * @param {string} strategy Стратегия АСИНА для проверки
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersCheckProductsAsinStrategyGet(asin: string, strategy: string, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20095> {
            return localVarFp.apiV1ResearchersCheckProductsAsinStrategyGet(asin, strategy, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список товаров созданных данным пользователем.   
         * @summary Получить список товаров созданных данным пользователем.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse2002>> {
            return localVarFp.apiV1ResearchersProductsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Удалить продукт.   
         * @summary Удалить продукт.
         * @param {string} guid GUID продукта.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGuidDelete(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1ResearchersProductsGuidDelete(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить товар по GUID.
         * @summary Получить товар по GUID.
         * @param {string} guid GUID запрашиваемого ресурса.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.apiV1ResearchersProductsGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить продукт.   ## ASIN нельзя менять после того как создан продукт.   Может редактировать только товары со статусами 0, 5, 10
         * @summary #  Изменить продукт.
         * @param {string} guid GUID продукта БД
         * @param {InlineObject123} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsGuidPatch(guid: string, body?: InlineObject123, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1ResearchersProductsGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Добавить новый продукт.   
         * @summary # Добавить новый продукт.
         * @param {InlineObject122} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResearchersProductsPost(body?: InlineObject122, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.apiV1ResearchersProductsPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1ResearchersCheckProductsAsinStrategyGet operation in ResearcherApi.
 * @export
 * @interface ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGetRequest
 */
export interface ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGetRequest {
    /**
     * ASIN для проверки
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGet
     */
    readonly asin: string

    /**
     * Стратегия АСИНА для проверки
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGet
     */
    readonly strategy: string

    /**
     * 
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ResearchersProductsGet operation in ResearcherApi.
 * @export
 * @interface ResearcherApiApiV1ResearchersProductsGetRequest
 */
export interface ResearcherApiApiV1ResearchersProductsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ResearchersProductsGuidDelete operation in ResearcherApi.
 * @export
 * @interface ResearcherApiApiV1ResearchersProductsGuidDeleteRequest
 */
export interface ResearcherApiApiV1ResearchersProductsGuidDeleteRequest {
    /**
     * GUID продукта.
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ResearchersProductsGuidGet operation in ResearcherApi.
 * @export
 * @interface ResearcherApiApiV1ResearchersProductsGuidGetRequest
 */
export interface ResearcherApiApiV1ResearchersProductsGuidGetRequest {
    /**
     * GUID запрашиваемого ресурса.
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ResearchersProductsGuidPatch operation in ResearcherApi.
 * @export
 * @interface ResearcherApiApiV1ResearchersProductsGuidPatchRequest
 */
export interface ResearcherApiApiV1ResearchersProductsGuidPatchRequest {
    /**
     * GUID продукта БД
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject123}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidPatch
     */
    readonly body?: InlineObject123

    /**
     * 
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ResearchersProductsPost operation in ResearcherApi.
 * @export
 * @interface ResearcherApiApiV1ResearchersProductsPostRequest
 */
export interface ResearcherApiApiV1ResearchersProductsPostRequest {
    /**
     * 
     * @type {InlineObject122}
     * @memberof ResearcherApiApiV1ResearchersProductsPost
     */
    readonly body?: InlineObject122

    /**
     * 
     * @type {string}
     * @memberof ResearcherApiApiV1ResearchersProductsPost
     */
    readonly acceptEncoding?: string
}

/**
 * ResearcherApi - object-oriented interface
 * @export
 * @class ResearcherApi
 * @extends {BaseAPI}
 */
export class ResearcherApi extends BaseAPI {
    /**
     * Проверить продукт по ID существует ли он в базе.  В базе ASIN продукта должно быть уникально. База не даст завести дубль. Перед добавление продукта   нужно проверить, нет ли в базе уже продукта с таким ID   
     * @summary Проверить продукт по ID существует ли он в базе.
     * @param {ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResearcherApi
     */
    public apiV1ResearchersCheckProductsAsinStrategyGet(requestParameters: ResearcherApiApiV1ResearchersCheckProductsAsinStrategyGetRequest, options?: any) {
        return ResearcherApiFp(this.configuration).apiV1ResearchersCheckProductsAsinStrategyGet(requestParameters.asin, requestParameters.strategy, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список товаров созданных данным пользователем.   
     * @summary Получить список товаров созданных данным пользователем.
     * @param {ResearcherApiApiV1ResearchersProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResearcherApi
     */
    public apiV1ResearchersProductsGet(requestParameters: ResearcherApiApiV1ResearchersProductsGetRequest = {}, options?: any) {
        return ResearcherApiFp(this.configuration).apiV1ResearchersProductsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Удалить продукт.   
     * @summary Удалить продукт.
     * @param {ResearcherApiApiV1ResearchersProductsGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResearcherApi
     */
    public apiV1ResearchersProductsGuidDelete(requestParameters: ResearcherApiApiV1ResearchersProductsGuidDeleteRequest, options?: any) {
        return ResearcherApiFp(this.configuration).apiV1ResearchersProductsGuidDelete(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить товар по GUID.
     * @summary Получить товар по GUID.
     * @param {ResearcherApiApiV1ResearchersProductsGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResearcherApi
     */
    public apiV1ResearchersProductsGuidGet(requestParameters: ResearcherApiApiV1ResearchersProductsGuidGetRequest, options?: any) {
        return ResearcherApiFp(this.configuration).apiV1ResearchersProductsGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить продукт.   ## ASIN нельзя менять после того как создан продукт.   Может редактировать только товары со статусами 0, 5, 10
     * @summary #  Изменить продукт.
     * @param {ResearcherApiApiV1ResearchersProductsGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResearcherApi
     */
    public apiV1ResearchersProductsGuidPatch(requestParameters: ResearcherApiApiV1ResearchersProductsGuidPatchRequest, options?: any) {
        return ResearcherApiFp(this.configuration).apiV1ResearchersProductsGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Добавить новый продукт.   
     * @summary # Добавить новый продукт.
     * @param {ResearcherApiApiV1ResearchersProductsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResearcherApi
     */
    public apiV1ResearchersProductsPost(requestParameters: ResearcherApiApiV1ResearchersProductsPostRequest = {}, options?: any) {
        return ResearcherApiFp(this.configuration).apiV1ResearchersProductsPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
