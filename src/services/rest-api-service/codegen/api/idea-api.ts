/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { InlineObject72 } from '../models';
// @ts-ignore
import { InlineObject73 } from '../models';
// @ts-ignore
import { InlineObject74 } from '../models';
// @ts-ignore
import { InlineObject75 } from '../models';
// @ts-ignore
import { InlineObject76 } from '../models';
// @ts-ignore
import { InlineResponse20061 } from '../models';
// @ts-ignore
import { InlineResponse20062 } from '../models';
// @ts-ignore
import { InlineResponse20062Rows } from '../models';
// @ts-ignore
import { InlineResponse20063 } from '../models';
// @ts-ignore
import { InlineResponse2015 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
/**
 * IdeaApi - axios parameter creator
 * @export
 */
export const IdeaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Добавление поставщиков к идее  
         * @summary Добавить поставщиков к идее
         * @param {string} guid ID идеи
         * @param {InlineObject74} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasAddSuppliersGuidPost: async (guid: string, body?: InlineObject74, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasAddSuppliersGuidPost', 'guid', guid)
            const localVarPath = `/api/v1/ideas/add_suppliers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с supplierFound(14) или productCreating(16) на addingAsin(18)
         * @summary Изменить статус заявки на addingAsin(18)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasAddingAsinGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasAddingAsinGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/adding_asin/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить идеи по родительскому продукту
         * @summary Получить идеи по родительскому продукту
         * @param {string} guid ID родительского продукта, который должен быть в идее
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasByParentGuidGet: async (guid: string, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasByParentGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/ideas/by_parent/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с rejected(25) на closed(30)
         * @summary Изменить статус заявки на closed(30)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasClosedGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasClosedGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/closed/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с addingAsin(18) на finished(20)
         * @summary Изменить статус заявки на finished(20)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasFinishedGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasFinishedGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/finished/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Удаление идеи  
         * @summary Удалить идею
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasGuidDelete: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasGuidDelete', 'guid', guid)
            const localVarPath = `/api/v1/ideas/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить идею по гуиду
         * @summary Получить идею по гуиду
         * @param {string} guid GUID идеи в БД
         * @param {boolean} [withRequests] Наличие в ответе заявок в продуктах
         * @param {boolean} [withOrder] Наличие в ответе заказа в продуктах
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasGuidGet: async (guid: string, withRequests?: boolean, withOrder?: boolean, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/ideas/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withRequests !== undefined) {
                localVarQueryParameter['withRequests'] = withRequests;
            }

            if (withOrder !== undefined) {
                localVarQueryParameter['withOrder'] = withOrder;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Редактирование существующей идеи  
         * @summary Редактировать идею
         * @param {string} guid ID идеи
         * @param {InlineObject72} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasGuidPatch: async (guid: string, body?: InlineObject72, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить нотификации идей  
         * @summary Получить нотификации идей
         * @param {boolean} [archive] Показывать в архиве/не в архиме нотификации
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasNotificationsGet: async (archive?: boolean, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ideas/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (archive !== undefined) {
                localVarQueryParameter['archive'] = archive;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с new(5) на OnCheck(10)
         * @summary Изменить статус заявки на OnCheck(10)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasOnCheckGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasOnCheckGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/on_check/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить список всех идей с пагинацией
         * @summary Список всех идей с пагинацией
         * @param {string} [filters]                Возможные поля: asin:, _id, title, status, comments, intervalStatusNew, intervalStatusOnCheck,               intervalStatusSupplierSearch, intervalStatusCardCreating, intervalStatusAddingAsin,               intervalStatusRejected, intervalsSum, dateStatusOnCheck, dateStatusSupplierSearch               dateStatusCardCreating, dateStatusAddingAsin, dateStatusFinished, dateStatusRejected, dateStatusClosed               intervalsSum, onCheckRequestsHumanFriendlyId, onFinishedRequestsHumanFriendlyId, onCheckRequestStatus, onFinishedRequestStatus, childProductSkuByClient, childProductAmazonTitle,               childProductShopId, childProductAsin, parentProductSkuByClient, parentProductAmazonTitle,               parentProductShopId, parentProductAsin               2 варианта использования:                 1. Фильтр по одному полю:                   [parentProductAmazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][parentProductAmazonTitle][$eq]&#x3D;some_title;or[1][parentProductAsin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых parentProductAmazonTitle равен some_title или parentProductAsin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {boolean} [withRequests] Наличие в ответе заявок в продуктах
         * @param {boolean} [withOrder] Наличие в ответе заказа в продуктах
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC' | 'DESC NULLS LAST'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasPagMyGet: async (filters?: string, withRequests?: boolean, withOrder?: boolean, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC' | 'DESC NULLS LAST', noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ideas/pag/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (withRequests !== undefined) {
                localVarQueryParameter['withRequests'] = withRequests;
            }

            if (withOrder !== undefined) {
                localVarQueryParameter['withOrder'] = withOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sortType'] = sortType;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Добавление новой идеи   
         * @summary Добавить идею
         * @param {InlineObject73} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasPost: async (body?: InlineObject73, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ideas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с supplierFound(14) на productCreating(16)
         * @summary Изменить статус заявки на productCreating(16)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasProductCreatingGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasProductCreatingGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/product_creating/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки со статусов 5/10/13/14/15 на rejected(25)
         * @summary Изменить статус заявки на rejected(25)
         * @param {string} guid ID идеи
         * @param {InlineObject76} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasRejectedGuidPatch: async (guid: string, body?: InlineObject76, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasRejectedGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/rejected/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Удаление поставщика у идеи  
         * @summary Удалить поставщика
         * @param {string} guid ID идеи
         * @param {InlineObject75} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasRemoveSupplierGuidPost: async (guid: string, body?: InlineObject75, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasRemoveSupplierGuidPost', 'guid', guid)
            const localVarPath = `/api/v1/ideas/remove_supplier/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Открыть заявку заново rejected(25) -> new(5), затереть даты и интервалы
         * @summary Открыть заявку заново
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasReopenGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasReopenGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/reopen/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с supplierSearch(13) на supplierFound(14)
         * @summary Изменить статус заявки на supplierFound(14)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasSupplierFoundGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasSupplierFoundGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/supplier_found/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с supplierSearch(13) на supplierNotFound(15)
         * @summary Изменить статус заявки на supplierNotFound(15)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasSupplierNotFoundGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasSupplierNotFoundGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/supplier_not_found/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус заявки с OnCheck(10) на supplierSearch(13)
         * @summary Изменить статус заявки на supplierSearch(13)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasSupplierSearchGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1IdeasSupplierSearchGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/ideas/supplier_search/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdeaApi - functional programming interface
 * @export
 */
export const IdeaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdeaApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Добавление поставщиков к идее  
         * @summary Добавить поставщиков к идее
         * @param {string} guid ID идеи
         * @param {InlineObject74} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasAddSuppliersGuidPost(guid: string, body?: InlineObject74, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasAddSuppliersGuidPost(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с supplierFound(14) или productCreating(16) на addingAsin(18)
         * @summary Изменить статус заявки на addingAsin(18)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasAddingAsinGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasAddingAsinGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить идеи по родительскому продукту
         * @summary Получить идеи по родительскому продукту
         * @param {string} guid ID родительского продукта, который должен быть в идее
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasByParentGuidGet(guid: string, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20061>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasByParentGuidGet(guid, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с rejected(25) на closed(30)
         * @summary Изменить статус заявки на closed(30)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasClosedGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasClosedGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с addingAsin(18) на finished(20)
         * @summary Изменить статус заявки на finished(20)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasFinishedGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasFinishedGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Удаление идеи  
         * @summary Удалить идею
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasGuidDelete(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasGuidDelete(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить идею по гуиду
         * @summary Получить идею по гуиду
         * @param {string} guid GUID идеи в БД
         * @param {boolean} [withRequests] Наличие в ответе заявок в продуктах
         * @param {boolean} [withOrder] Наличие в ответе заказа в продуктах
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasGuidGet(guid: string, withRequests?: boolean, withOrder?: boolean, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062Rows>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasGuidGet(guid, withRequests, withOrder, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Редактирование существующей идеи  
         * @summary Редактировать идею
         * @param {string} guid ID идеи
         * @param {InlineObject72} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasGuidPatch(guid: string, body?: InlineObject72, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить нотификации идей  
         * @summary Получить нотификации идей
         * @param {boolean} [archive] Показывать в архиве/не в архиме нотификации
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasNotificationsGet(archive?: boolean, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20063>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasNotificationsGet(archive, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с new(5) на OnCheck(10)
         * @summary Изменить статус заявки на OnCheck(10)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasOnCheckGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasOnCheckGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить список всех идей с пагинацией
         * @summary Список всех идей с пагинацией
         * @param {string} [filters]                Возможные поля: asin:, _id, title, status, comments, intervalStatusNew, intervalStatusOnCheck,               intervalStatusSupplierSearch, intervalStatusCardCreating, intervalStatusAddingAsin,               intervalStatusRejected, intervalsSum, dateStatusOnCheck, dateStatusSupplierSearch               dateStatusCardCreating, dateStatusAddingAsin, dateStatusFinished, dateStatusRejected, dateStatusClosed               intervalsSum, onCheckRequestsHumanFriendlyId, onFinishedRequestsHumanFriendlyId, onCheckRequestStatus, onFinishedRequestStatus, childProductSkuByClient, childProductAmazonTitle,               childProductShopId, childProductAsin, parentProductSkuByClient, parentProductAmazonTitle,               parentProductShopId, parentProductAsin               2 варианта использования:                 1. Фильтр по одному полю:                   [parentProductAmazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][parentProductAmazonTitle][$eq]&#x3D;some_title;or[1][parentProductAsin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых parentProductAmazonTitle равен some_title или parentProductAsin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {boolean} [withRequests] Наличие в ответе заявок в продуктах
         * @param {boolean} [withOrder] Наличие в ответе заказа в продуктах
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC' | 'DESC NULLS LAST'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasPagMyGet(filters?: string, withRequests?: boolean, withOrder?: boolean, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC' | 'DESC NULLS LAST', noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20062>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasPagMyGet(filters, withRequests, withOrder, limit, offset, sortField, sortType, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Добавление новой идеи   
         * @summary Добавить идею
         * @param {InlineObject73} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasPost(body?: InlineObject73, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с supplierFound(14) на productCreating(16)
         * @summary Изменить статус заявки на productCreating(16)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasProductCreatingGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasProductCreatingGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки со статусов 5/10/13/14/15 на rejected(25)
         * @summary Изменить статус заявки на rejected(25)
         * @param {string} guid ID идеи
         * @param {InlineObject76} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasRejectedGuidPatch(guid: string, body?: InlineObject76, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasRejectedGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Удаление поставщика у идеи  
         * @summary Удалить поставщика
         * @param {string} guid ID идеи
         * @param {InlineObject75} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasRemoveSupplierGuidPost(guid: string, body?: InlineObject75, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasRemoveSupplierGuidPost(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Открыть заявку заново rejected(25) -> new(5), затереть даты и интервалы
         * @summary Открыть заявку заново
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasReopenGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasReopenGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с supplierSearch(13) на supplierFound(14)
         * @summary Изменить статус заявки на supplierFound(14)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasSupplierFoundGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasSupplierFoundGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с supplierSearch(13) на supplierNotFound(15)
         * @summary Изменить статус заявки на supplierNotFound(15)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasSupplierNotFoundGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasSupplierNotFoundGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус заявки с OnCheck(10) на supplierSearch(13)
         * @summary Изменить статус заявки на supplierSearch(13)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdeasSupplierSearchGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdeasSupplierSearchGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdeaApi - factory interface
 * @export
 */
export const IdeaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdeaApiFp(configuration)
    return {
        /**
         * ## Добавление поставщиков к идее  
         * @summary Добавить поставщиков к идее
         * @param {string} guid ID идеи
         * @param {InlineObject74} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasAddSuppliersGuidPost(guid: string, body?: InlineObject74, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasAddSuppliersGuidPost(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с supplierFound(14) или productCreating(16) на addingAsin(18)
         * @summary Изменить статус заявки на addingAsin(18)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasAddingAsinGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasAddingAsinGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить идеи по родительскому продукту
         * @summary Получить идеи по родительскому продукту
         * @param {string} guid ID родительского продукта, который должен быть в идее
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasByParentGuidGet(guid: string, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20061>> {
            return localVarFp.apiV1IdeasByParentGuidGet(guid, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с rejected(25) на closed(30)
         * @summary Изменить статус заявки на closed(30)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasClosedGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasClosedGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с addingAsin(18) на finished(20)
         * @summary Изменить статус заявки на finished(20)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasFinishedGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasFinishedGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Удаление идеи  
         * @summary Удалить идею
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasGuidDelete(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasGuidDelete(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить идею по гуиду
         * @summary Получить идею по гуиду
         * @param {string} guid GUID идеи в БД
         * @param {boolean} [withRequests] Наличие в ответе заявок в продуктах
         * @param {boolean} [withOrder] Наличие в ответе заказа в продуктах
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasGuidGet(guid: string, withRequests?: boolean, withOrder?: boolean, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20062Rows> {
            return localVarFp.apiV1IdeasGuidGet(guid, withRequests, withOrder, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Редактирование существующей идеи  
         * @summary Редактировать идею
         * @param {string} guid ID идеи
         * @param {InlineObject72} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasGuidPatch(guid: string, body?: InlineObject72, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить нотификации идей  
         * @summary Получить нотификации идей
         * @param {boolean} [archive] Показывать в архиве/не в архиме нотификации
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasNotificationsGet(archive?: boolean, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20063>> {
            return localVarFp.apiV1IdeasNotificationsGet(archive, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с new(5) на OnCheck(10)
         * @summary Изменить статус заявки на OnCheck(10)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasOnCheckGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasOnCheckGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить список всех идей с пагинацией
         * @summary Список всех идей с пагинацией
         * @param {string} [filters]                Возможные поля: asin:, _id, title, status, comments, intervalStatusNew, intervalStatusOnCheck,               intervalStatusSupplierSearch, intervalStatusCardCreating, intervalStatusAddingAsin,               intervalStatusRejected, intervalsSum, dateStatusOnCheck, dateStatusSupplierSearch               dateStatusCardCreating, dateStatusAddingAsin, dateStatusFinished, dateStatusRejected, dateStatusClosed               intervalsSum, onCheckRequestsHumanFriendlyId, onFinishedRequestsHumanFriendlyId, onCheckRequestStatus, onFinishedRequestStatus, childProductSkuByClient, childProductAmazonTitle,               childProductShopId, childProductAsin, parentProductSkuByClient, parentProductAmazonTitle,               parentProductShopId, parentProductAsin               2 варианта использования:                 1. Фильтр по одному полю:                   [parentProductAmazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][parentProductAmazonTitle][$eq]&#x3D;some_title;or[1][parentProductAsin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых parentProductAmazonTitle равен some_title или parentProductAsin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {boolean} [withRequests] Наличие в ответе заявок в продуктах
         * @param {boolean} [withOrder] Наличие в ответе заказа в продуктах
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC' | 'DESC NULLS LAST'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasPagMyGet(filters?: string, withRequests?: boolean, withOrder?: boolean, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC' | 'DESC NULLS LAST', noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20062> {
            return localVarFp.apiV1IdeasPagMyGet(filters, withRequests, withOrder, limit, offset, sortField, sortType, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Добавление новой идеи   
         * @summary Добавить идею
         * @param {InlineObject73} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasPost(body?: InlineObject73, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2015> {
            return localVarFp.apiV1IdeasPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с supplierFound(14) на productCreating(16)
         * @summary Изменить статус заявки на productCreating(16)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasProductCreatingGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasProductCreatingGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки со статусов 5/10/13/14/15 на rejected(25)
         * @summary Изменить статус заявки на rejected(25)
         * @param {string} guid ID идеи
         * @param {InlineObject76} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasRejectedGuidPatch(guid: string, body?: InlineObject76, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasRejectedGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Удаление поставщика у идеи  
         * @summary Удалить поставщика
         * @param {string} guid ID идеи
         * @param {InlineObject75} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasRemoveSupplierGuidPost(guid: string, body?: InlineObject75, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasRemoveSupplierGuidPost(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Открыть заявку заново rejected(25) -> new(5), затереть даты и интервалы
         * @summary Открыть заявку заново
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasReopenGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasReopenGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с supplierSearch(13) на supplierFound(14)
         * @summary Изменить статус заявки на supplierFound(14)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasSupplierFoundGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasSupplierFoundGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с supplierSearch(13) на supplierNotFound(15)
         * @summary Изменить статус заявки на supplierNotFound(15)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasSupplierNotFoundGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasSupplierNotFoundGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус заявки с OnCheck(10) на supplierSearch(13)
         * @summary Изменить статус заявки на supplierSearch(13)
         * @param {string} guid ID идеи
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdeasSupplierSearchGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1IdeasSupplierSearchGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1IdeasAddSuppliersGuidPost operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasAddSuppliersGuidPostRequest
 */
export interface IdeaApiApiV1IdeasAddSuppliersGuidPostRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasAddSuppliersGuidPost
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject74}
     * @memberof IdeaApiApiV1IdeasAddSuppliersGuidPost
     */
    readonly body?: InlineObject74

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasAddSuppliersGuidPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasAddingAsinGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasAddingAsinGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasAddingAsinGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasAddingAsinGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasAddingAsinGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasByParentGuidGet operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasByParentGuidGetRequest
 */
export interface IdeaApiApiV1IdeasByParentGuidGetRequest {
    /**
     * ID родительского продукта, который должен быть в идее
     * @type {string}
     * @memberof IdeaApiApiV1IdeasByParentGuidGet
     */
    readonly guid: string

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasByParentGuidGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasByParentGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasClosedGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasClosedGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasClosedGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasClosedGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasClosedGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasFinishedGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasFinishedGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasFinishedGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasFinishedGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasFinishedGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasGuidDelete operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasGuidDeleteRequest
 */
export interface IdeaApiApiV1IdeasGuidDeleteRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasGuidDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasGuidGet operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasGuidGetRequest
 */
export interface IdeaApiApiV1IdeasGuidGetRequest {
    /**
     * GUID идеи в БД
     * @type {string}
     * @memberof IdeaApiApiV1IdeasGuidGet
     */
    readonly guid: string

    /**
     * Наличие в ответе заявок в продуктах
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasGuidGet
     */
    readonly withRequests?: boolean

    /**
     * Наличие в ответе заказа в продуктах
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasGuidGet
     */
    readonly withOrder?: boolean

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasGuidGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject72}
     * @memberof IdeaApiApiV1IdeasGuidPatch
     */
    readonly body?: InlineObject72

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasNotificationsGet operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasNotificationsGetRequest
 */
export interface IdeaApiApiV1IdeasNotificationsGetRequest {
    /**
     * Показывать в архиве/не в архиме нотификации
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasNotificationsGet
     */
    readonly archive?: boolean

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasNotificationsGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasNotificationsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasOnCheckGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasOnCheckGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasOnCheckGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasOnCheckGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasOnCheckGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasPagMyGet operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasPagMyGetRequest
 */
export interface IdeaApiApiV1IdeasPagMyGetRequest {
    /**
     *                Возможные поля: asin:, _id, title, status, comments, intervalStatusNew, intervalStatusOnCheck,               intervalStatusSupplierSearch, intervalStatusCardCreating, intervalStatusAddingAsin,               intervalStatusRejected, intervalsSum, dateStatusOnCheck, dateStatusSupplierSearch               dateStatusCardCreating, dateStatusAddingAsin, dateStatusFinished, dateStatusRejected, dateStatusClosed               intervalsSum, onCheckRequestsHumanFriendlyId, onFinishedRequestsHumanFriendlyId, onCheckRequestStatus, onFinishedRequestStatus, childProductSkuByClient, childProductAmazonTitle,               childProductShopId, childProductAsin, parentProductSkuByClient, parentProductAmazonTitle,               parentProductShopId, parentProductAsin               2 варианта использования:                 1. Фильтр по одному полю:                   [parentProductAmazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][parentProductAmazonTitle][$eq]&#x3D;some_title;or[1][parentProductAsin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых parentProductAmazonTitle равен some_title или parentProductAsin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
     * @type {string}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly filters?: string

    /**
     * Наличие в ответе заявок в продуктах
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly withRequests?: boolean

    /**
     * Наличие в ответе заказа в продуктах
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly withOrder?: boolean

    /**
     * Лимит записей для пагинации
     * @type {number}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly limit?: number

    /**
     * Смещение для пагинации
     * @type {number}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly offset?: number

    /**
     * Название поля
     * @type {string}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly sortField?: string

    /**
     * Тип сортировки
     * @type {'ASC' | 'DESC' | 'DESC NULLS LAST'}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly sortType?: 'ASC' | 'DESC' | 'DESC NULLS LAST'

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasPagMyGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasPost operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasPostRequest
 */
export interface IdeaApiApiV1IdeasPostRequest {
    /**
     * 
     * @type {InlineObject73}
     * @memberof IdeaApiApiV1IdeasPost
     */
    readonly body?: InlineObject73

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasProductCreatingGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasProductCreatingGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasProductCreatingGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasProductCreatingGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasProductCreatingGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasRejectedGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasRejectedGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasRejectedGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasRejectedGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject76}
     * @memberof IdeaApiApiV1IdeasRejectedGuidPatch
     */
    readonly body?: InlineObject76

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasRejectedGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasRemoveSupplierGuidPost operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasRemoveSupplierGuidPostRequest
 */
export interface IdeaApiApiV1IdeasRemoveSupplierGuidPostRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasRemoveSupplierGuidPost
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject75}
     * @memberof IdeaApiApiV1IdeasRemoveSupplierGuidPost
     */
    readonly body?: InlineObject75

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasRemoveSupplierGuidPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasReopenGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasReopenGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasReopenGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasReopenGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasReopenGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasSupplierFoundGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasSupplierFoundGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasSupplierFoundGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasSupplierFoundGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasSupplierFoundGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasSupplierNotFoundGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasSupplierNotFoundGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasSupplierNotFoundGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasSupplierNotFoundGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasSupplierNotFoundGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1IdeasSupplierSearchGuidPatch operation in IdeaApi.
 * @export
 * @interface IdeaApiApiV1IdeasSupplierSearchGuidPatchRequest
 */
export interface IdeaApiApiV1IdeasSupplierSearchGuidPatchRequest {
    /**
     * ID идеи
     * @type {string}
     * @memberof IdeaApiApiV1IdeasSupplierSearchGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof IdeaApiApiV1IdeasSupplierSearchGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * IdeaApi - object-oriented interface
 * @export
 * @class IdeaApi
 * @extends {BaseAPI}
 */
export class IdeaApi extends BaseAPI {
    /**
     * ## Добавление поставщиков к идее  
     * @summary Добавить поставщиков к идее
     * @param {IdeaApiApiV1IdeasAddSuppliersGuidPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasAddSuppliersGuidPost(requestParameters: IdeaApiApiV1IdeasAddSuppliersGuidPostRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasAddSuppliersGuidPost(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с supplierFound(14) или productCreating(16) на addingAsin(18)
     * @summary Изменить статус заявки на addingAsin(18)
     * @param {IdeaApiApiV1IdeasAddingAsinGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasAddingAsinGuidPatch(requestParameters: IdeaApiApiV1IdeasAddingAsinGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasAddingAsinGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить идеи по родительскому продукту
     * @summary Получить идеи по родительскому продукту
     * @param {IdeaApiApiV1IdeasByParentGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasByParentGuidGet(requestParameters: IdeaApiApiV1IdeasByParentGuidGetRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasByParentGuidGet(requestParameters.guid, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с rejected(25) на closed(30)
     * @summary Изменить статус заявки на closed(30)
     * @param {IdeaApiApiV1IdeasClosedGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasClosedGuidPatch(requestParameters: IdeaApiApiV1IdeasClosedGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasClosedGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с addingAsin(18) на finished(20)
     * @summary Изменить статус заявки на finished(20)
     * @param {IdeaApiApiV1IdeasFinishedGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasFinishedGuidPatch(requestParameters: IdeaApiApiV1IdeasFinishedGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasFinishedGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Удаление идеи  
     * @summary Удалить идею
     * @param {IdeaApiApiV1IdeasGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasGuidDelete(requestParameters: IdeaApiApiV1IdeasGuidDeleteRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasGuidDelete(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить идею по гуиду
     * @summary Получить идею по гуиду
     * @param {IdeaApiApiV1IdeasGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasGuidGet(requestParameters: IdeaApiApiV1IdeasGuidGetRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasGuidGet(requestParameters.guid, requestParameters.withRequests, requestParameters.withOrder, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Редактирование существующей идеи  
     * @summary Редактировать идею
     * @param {IdeaApiApiV1IdeasGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasGuidPatch(requestParameters: IdeaApiApiV1IdeasGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить нотификации идей  
     * @summary Получить нотификации идей
     * @param {IdeaApiApiV1IdeasNotificationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasNotificationsGet(requestParameters: IdeaApiApiV1IdeasNotificationsGetRequest = {}, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasNotificationsGet(requestParameters.archive, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с new(5) на OnCheck(10)
     * @summary Изменить статус заявки на OnCheck(10)
     * @param {IdeaApiApiV1IdeasOnCheckGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasOnCheckGuidPatch(requestParameters: IdeaApiApiV1IdeasOnCheckGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasOnCheckGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить список всех идей с пагинацией
     * @summary Список всех идей с пагинацией
     * @param {IdeaApiApiV1IdeasPagMyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasPagMyGet(requestParameters: IdeaApiApiV1IdeasPagMyGetRequest = {}, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasPagMyGet(requestParameters.filters, requestParameters.withRequests, requestParameters.withOrder, requestParameters.limit, requestParameters.offset, requestParameters.sortField, requestParameters.sortType, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Добавление новой идеи   
     * @summary Добавить идею
     * @param {IdeaApiApiV1IdeasPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasPost(requestParameters: IdeaApiApiV1IdeasPostRequest = {}, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с supplierFound(14) на productCreating(16)
     * @summary Изменить статус заявки на productCreating(16)
     * @param {IdeaApiApiV1IdeasProductCreatingGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasProductCreatingGuidPatch(requestParameters: IdeaApiApiV1IdeasProductCreatingGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasProductCreatingGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки со статусов 5/10/13/14/15 на rejected(25)
     * @summary Изменить статус заявки на rejected(25)
     * @param {IdeaApiApiV1IdeasRejectedGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasRejectedGuidPatch(requestParameters: IdeaApiApiV1IdeasRejectedGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasRejectedGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Удаление поставщика у идеи  
     * @summary Удалить поставщика
     * @param {IdeaApiApiV1IdeasRemoveSupplierGuidPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasRemoveSupplierGuidPost(requestParameters: IdeaApiApiV1IdeasRemoveSupplierGuidPostRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasRemoveSupplierGuidPost(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Открыть заявку заново rejected(25) -> new(5), затереть даты и интервалы
     * @summary Открыть заявку заново
     * @param {IdeaApiApiV1IdeasReopenGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasReopenGuidPatch(requestParameters: IdeaApiApiV1IdeasReopenGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasReopenGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с supplierSearch(13) на supplierFound(14)
     * @summary Изменить статус заявки на supplierFound(14)
     * @param {IdeaApiApiV1IdeasSupplierFoundGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasSupplierFoundGuidPatch(requestParameters: IdeaApiApiV1IdeasSupplierFoundGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasSupplierFoundGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с supplierSearch(13) на supplierNotFound(15)
     * @summary Изменить статус заявки на supplierNotFound(15)
     * @param {IdeaApiApiV1IdeasSupplierNotFoundGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasSupplierNotFoundGuidPatch(requestParameters: IdeaApiApiV1IdeasSupplierNotFoundGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasSupplierNotFoundGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус заявки с OnCheck(10) на supplierSearch(13)
     * @summary Изменить статус заявки на supplierSearch(13)
     * @param {IdeaApiApiV1IdeasSupplierSearchGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdeaApi
     */
    public apiV1IdeasSupplierSearchGuidPatch(requestParameters: IdeaApiApiV1IdeasSupplierSearchGuidPatchRequest, options?: any) {
        return IdeaApiFp(this.configuration).apiV1IdeasSupplierSearchGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
