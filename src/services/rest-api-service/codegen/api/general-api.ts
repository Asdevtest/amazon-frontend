/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { ConflictInTheState } from '../models';
// @ts-ignore
import { InlineObject51 } from '../models';
// @ts-ignore
import { InlineResponse20043 } from '../models';
// @ts-ignore
import { InlineResponse20044 } from '../models';
// @ts-ignore
import { InlineResponse2016 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # Получить данные по определенной таблице по определенной колонке## Фильтрация для сабов присутствует
         * @summary Получить данные по определенной таблице по определенной колонке
         * @param {'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users'} table Таблица
         * @param {string} column Колонка
         * @param {string} endpoint 
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralDataFiltersGet: async (table: 'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users', column: string, endpoint: string, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'table' is not null or undefined
            assertParamExists('apiV1GeneralDataFiltersGet', 'table', table)
            // verify required parameter 'column' is not null or undefined
            assertParamExists('apiV1GeneralDataFiltersGet', 'column', column)
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('apiV1GeneralDataFiltersGet', 'endpoint', endpoint)
            const localVarPath = `/api/v1/general/data_filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (table !== undefined) {
                localVarQueryParameter['table'] = table;
            }

            if (column !== undefined) {
                localVarQueryParameter['column'] = column;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Получить теги
         * @summary Получить теги (DEPRECATED)
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralTagsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/general/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Получить теги с пагинацией
         * @summary Получить теги с пагинацией
         * @param {string} [filters]                Возможные поля: asin:, amazonTitle, skuByClient, orderHumanFriendlyId, trackNumberText, orderItem, humanFriendlyId               Поиск для полей продукта идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Продукт               Поиск для полей заказа идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Заказ               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralTagsPagGet: async (filters?: string, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/general/tags/pag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sortType'] = sortType;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Создать тег
         * @summary Создать тег
         * @param {InlineObject51} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralTagsPost: async (body?: InlineObject51, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/general/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * # Получить данные по определенной таблице по определенной колонке## Фильтрация для сабов присутствует
         * @summary Получить данные по определенной таблице по определенной колонке
         * @param {'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users'} table Таблица
         * @param {string} column Колонка
         * @param {string} endpoint 
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GeneralDataFiltersGet(table: 'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users', column: string, endpoint: string, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GeneralDataFiltersGet(table, column, endpoint, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * # Получить теги
         * @summary Получить теги (DEPRECATED)
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GeneralTagsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20043>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GeneralTagsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * # Получить теги с пагинацией
         * @summary Получить теги с пагинацией
         * @param {string} [filters]                Возможные поля: asin:, amazonTitle, skuByClient, orderHumanFriendlyId, trackNumberText, orderItem, humanFriendlyId               Поиск для полей продукта идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Продукт               Поиск для полей заказа идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Заказ               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GeneralTagsPagGet(filters?: string, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20044>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GeneralTagsPagGet(filters, limit, offset, sortField, sortType, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * # Создать тег
         * @summary Создать тег
         * @param {InlineObject51} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GeneralTagsPost(body?: InlineObject51, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GeneralTagsPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * # Получить данные по определенной таблице по определенной колонке## Фильтрация для сабов присутствует
         * @summary Получить данные по определенной таблице по определенной колонке
         * @param {'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users'} table Таблица
         * @param {string} column Колонка
         * @param {string} endpoint 
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralDataFiltersGet(table: 'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users', column: string, endpoint: string, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.apiV1GeneralDataFiltersGet(table, column, endpoint, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * # Получить теги
         * @summary Получить теги (DEPRECATED)
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralTagsGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20043>> {
            return localVarFp.apiV1GeneralTagsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * # Получить теги с пагинацией
         * @summary Получить теги с пагинацией
         * @param {string} [filters]                Возможные поля: asin:, amazonTitle, skuByClient, orderHumanFriendlyId, trackNumberText, orderItem, humanFriendlyId               Поиск для полей продукта идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Продукт               Поиск для полей заказа идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Заказ               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralTagsPagGet(filters?: string, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20044> {
            return localVarFp.apiV1GeneralTagsPagGet(filters, limit, offset, sortField, sortType, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * # Создать тег
         * @summary Создать тег
         * @param {InlineObject51} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GeneralTagsPost(body?: InlineObject51, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2016> {
            return localVarFp.apiV1GeneralTagsPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1GeneralDataFiltersGet operation in GeneralApi.
 * @export
 * @interface GeneralApiApiV1GeneralDataFiltersGetRequest
 */
export interface GeneralApiApiV1GeneralDataFiltersGetRequest {
    /**
     * Таблица
     * @type {'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users'}
     * @memberof GeneralApiApiV1GeneralDataFiltersGet
     */
    readonly table: 'boxes' | 'announcements' | 'orders' | 'products' | 'batches' | 'tasks' | 'requests' | 'proposals' | 'suppliers' | 'ideas' | 'inventoryReturns' | 'inventory' | 'inventoryShipments' | 'ppcSalesWeeks' | 'ppcSalesDays' | 'sellerboardWarehouseEveryDay' | 'sellerboardLast30Days' | 'payments' | 'storekeepers' | 'user_notifications' | 'productListingReports' | 'users'

    /**
     * Колонка
     * @type {string}
     * @memberof GeneralApiApiV1GeneralDataFiltersGet
     */
    readonly column: string

    /**
     * 
     * @type {string}
     * @memberof GeneralApiApiV1GeneralDataFiltersGet
     */
    readonly endpoint: string

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof GeneralApiApiV1GeneralDataFiltersGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof GeneralApiApiV1GeneralDataFiltersGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1GeneralTagsGet operation in GeneralApi.
 * @export
 * @interface GeneralApiApiV1GeneralTagsGetRequest
 */
export interface GeneralApiApiV1GeneralTagsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GeneralApiApiV1GeneralTagsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1GeneralTagsPagGet operation in GeneralApi.
 * @export
 * @interface GeneralApiApiV1GeneralTagsPagGetRequest
 */
export interface GeneralApiApiV1GeneralTagsPagGetRequest {
    /**
     *                Возможные поля: asin:, amazonTitle, skuByClient, orderHumanFriendlyId, trackNumberText, orderItem, humanFriendlyId               Поиск для полей продукта идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Продукт               Поиск для полей заказа идет через схему Задача -&gt; Коробка -&gt; Айтем коробки -&gt; Заказ               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
     * @type {string}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly filters?: string

    /**
     * Лимит записей для пагинации
     * @type {number}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly limit?: number

    /**
     * Смещение для пагинации
     * @type {number}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly offset?: number

    /**
     * Название поля
     * @type {string}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly sortField?: string

    /**
     * Тип сортировки
     * @type {'ASC' | 'DESC'}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly sortType?: 'ASC' | 'DESC'

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof GeneralApiApiV1GeneralTagsPagGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1GeneralTagsPost operation in GeneralApi.
 * @export
 * @interface GeneralApiApiV1GeneralTagsPostRequest
 */
export interface GeneralApiApiV1GeneralTagsPostRequest {
    /**
     * 
     * @type {InlineObject51}
     * @memberof GeneralApiApiV1GeneralTagsPost
     */
    readonly body?: InlineObject51

    /**
     * 
     * @type {string}
     * @memberof GeneralApiApiV1GeneralTagsPost
     */
    readonly acceptEncoding?: string
}

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * # Получить данные по определенной таблице по определенной колонке## Фильтрация для сабов присутствует
     * @summary Получить данные по определенной таблице по определенной колонке
     * @param {GeneralApiApiV1GeneralDataFiltersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public apiV1GeneralDataFiltersGet(requestParameters: GeneralApiApiV1GeneralDataFiltersGetRequest, options?: any) {
        return GeneralApiFp(this.configuration).apiV1GeneralDataFiltersGet(requestParameters.table, requestParameters.column, requestParameters.endpoint, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Получить теги
     * @summary Получить теги (DEPRECATED)
     * @param {GeneralApiApiV1GeneralTagsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public apiV1GeneralTagsGet(requestParameters: GeneralApiApiV1GeneralTagsGetRequest = {}, options?: any) {
        return GeneralApiFp(this.configuration).apiV1GeneralTagsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Получить теги с пагинацией
     * @summary Получить теги с пагинацией
     * @param {GeneralApiApiV1GeneralTagsPagGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public apiV1GeneralTagsPagGet(requestParameters: GeneralApiApiV1GeneralTagsPagGetRequest = {}, options?: any) {
        return GeneralApiFp(this.configuration).apiV1GeneralTagsPagGet(requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.sortField, requestParameters.sortType, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Создать тег
     * @summary Создать тег
     * @param {GeneralApiApiV1GeneralTagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public apiV1GeneralTagsPost(requestParameters: GeneralApiApiV1GeneralTagsPostRequest = {}, options?: any) {
        return GeneralApiFp(this.configuration).apiV1GeneralTagsPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
