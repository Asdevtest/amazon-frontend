/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { InlineResponse20049 } from '../models';
// @ts-ignore
import { InlineResponse20050 } from '../models';
// @ts-ignore
import { InlineResponse20051 } from '../models';
// @ts-ignore
import { InlineResponse20052 } from '../models';
// @ts-ignore
import { InlineResponse20053 } from '../models';
// @ts-ignore
import { InlineResponse20054 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardBuyerCountsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/buyer/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardClientCountsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/client/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFreelancerCountsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/freelancer/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardResearcherCountsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/researcher/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardStorekeeperCountsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/storekeeper/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardSupervisorCountsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dashboard/supervisor/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardBuyerCountsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20050>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardBuyerCountsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardClientCountsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20049>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardClientCountsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardFreelancerCountsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20053>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardFreelancerCountsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardResearcherCountsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20052>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardResearcherCountsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardStorekeeperCountsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20051>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardStorekeeperCountsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DashboardSupervisorCountsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20054>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DashboardSupervisorCountsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardBuyerCountsGet(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20050> {
            return localVarFp.apiV1DashboardBuyerCountsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardClientCountsGet(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20049> {
            return localVarFp.apiV1DashboardClientCountsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardFreelancerCountsGet(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20053> {
            return localVarFp.apiV1DashboardFreelancerCountsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardResearcherCountsGet(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20052> {
            return localVarFp.apiV1DashboardResearcherCountsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardStorekeeperCountsGet(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20051> {
            return localVarFp.apiV1DashboardStorekeeperCountsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
         * @summary # Получить количество основных элементов в бд.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DashboardSupervisorCountsGet(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20054> {
            return localVarFp.apiV1DashboardSupervisorCountsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1DashboardBuyerCountsGet operation in DashboardApi.
 * @export
 * @interface DashboardApiApiV1DashboardBuyerCountsGetRequest
 */
export interface DashboardApiApiV1DashboardBuyerCountsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardApiApiV1DashboardBuyerCountsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1DashboardClientCountsGet operation in DashboardApi.
 * @export
 * @interface DashboardApiApiV1DashboardClientCountsGetRequest
 */
export interface DashboardApiApiV1DashboardClientCountsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardApiApiV1DashboardClientCountsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1DashboardFreelancerCountsGet operation in DashboardApi.
 * @export
 * @interface DashboardApiApiV1DashboardFreelancerCountsGetRequest
 */
export interface DashboardApiApiV1DashboardFreelancerCountsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardApiApiV1DashboardFreelancerCountsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1DashboardResearcherCountsGet operation in DashboardApi.
 * @export
 * @interface DashboardApiApiV1DashboardResearcherCountsGetRequest
 */
export interface DashboardApiApiV1DashboardResearcherCountsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardApiApiV1DashboardResearcherCountsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1DashboardStorekeeperCountsGet operation in DashboardApi.
 * @export
 * @interface DashboardApiApiV1DashboardStorekeeperCountsGetRequest
 */
export interface DashboardApiApiV1DashboardStorekeeperCountsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardApiApiV1DashboardStorekeeperCountsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1DashboardSupervisorCountsGet operation in DashboardApi.
 * @export
 * @interface DashboardApiApiV1DashboardSupervisorCountsGetRequest
 */
export interface DashboardApiApiV1DashboardSupervisorCountsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardApiApiV1DashboardSupervisorCountsGet
     */
    readonly acceptEncoding?: string
}

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
     * @summary # Получить количество основных элементов в бд.
     * @param {DashboardApiApiV1DashboardBuyerCountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardBuyerCountsGet(requestParameters: DashboardApiApiV1DashboardBuyerCountsGetRequest = {}, options?: any) {
        return DashboardApiFp(this.configuration).apiV1DashboardBuyerCountsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
     * @summary # Получить количество основных элементов в бд.
     * @param {DashboardApiApiV1DashboardClientCountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardClientCountsGet(requestParameters: DashboardApiApiV1DashboardClientCountsGetRequest = {}, options?: any) {
        return DashboardApiFp(this.configuration).apiV1DashboardClientCountsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
     * @summary # Получить количество основных элементов в бд.
     * @param {DashboardApiApiV1DashboardFreelancerCountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardFreelancerCountsGet(requestParameters: DashboardApiApiV1DashboardFreelancerCountsGetRequest = {}, options?: any) {
        return DashboardApiFp(this.configuration).apiV1DashboardFreelancerCountsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
     * @summary # Получить количество основных элементов в бд.
     * @param {DashboardApiApiV1DashboardResearcherCountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardResearcherCountsGet(requestParameters: DashboardApiApiV1DashboardResearcherCountsGetRequest = {}, options?: any) {
        return DashboardApiFp(this.configuration).apiV1DashboardResearcherCountsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
     * @summary # Получить количество основных элементов в бд.
     * @param {DashboardApiApiV1DashboardStorekeeperCountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardStorekeeperCountsGet(requestParameters: DashboardApiApiV1DashboardStorekeeperCountsGetRequest = {}, options?: any) {
        return DashboardApiFp(this.configuration).apiV1DashboardStorekeeperCountsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить количество заказов, магазинов, заявок, товаров, партий и коробок.  
     * @summary # Получить количество основных элементов в бд.
     * @param {DashboardApiApiV1DashboardSupervisorCountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public apiV1DashboardSupervisorCountsGet(requestParameters: DashboardApiApiV1DashboardSupervisorCountsGetRequest = {}, options?: any) {
        return DashboardApiFp(this.configuration).apiV1DashboardSupervisorCountsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
