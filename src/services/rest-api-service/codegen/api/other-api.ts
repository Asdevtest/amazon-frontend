/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { InlineObject2 } from '../models';
// @ts-ignore
import { InlineObject73 } from '../models';
// @ts-ignore
import { InlineObject74 } from '../models';
// @ts-ignore
import { InlineObject75 } from '../models';
// @ts-ignore
import { InlineResponse2005 } from '../models';
// @ts-ignore
import { InlineResponse20064 } from '../models';
// @ts-ignore
import { InlineResponse20065 } from '../models';
// @ts-ignore
import { InlineResponse20066 } from '../models';
// @ts-ignore
import { InlineResponse2017 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * OtherApi - axios parameter creator
 * @export
 */
export const OtherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Удаление массива из списка асинов на проверку
         * @summary # Удаление массива из списка асинов на проверку
         * @param {Array<string>} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsDelete: async (body?: Array<string>, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/check_asins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получение списка асинов на проверку
         * @summary # Получение списка асинов на проверку
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/check_asins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Удаление из списка асинов на проверку
         * @summary # Удаление из списка асинов на проверку
         * @param {string} guid 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsGuidDelete: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OtherCheckAsinsGuidDelete', 'guid', guid)
            const localVarPath = `/api/v1/other/check_asins/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменение асина на проверку из списка
         * @summary # Изменение асина на проверку из списка
         * @param {string} guid 
         * @param {InlineObject74} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsGuidPatch: async (guid: string, body?: InlineObject74, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OtherCheckAsinsGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/other/check_asins/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Заполнение списка асинов на проверку
         * @summary # Заполнение списка асинов на проверку
         * @param {Array<InlineObject2>} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsPost: async (body?: Array<InlineObject2>, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/check_asins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Отправка отзыва/репорта
         * @summary # Отправить отзыв
         * @param {InlineObject75} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherFeedbackPost: async (body?: InlineObject75, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить доступные филды для пресетов.  
         * @summary # Получить доступные филды для пресетов.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherFieldsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить изображение.   
         * @summary # Получить изображение.
         * @param {string} guid guid файла
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherImgGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OtherImgGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/other/img/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.  Админ видит все операции
         * @summary # Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.
         * @param {string} guid guid товара по которому нужны оплаты.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsByProductGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OtherPaymentsByProductGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/other/payments/by_product/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить все оплаты, которые были начислены пользователю с указанным гуидом.  
         * @summary # Получить все оплаты, которые были начислены пользователю с указанным гуидом.
         * @param {string} guid guid пользователя по которому нужны оплаты.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsByUserGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OtherPaymentsByUserGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/other/payments/by_user/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить все оплаты, которые были произведены обратившемся пользователем.  
         * @summary # Получить все оплаты, которые были произведены обратившемся пользователем.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsMyGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/payments/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.  
         * @summary # Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.
         * @param {string} [filters]                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsPagMyGet: async (filters?: string, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/payments/pag/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sortType'] = sortType;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Пример файла: https://docs.google.com/spreadsheets/d/1k9WYc8A3vQZ_JiG9pmNQ7Yij-ESAn2oEG0a-8GETQuc/edit?usp=sharing    ВОЗВРАЩАЕТ МАССИВ ИНДЕКСОВ СТРОК, КОТОРЫЕ БЫЛИ НЕВАЛИДНЫМИ И НЕ БЫЛИ ДОБАВЛЕНЫ
         * @summary # Добавить новых поставщиков через XLSX (Excel) файл
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherSuppliersSuppliersXlsxPost: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/suppliers/suppliers_xlsx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Загрузить аватар.   Данный метод нужен для заливки аватара пользователем, при повторном вызове происходит обновление. Старая картинка затирается новой! картинка уменьшается до 300 на 300 точек(без обрезания). после сжиматься.  пример: \"https://amazonapi.fvds.ru/uploads/avatars/{userId}.webp\", где userId это GUID пользователя например, 90aac7d1-5777-4ef3-b29c-212f665a2543 https://amazonapi.fvds.ru/uploads/avatars/90aac7d1-5777-4ef3-b29c-212f665a2543.webp Проверки: Проверка расширений, доступные форматы:  \'jpeg\', \'jpg\', \'png\', \'webp\', \'gif\', \'avif\', \'tiff\' 
         * @summary # Загрузить аватар.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherUploadAvatarPost: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/upload_avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Загрузить изображение ссылке.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\" При сохранении к имени файла добавляется случайно сгенерированный GUID  пример: ссылка на файл https://www.amazon.com/Oculus.jpeg Доступные форматы: jpeg, jpg, png, webp, gif, avif, tiff, pdf новое имя файла на сервере 318b1f4d-ae7a-443e-8258-f8ed05237812.Oculus.jpeg
         * @summary # Загрузить изображение по ссылке.
         * @param {InlineObject73} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherUploadFileByUrlPost: async (body?: InlineObject73, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/upload_file_by_url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Загрузить изображение.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\"
         * @summary # Загрузить изображение.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherUploadFilePost: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/other/upload_file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtherApi - functional programming interface
 * @export
 */
export const OtherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtherApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Удаление массива из списка асинов на проверку
         * @summary # Удаление массива из списка асинов на проверку
         * @param {Array<string>} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherCheckAsinsDelete(body?: Array<string>, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherCheckAsinsDelete(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получение списка асинов на проверку
         * @summary # Получение списка асинов на проверку
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherCheckAsinsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherCheckAsinsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Удаление из списка асинов на проверку
         * @summary # Удаление из списка асинов на проверку
         * @param {string} guid 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherCheckAsinsGuidDelete(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherCheckAsinsGuidDelete(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменение асина на проверку из списка
         * @summary # Изменение асина на проверку из списка
         * @param {string} guid 
         * @param {InlineObject74} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherCheckAsinsGuidPatch(guid: string, body?: InlineObject74, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherCheckAsinsGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Заполнение списка асинов на проверку
         * @summary # Заполнение списка асинов на проверку
         * @param {Array<InlineObject2>} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherCheckAsinsPost(body?: Array<InlineObject2>, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20066>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherCheckAsinsPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Отправка отзыва/репорта
         * @summary # Отправить отзыв
         * @param {InlineObject75} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherFeedbackPost(body?: InlineObject75, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherFeedbackPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить доступные филды для пресетов.  
         * @summary # Получить доступные филды для пресетов.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherFieldsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20065>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherFieldsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить изображение.   
         * @summary # Получить изображение.
         * @param {string} guid guid файла
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherImgGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherImgGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.  Админ видит все операции
         * @summary # Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.
         * @param {string} guid guid товара по которому нужны оплаты.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherPaymentsByProductGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2005>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherPaymentsByProductGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить все оплаты, которые были начислены пользователю с указанным гуидом.  
         * @summary # Получить все оплаты, которые были начислены пользователю с указанным гуидом.
         * @param {string} guid guid пользователя по которому нужны оплаты.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherPaymentsByUserGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2005>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherPaymentsByUserGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить все оплаты, которые были произведены обратившемся пользователем.  
         * @summary # Получить все оплаты, которые были произведены обратившемся пользователем.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherPaymentsMyGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2005>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherPaymentsMyGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.  
         * @summary # Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.
         * @param {string} [filters]                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherPaymentsPagMyGet(filters?: string, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20064>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherPaymentsPagMyGet(filters, limit, offset, sortField, sortType, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Пример файла: https://docs.google.com/spreadsheets/d/1k9WYc8A3vQZ_JiG9pmNQ7Yij-ESAn2oEG0a-8GETQuc/edit?usp=sharing    ВОЗВРАЩАЕТ МАССИВ ИНДЕКСОВ СТРОК, КОТОРЫЕ БЫЛИ НЕВАЛИДНЫМИ И НЕ БЫЛИ ДОБАВЛЕНЫ
         * @summary # Добавить новых поставщиков через XLSX (Excel) файл
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherSuppliersSuppliersXlsxPost(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherSuppliersSuppliersXlsxPost(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Загрузить аватар.   Данный метод нужен для заливки аватара пользователем, при повторном вызове происходит обновление. Старая картинка затирается новой! картинка уменьшается до 300 на 300 точек(без обрезания). после сжиматься.  пример: \"https://amazonapi.fvds.ru/uploads/avatars/{userId}.webp\", где userId это GUID пользователя например, 90aac7d1-5777-4ef3-b29c-212f665a2543 https://amazonapi.fvds.ru/uploads/avatars/90aac7d1-5777-4ef3-b29c-212f665a2543.webp Проверки: Проверка расширений, доступные форматы:  \'jpeg\', \'jpg\', \'png\', \'webp\', \'gif\', \'avif\', \'tiff\' 
         * @summary # Загрузить аватар.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherUploadAvatarPost(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherUploadAvatarPost(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Загрузить изображение ссылке.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\" При сохранении к имени файла добавляется случайно сгенерированный GUID  пример: ссылка на файл https://www.amazon.com/Oculus.jpeg Доступные форматы: jpeg, jpg, png, webp, gif, avif, tiff, pdf новое имя файла на сервере 318b1f4d-ae7a-443e-8258-f8ed05237812.Oculus.jpeg
         * @summary # Загрузить изображение по ссылке.
         * @param {InlineObject73} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherUploadFileByUrlPost(body?: InlineObject73, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherUploadFileByUrlPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Загрузить изображение.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\"
         * @summary # Загрузить изображение.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OtherUploadFilePost(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OtherUploadFilePost(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OtherApi - factory interface
 * @export
 */
export const OtherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtherApiFp(configuration)
    return {
        /**
         * ## Удаление массива из списка асинов на проверку
         * @summary # Удаление массива из списка асинов на проверку
         * @param {Array<string>} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsDelete(body?: Array<string>, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OtherCheckAsinsDelete(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получение списка асинов на проверку
         * @summary # Получение списка асинов на проверку
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.apiV1OtherCheckAsinsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Удаление из списка асинов на проверку
         * @summary # Удаление из списка асинов на проверку
         * @param {string} guid 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsGuidDelete(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OtherCheckAsinsGuidDelete(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменение асина на проверку из списка
         * @summary # Изменение асина на проверку из списка
         * @param {string} guid 
         * @param {InlineObject74} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsGuidPatch(guid: string, body?: InlineObject74, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OtherCheckAsinsGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Заполнение списка асинов на проверку
         * @summary # Заполнение списка асинов на проверку
         * @param {Array<InlineObject2>} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherCheckAsinsPost(body?: Array<InlineObject2>, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20066> {
            return localVarFp.apiV1OtherCheckAsinsPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Отправка отзыва/репорта
         * @summary # Отправить отзыв
         * @param {InlineObject75} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherFeedbackPost(body?: InlineObject75, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OtherFeedbackPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить доступные филды для пресетов.  
         * @summary # Получить доступные филды для пресетов.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherFieldsGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20065>> {
            return localVarFp.apiV1OtherFieldsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить изображение.   
         * @summary # Получить изображение.
         * @param {string} guid guid файла
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherImgGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1OtherImgGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.  Админ видит все операции
         * @summary # Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.
         * @param {string} guid guid товара по которому нужны оплаты.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsByProductGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse2005>> {
            return localVarFp.apiV1OtherPaymentsByProductGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить все оплаты, которые были начислены пользователю с указанным гуидом.  
         * @summary # Получить все оплаты, которые были начислены пользователю с указанным гуидом.
         * @param {string} guid guid пользователя по которому нужны оплаты.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsByUserGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse2005>> {
            return localVarFp.apiV1OtherPaymentsByUserGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить все оплаты, которые были произведены обратившемся пользователем.  
         * @summary # Получить все оплаты, которые были произведены обратившемся пользователем.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsMyGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse2005>> {
            return localVarFp.apiV1OtherPaymentsMyGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.  
         * @summary # Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.
         * @param {string} [filters]                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherPaymentsPagMyGet(filters?: string, limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20064> {
            return localVarFp.apiV1OtherPaymentsPagMyGet(filters, limit, offset, sortField, sortType, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Пример файла: https://docs.google.com/spreadsheets/d/1k9WYc8A3vQZ_JiG9pmNQ7Yij-ESAn2oEG0a-8GETQuc/edit?usp=sharing    ВОЗВРАЩАЕТ МАССИВ ИНДЕКСОВ СТРОК, КОТОРЫЕ БЫЛИ НЕВАЛИДНЫМИ И НЕ БЫЛИ ДОБАВЛЕНЫ
         * @summary # Добавить новых поставщиков через XLSX (Excel) файл
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherSuppliersSuppliersXlsxPost(acceptEncoding?: string, options?: any): AxiosPromise<any> {
            return localVarFp.apiV1OtherSuppliersSuppliersXlsxPost(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Загрузить аватар.   Данный метод нужен для заливки аватара пользователем, при повторном вызове происходит обновление. Старая картинка затирается новой! картинка уменьшается до 300 на 300 точек(без обрезания). после сжиматься.  пример: \"https://amazonapi.fvds.ru/uploads/avatars/{userId}.webp\", где userId это GUID пользователя например, 90aac7d1-5777-4ef3-b29c-212f665a2543 https://amazonapi.fvds.ru/uploads/avatars/90aac7d1-5777-4ef3-b29c-212f665a2543.webp Проверки: Проверка расширений, доступные форматы:  \'jpeg\', \'jpg\', \'png\', \'webp\', \'gif\', \'avif\', \'tiff\' 
         * @summary # Загрузить аватар.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherUploadAvatarPost(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.apiV1OtherUploadAvatarPost(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Загрузить изображение ссылке.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\" При сохранении к имени файла добавляется случайно сгенерированный GUID  пример: ссылка на файл https://www.amazon.com/Oculus.jpeg Доступные форматы: jpeg, jpg, png, webp, gif, avif, tiff, pdf новое имя файла на сервере 318b1f4d-ae7a-443e-8258-f8ed05237812.Oculus.jpeg
         * @summary # Загрузить изображение по ссылке.
         * @param {InlineObject73} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherUploadFileByUrlPost(body?: InlineObject73, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.apiV1OtherUploadFileByUrlPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Загрузить изображение.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\"
         * @summary # Загрузить изображение.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OtherUploadFilePost(acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.apiV1OtherUploadFilePost(acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1OtherCheckAsinsDelete operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherCheckAsinsDeleteRequest
 */
export interface OtherApiApiV1OtherCheckAsinsDeleteRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof OtherApiApiV1OtherCheckAsinsDelete
     */
    readonly body?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherCheckAsinsGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherCheckAsinsGetRequest
 */
export interface OtherApiApiV1OtherCheckAsinsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherCheckAsinsGuidDelete operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherCheckAsinsGuidDeleteRequest
 */
export interface OtherApiApiV1OtherCheckAsinsGuidDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsGuidDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherCheckAsinsGuidPatch operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherCheckAsinsGuidPatchRequest
 */
export interface OtherApiApiV1OtherCheckAsinsGuidPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject74}
     * @memberof OtherApiApiV1OtherCheckAsinsGuidPatch
     */
    readonly body?: InlineObject74

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherCheckAsinsPost operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherCheckAsinsPostRequest
 */
export interface OtherApiApiV1OtherCheckAsinsPostRequest {
    /**
     * 
     * @type {Array<InlineObject2>}
     * @memberof OtherApiApiV1OtherCheckAsinsPost
     */
    readonly body?: Array<InlineObject2>

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherCheckAsinsPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherFeedbackPost operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherFeedbackPostRequest
 */
export interface OtherApiApiV1OtherFeedbackPostRequest {
    /**
     * 
     * @type {InlineObject75}
     * @memberof OtherApiApiV1OtherFeedbackPost
     */
    readonly body?: InlineObject75

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherFeedbackPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherFieldsGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherFieldsGetRequest
 */
export interface OtherApiApiV1OtherFieldsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherFieldsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherImgGuidGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherImgGuidGetRequest
 */
export interface OtherApiApiV1OtherImgGuidGetRequest {
    /**
     * guid файла
     * @type {string}
     * @memberof OtherApiApiV1OtherImgGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherImgGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherPaymentsByProductGuidGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherPaymentsByProductGuidGetRequest
 */
export interface OtherApiApiV1OtherPaymentsByProductGuidGetRequest {
    /**
     * guid товара по которому нужны оплаты.
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsByProductGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsByProductGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherPaymentsByUserGuidGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherPaymentsByUserGuidGetRequest
 */
export interface OtherApiApiV1OtherPaymentsByUserGuidGetRequest {
    /**
     * guid пользователя по которому нужны оплаты.
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsByUserGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsByUserGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherPaymentsMyGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherPaymentsMyGetRequest
 */
export interface OtherApiApiV1OtherPaymentsMyGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsMyGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherPaymentsPagMyGet operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherPaymentsPagMyGetRequest
 */
export interface OtherApiApiV1OtherPaymentsPagMyGetRequest {
    /**
     *                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly filters?: string

    /**
     * Лимит записей для пагинации
     * @type {number}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly limit?: number

    /**
     * Смещение для пагинации
     * @type {number}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly offset?: number

    /**
     * Название поля
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly sortField?: string

    /**
     * Тип сортировки
     * @type {'ASC' | 'DESC'}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly sortType?: 'ASC' | 'DESC'

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherPaymentsPagMyGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherSuppliersSuppliersXlsxPost operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherSuppliersSuppliersXlsxPostRequest
 */
export interface OtherApiApiV1OtherSuppliersSuppliersXlsxPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherSuppliersSuppliersXlsxPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherUploadAvatarPost operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherUploadAvatarPostRequest
 */
export interface OtherApiApiV1OtherUploadAvatarPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherUploadAvatarPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherUploadFileByUrlPost operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherUploadFileByUrlPostRequest
 */
export interface OtherApiApiV1OtherUploadFileByUrlPostRequest {
    /**
     * 
     * @type {InlineObject73}
     * @memberof OtherApiApiV1OtherUploadFileByUrlPost
     */
    readonly body?: InlineObject73

    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherUploadFileByUrlPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OtherUploadFilePost operation in OtherApi.
 * @export
 * @interface OtherApiApiV1OtherUploadFilePostRequest
 */
export interface OtherApiApiV1OtherUploadFilePostRequest {
    /**
     * 
     * @type {string}
     * @memberof OtherApiApiV1OtherUploadFilePost
     */
    readonly acceptEncoding?: string
}

/**
 * OtherApi - object-oriented interface
 * @export
 * @class OtherApi
 * @extends {BaseAPI}
 */
export class OtherApi extends BaseAPI {
    /**
     * ## Удаление массива из списка асинов на проверку
     * @summary # Удаление массива из списка асинов на проверку
     * @param {OtherApiApiV1OtherCheckAsinsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherCheckAsinsDelete(requestParameters: OtherApiApiV1OtherCheckAsinsDeleteRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherCheckAsinsDelete(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получение списка асинов на проверку
     * @summary # Получение списка асинов на проверку
     * @param {OtherApiApiV1OtherCheckAsinsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherCheckAsinsGet(requestParameters: OtherApiApiV1OtherCheckAsinsGetRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherCheckAsinsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Удаление из списка асинов на проверку
     * @summary # Удаление из списка асинов на проверку
     * @param {OtherApiApiV1OtherCheckAsinsGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherCheckAsinsGuidDelete(requestParameters: OtherApiApiV1OtherCheckAsinsGuidDeleteRequest, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherCheckAsinsGuidDelete(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменение асина на проверку из списка
     * @summary # Изменение асина на проверку из списка
     * @param {OtherApiApiV1OtherCheckAsinsGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherCheckAsinsGuidPatch(requestParameters: OtherApiApiV1OtherCheckAsinsGuidPatchRequest, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherCheckAsinsGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Заполнение списка асинов на проверку
     * @summary # Заполнение списка асинов на проверку
     * @param {OtherApiApiV1OtherCheckAsinsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherCheckAsinsPost(requestParameters: OtherApiApiV1OtherCheckAsinsPostRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherCheckAsinsPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Отправка отзыва/репорта
     * @summary # Отправить отзыв
     * @param {OtherApiApiV1OtherFeedbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherFeedbackPost(requestParameters: OtherApiApiV1OtherFeedbackPostRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherFeedbackPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить доступные филды для пресетов.  
     * @summary # Получить доступные филды для пресетов.
     * @param {OtherApiApiV1OtherFieldsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherFieldsGet(requestParameters: OtherApiApiV1OtherFieldsGetRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherFieldsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить изображение.   
     * @summary # Получить изображение.
     * @param {OtherApiApiV1OtherImgGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherImgGuidGet(requestParameters: OtherApiApiV1OtherImgGuidGetRequest, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherImgGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.  Админ видит все операции
     * @summary # Получить все оплаты, которые были начислены в связи с продуктом с указанным гуидом.
     * @param {OtherApiApiV1OtherPaymentsByProductGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherPaymentsByProductGuidGet(requestParameters: OtherApiApiV1OtherPaymentsByProductGuidGetRequest, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherPaymentsByProductGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить все оплаты, которые были начислены пользователю с указанным гуидом.  
     * @summary # Получить все оплаты, которые были начислены пользователю с указанным гуидом.
     * @param {OtherApiApiV1OtherPaymentsByUserGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherPaymentsByUserGuidGet(requestParameters: OtherApiApiV1OtherPaymentsByUserGuidGetRequest, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherPaymentsByUserGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить все оплаты, которые были произведены обратившемся пользователем.  
     * @summary # Получить все оплаты, которые были произведены обратившемся пользователем.
     * @param {OtherApiApiV1OtherPaymentsMyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherPaymentsMyGet(requestParameters: OtherApiApiV1OtherPaymentsMyGetRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherPaymentsMyGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.  
     * @summary # Получить все оплаты, которые были произведены обратившемся пользователем c пагинацией.
     * @param {OtherApiApiV1OtherPaymentsPagMyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherPaymentsPagMyGet(requestParameters: OtherApiApiV1OtherPaymentsPagMyGetRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherPaymentsPagMyGet(requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.sortField, requestParameters.sortType, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Пример файла: https://docs.google.com/spreadsheets/d/1k9WYc8A3vQZ_JiG9pmNQ7Yij-ESAn2oEG0a-8GETQuc/edit?usp=sharing    ВОЗВРАЩАЕТ МАССИВ ИНДЕКСОВ СТРОК, КОТОРЫЕ БЫЛИ НЕВАЛИДНЫМИ И НЕ БЫЛИ ДОБАВЛЕНЫ
     * @summary # Добавить новых поставщиков через XLSX (Excel) файл
     * @param {OtherApiApiV1OtherSuppliersSuppliersXlsxPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherSuppliersSuppliersXlsxPost(requestParameters: OtherApiApiV1OtherSuppliersSuppliersXlsxPostRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherSuppliersSuppliersXlsxPost(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Загрузить аватар.   Данный метод нужен для заливки аватара пользователем, при повторном вызове происходит обновление. Старая картинка затирается новой! картинка уменьшается до 300 на 300 точек(без обрезания). после сжиматься.  пример: \"https://amazonapi.fvds.ru/uploads/avatars/{userId}.webp\", где userId это GUID пользователя например, 90aac7d1-5777-4ef3-b29c-212f665a2543 https://amazonapi.fvds.ru/uploads/avatars/90aac7d1-5777-4ef3-b29c-212f665a2543.webp Проверки: Проверка расширений, доступные форматы:  \'jpeg\', \'jpg\', \'png\', \'webp\', \'gif\', \'avif\', \'tiff\' 
     * @summary # Загрузить аватар.
     * @param {OtherApiApiV1OtherUploadAvatarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherUploadAvatarPost(requestParameters: OtherApiApiV1OtherUploadAvatarPostRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherUploadAvatarPost(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Загрузить изображение ссылке.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\" При сохранении к имени файла добавляется случайно сгенерированный GUID  пример: ссылка на файл https://www.amazon.com/Oculus.jpeg Доступные форматы: jpeg, jpg, png, webp, gif, avif, tiff, pdf новое имя файла на сервере 318b1f4d-ae7a-443e-8258-f8ed05237812.Oculus.jpeg
     * @summary # Загрузить изображение по ссылке.
     * @param {OtherApiApiV1OtherUploadFileByUrlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherUploadFileByUrlPost(requestParameters: OtherApiApiV1OtherUploadFileByUrlPostRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherUploadFileByUrlPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Загрузить изображение.   Если файл картинка, то создается превьюшка, не более 150*150 точек, путь до которой \"fileName\" + \".preview.webp\"
     * @summary # Загрузить изображение.
     * @param {OtherApiApiV1OtherUploadFilePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public apiV1OtherUploadFilePost(requestParameters: OtherApiApiV1OtherUploadFilePostRequest = {}, options?: any) {
        return OtherApiFp(this.configuration).apiV1OtherUploadFilePost(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
