/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { InlineObject56 } from '../models';
// @ts-ignore
import { InlineObject57 } from '../models';
// @ts-ignore
import { InlineObject58 } from '../models';
// @ts-ignore
import { InlineObject59 } from '../models';
// @ts-ignore
import { InlineResponse20051 } from '../models';
// @ts-ignore
import { InlineResponse2016 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * GoLoginApi - axios parameter creator
 * @export
 */
export const GoLoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Создать новый профайл пользователя.  
         * @summary # Создать новый профайл пользователя.
         * @param {InlineObject56} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfilePost: async (body?: InlineObject56, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gologin/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить профайл пользователя.  
         * @summary # Изменить профайл пользователя.
         * @param {string} profileId id профайла который нужно изменить.
         * @param {InlineObject57} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfileProfileIdPatch: async (profileId: string, body?: InlineObject57, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('apiV1GologinProfileProfileIdPatch', 'profileId', profileId)
            const localVarPath = `/api/v1/gologin/profile/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Запустить профайл пользователя.  
         * @summary # Запустить пользователя.
         * @param {InlineObject58} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfileStartPost: async (body?: InlineObject58, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gologin/profile/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Остановить профайл пользователя.  
         * @summary # Остановить профайл пользователя.
         * @param {InlineObject59} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfileStopPost: async (body?: InlineObject59, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gologin/profile/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoLoginApi - functional programming interface
 * @export
 */
export const GoLoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoLoginApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Создать новый профайл пользователя.  
         * @summary # Создать новый профайл пользователя.
         * @param {InlineObject56} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GologinProfilePost(body?: InlineObject56, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20051>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GologinProfilePost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить профайл пользователя.  
         * @summary # Изменить профайл пользователя.
         * @param {string} profileId id профайла который нужно изменить.
         * @param {InlineObject57} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GologinProfileProfileIdPatch(profileId: string, body?: InlineObject57, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GologinProfileProfileIdPatch(profileId, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Запустить профайл пользователя.  
         * @summary # Запустить пользователя.
         * @param {InlineObject58} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GologinProfileStartPost(body?: InlineObject58, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GologinProfileStartPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Остановить профайл пользователя.  
         * @summary # Остановить профайл пользователя.
         * @param {InlineObject59} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GologinProfileStopPost(body?: InlineObject59, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GologinProfileStopPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoLoginApi - factory interface
 * @export
 */
export const GoLoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoLoginApiFp(configuration)
    return {
        /**
         * ## Создать новый профайл пользователя.  
         * @summary # Создать новый профайл пользователя.
         * @param {InlineObject56} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfilePost(body?: InlineObject56, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20051> {
            return localVarFp.apiV1GologinProfilePost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить профайл пользователя.  
         * @summary # Изменить профайл пользователя.
         * @param {string} profileId id профайла который нужно изменить.
         * @param {InlineObject57} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfileProfileIdPatch(profileId: string, body?: InlineObject57, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1GologinProfileProfileIdPatch(profileId, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Запустить профайл пользователя.  
         * @summary # Запустить пользователя.
         * @param {InlineObject58} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfileStartPost(body?: InlineObject58, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse2016> {
            return localVarFp.apiV1GologinProfileStartPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Остановить профайл пользователя.  
         * @summary # Остановить профайл пользователя.
         * @param {InlineObject59} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GologinProfileStopPost(body?: InlineObject59, acceptEncoding?: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiV1GologinProfileStopPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1GologinProfilePost operation in GoLoginApi.
 * @export
 * @interface GoLoginApiApiV1GologinProfilePostRequest
 */
export interface GoLoginApiApiV1GologinProfilePostRequest {
    /**
     * 
     * @type {InlineObject56}
     * @memberof GoLoginApiApiV1GologinProfilePost
     */
    readonly body?: InlineObject56

    /**
     * 
     * @type {string}
     * @memberof GoLoginApiApiV1GologinProfilePost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1GologinProfileProfileIdPatch operation in GoLoginApi.
 * @export
 * @interface GoLoginApiApiV1GologinProfileProfileIdPatchRequest
 */
export interface GoLoginApiApiV1GologinProfileProfileIdPatchRequest {
    /**
     * id профайла который нужно изменить.
     * @type {string}
     * @memberof GoLoginApiApiV1GologinProfileProfileIdPatch
     */
    readonly profileId: string

    /**
     * 
     * @type {InlineObject57}
     * @memberof GoLoginApiApiV1GologinProfileProfileIdPatch
     */
    readonly body?: InlineObject57

    /**
     * 
     * @type {string}
     * @memberof GoLoginApiApiV1GologinProfileProfileIdPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1GologinProfileStartPost operation in GoLoginApi.
 * @export
 * @interface GoLoginApiApiV1GologinProfileStartPostRequest
 */
export interface GoLoginApiApiV1GologinProfileStartPostRequest {
    /**
     * 
     * @type {InlineObject58}
     * @memberof GoLoginApiApiV1GologinProfileStartPost
     */
    readonly body?: InlineObject58

    /**
     * 
     * @type {string}
     * @memberof GoLoginApiApiV1GologinProfileStartPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1GologinProfileStopPost operation in GoLoginApi.
 * @export
 * @interface GoLoginApiApiV1GologinProfileStopPostRequest
 */
export interface GoLoginApiApiV1GologinProfileStopPostRequest {
    /**
     * 
     * @type {InlineObject59}
     * @memberof GoLoginApiApiV1GologinProfileStopPost
     */
    readonly body?: InlineObject59

    /**
     * 
     * @type {string}
     * @memberof GoLoginApiApiV1GologinProfileStopPost
     */
    readonly acceptEncoding?: string
}

/**
 * GoLoginApi - object-oriented interface
 * @export
 * @class GoLoginApi
 * @extends {BaseAPI}
 */
export class GoLoginApi extends BaseAPI {
    /**
     * ## Создать новый профайл пользователя.  
     * @summary # Создать новый профайл пользователя.
     * @param {GoLoginApiApiV1GologinProfilePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoLoginApi
     */
    public apiV1GologinProfilePost(requestParameters: GoLoginApiApiV1GologinProfilePostRequest = {}, options?: any) {
        return GoLoginApiFp(this.configuration).apiV1GologinProfilePost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить профайл пользователя.  
     * @summary # Изменить профайл пользователя.
     * @param {GoLoginApiApiV1GologinProfileProfileIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoLoginApi
     */
    public apiV1GologinProfileProfileIdPatch(requestParameters: GoLoginApiApiV1GologinProfileProfileIdPatchRequest, options?: any) {
        return GoLoginApiFp(this.configuration).apiV1GologinProfileProfileIdPatch(requestParameters.profileId, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Запустить профайл пользователя.  
     * @summary # Запустить пользователя.
     * @param {GoLoginApiApiV1GologinProfileStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoLoginApi
     */
    public apiV1GologinProfileStartPost(requestParameters: GoLoginApiApiV1GologinProfileStartPostRequest = {}, options?: any) {
        return GoLoginApiFp(this.configuration).apiV1GologinProfileStartPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Остановить профайл пользователя.  
     * @summary # Остановить профайл пользователя.
     * @param {GoLoginApiApiV1GologinProfileStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoLoginApi
     */
    public apiV1GologinProfileStopPost(requestParameters: GoLoginApiApiV1GologinProfileStopPostRequest = {}, options?: any) {
        return GoLoginApiFp(this.configuration).apiV1GologinProfileStopPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
