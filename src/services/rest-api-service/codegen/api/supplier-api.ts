/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiV1AdminsGetProductsByStatusSuppliers } from '../models';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { InlineObject141 } from '../models';
// @ts-ignore
import { InlineObject142 } from '../models';
// @ts-ignore
import { InlineObject143 } from '../models';
// @ts-ignore
import { InlineObject144 } from '../models';
// @ts-ignore
import { InlineResponse200106 } from '../models';
// @ts-ignore
import { InlineResponse20114 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * SupplierApi - axios parameter creator
 * @export
 */
export const SupplierApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Получить список поставщиков.   
         * @summary # Получить список поставщиков.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/suppliers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ##  Удалить поставщика.   
         * @summary # Удалить поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGuidDelete: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SuppliersGuidDelete', 'guid', guid)
            const localVarPath = `/api/v1/suppliers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить одного поставщика.   
         * @summary # Получить одного поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SuppliersGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/suppliers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить  поставщика.   Байер может редактировать поставщика только если поставщик используется в карточке товара в котором является байером. 
         * @summary # Изменить поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {InlineObject142} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGuidPatch: async (guid: string, body?: InlineObject142, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SuppliersGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/suppliers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ##  Получить все доступные методы оплаты для поставщика
         * @summary # Получить все доступные методы оплаты для поставщика
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPaymentMethodsGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/suppliers/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить метод оплаты
         * @summary # Изменить метод оплаты
         * @param {string} guid GUID в сущности в БД
         * @param {InlineObject144} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPaymentMethodsGuidPatch: async (guid: string, body?: InlineObject144, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SuppliersPaymentMethodsGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/suppliers/payment_methods/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Добавить метод оплаты
         * @summary # Добавить метод оплаты
         * @param {InlineObject143} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPaymentMethodsPost: async (body?: InlineObject143, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/suppliers/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Добавить нового поставщика.   
         * @summary # Добавить нового поставщика.
         * @param {InlineObject141} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPost: async (body?: InlineObject141, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/suppliers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupplierApi - functional programming interface
 * @export
 */
export const SupplierApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupplierApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Получить список поставщиков.   
         * @summary # Получить список поставщиков.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1AdminsGetProductsByStatusSuppliers>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ##  Удалить поставщика.   
         * @summary # Удалить поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersGuidDelete(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersGuidDelete(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить одного поставщика.   
         * @summary # Получить одного поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdminsGetProductsByStatusSuppliers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить  поставщика.   Байер может редактировать поставщика только если поставщик используется в карточке товара в котором является байером. 
         * @summary # Изменить поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {InlineObject142} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersGuidPatch(guid: string, body?: InlineObject142, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ##  Получить все доступные методы оплаты для поставщика
         * @summary # Получить все доступные методы оплаты для поставщика
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersPaymentMethodsGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse200106>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersPaymentMethodsGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить метод оплаты
         * @summary # Изменить метод оплаты
         * @param {string} guid GUID в сущности в БД
         * @param {InlineObject144} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersPaymentMethodsGuidPatch(guid: string, body?: InlineObject144, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersPaymentMethodsGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Добавить метод оплаты
         * @summary # Добавить метод оплаты
         * @param {InlineObject143} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersPaymentMethodsPost(body?: InlineObject143, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersPaymentMethodsPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Добавить нового поставщика.   
         * @summary # Добавить нового поставщика.
         * @param {InlineObject141} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SuppliersPost(body?: InlineObject141, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20114>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SuppliersPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SupplierApi - factory interface
 * @export
 */
export const SupplierApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupplierApiFp(configuration)
    return {
        /**
         * ## Получить список поставщиков.   
         * @summary # Получить список поставщиков.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<ApiV1AdminsGetProductsByStatusSuppliers>> {
            return localVarFp.apiV1SuppliersGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ##  Удалить поставщика.   
         * @summary # Удалить поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGuidDelete(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1SuppliersGuidDelete(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить одного поставщика.   
         * @summary # Получить одного поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<ApiV1AdminsGetProductsByStatusSuppliers> {
            return localVarFp.apiV1SuppliersGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить  поставщика.   Байер может редактировать поставщика только если поставщик используется в карточке товара в котором является байером. 
         * @summary # Изменить поставщика.
         * @param {string} guid GUID в сущности в БД
         * @param {InlineObject142} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersGuidPatch(guid: string, body?: InlineObject142, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1SuppliersGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ##  Получить все доступные методы оплаты для поставщика
         * @summary # Получить все доступные методы оплаты для поставщика
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPaymentMethodsGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse200106>> {
            return localVarFp.apiV1SuppliersPaymentMethodsGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить метод оплаты
         * @summary # Изменить метод оплаты
         * @param {string} guid GUID в сущности в БД
         * @param {InlineObject144} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPaymentMethodsGuidPatch(guid: string, body?: InlineObject144, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1SuppliersPaymentMethodsGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Добавить метод оплаты
         * @summary # Добавить метод оплаты
         * @param {InlineObject143} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPaymentMethodsPost(body?: InlineObject143, acceptEncoding?: string, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.apiV1SuppliersPaymentMethodsPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Добавить нового поставщика.   
         * @summary # Добавить нового поставщика.
         * @param {InlineObject141} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SuppliersPost(body?: InlineObject141, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20114> {
            return localVarFp.apiV1SuppliersPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1SuppliersGet operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersGetRequest
 */
export interface SupplierApiApiV1SuppliersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersGuidDelete operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersGuidDeleteRequest
 */
export interface SupplierApiApiV1SuppliersGuidDeleteRequest {
    /**
     * GUID в сущности в БД
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGuidDelete
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersGuidGet operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersGuidGetRequest
 */
export interface SupplierApiApiV1SuppliersGuidGetRequest {
    /**
     * GUID в сущности в БД
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersGuidPatch operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersGuidPatchRequest
 */
export interface SupplierApiApiV1SuppliersGuidPatchRequest {
    /**
     * GUID в сущности в БД
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject142}
     * @memberof SupplierApiApiV1SuppliersGuidPatch
     */
    readonly body?: InlineObject142

    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersPaymentMethodsGet operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersPaymentMethodsGetRequest
 */
export interface SupplierApiApiV1SuppliersPaymentMethodsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersPaymentMethodsGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersPaymentMethodsGuidPatch operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersPaymentMethodsGuidPatchRequest
 */
export interface SupplierApiApiV1SuppliersPaymentMethodsGuidPatchRequest {
    /**
     * GUID в сущности в БД
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersPaymentMethodsGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject144}
     * @memberof SupplierApiApiV1SuppliersPaymentMethodsGuidPatch
     */
    readonly body?: InlineObject144

    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersPaymentMethodsGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersPaymentMethodsPost operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersPaymentMethodsPostRequest
 */
export interface SupplierApiApiV1SuppliersPaymentMethodsPostRequest {
    /**
     * 
     * @type {InlineObject143}
     * @memberof SupplierApiApiV1SuppliersPaymentMethodsPost
     */
    readonly body?: InlineObject143

    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersPaymentMethodsPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SuppliersPost operation in SupplierApi.
 * @export
 * @interface SupplierApiApiV1SuppliersPostRequest
 */
export interface SupplierApiApiV1SuppliersPostRequest {
    /**
     * 
     * @type {InlineObject141}
     * @memberof SupplierApiApiV1SuppliersPost
     */
    readonly body?: InlineObject141

    /**
     * 
     * @type {string}
     * @memberof SupplierApiApiV1SuppliersPost
     */
    readonly acceptEncoding?: string
}

/**
 * SupplierApi - object-oriented interface
 * @export
 * @class SupplierApi
 * @extends {BaseAPI}
 */
export class SupplierApi extends BaseAPI {
    /**
     * ## Получить список поставщиков.   
     * @summary # Получить список поставщиков.
     * @param {SupplierApiApiV1SuppliersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersGet(requestParameters: SupplierApiApiV1SuppliersGetRequest = {}, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ##  Удалить поставщика.   
     * @summary # Удалить поставщика.
     * @param {SupplierApiApiV1SuppliersGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersGuidDelete(requestParameters: SupplierApiApiV1SuppliersGuidDeleteRequest, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersGuidDelete(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить одного поставщика.   
     * @summary # Получить одного поставщика.
     * @param {SupplierApiApiV1SuppliersGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersGuidGet(requestParameters: SupplierApiApiV1SuppliersGuidGetRequest, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить  поставщика.   Байер может редактировать поставщика только если поставщик используется в карточке товара в котором является байером. 
     * @summary # Изменить поставщика.
     * @param {SupplierApiApiV1SuppliersGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersGuidPatch(requestParameters: SupplierApiApiV1SuppliersGuidPatchRequest, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ##  Получить все доступные методы оплаты для поставщика
     * @summary # Получить все доступные методы оплаты для поставщика
     * @param {SupplierApiApiV1SuppliersPaymentMethodsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersPaymentMethodsGet(requestParameters: SupplierApiApiV1SuppliersPaymentMethodsGetRequest = {}, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersPaymentMethodsGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить метод оплаты
     * @summary # Изменить метод оплаты
     * @param {SupplierApiApiV1SuppliersPaymentMethodsGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersPaymentMethodsGuidPatch(requestParameters: SupplierApiApiV1SuppliersPaymentMethodsGuidPatchRequest, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersPaymentMethodsGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Добавить метод оплаты
     * @summary # Добавить метод оплаты
     * @param {SupplierApiApiV1SuppliersPaymentMethodsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersPaymentMethodsPost(requestParameters: SupplierApiApiV1SuppliersPaymentMethodsPostRequest = {}, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersPaymentMethodsPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Добавить нового поставщика.   
     * @summary # Добавить нового поставщика.
     * @param {SupplierApiApiV1SuppliersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public apiV1SuppliersPost(requestParameters: SupplierApiApiV1SuppliersPostRequest = {}, options?: any) {
        return SupplierApiFp(this.configuration).apiV1SuppliersPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
