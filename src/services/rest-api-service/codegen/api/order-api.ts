/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { ConflictInTheState } from '../models';
// @ts-ignore
import { InlineObject87 } from '../models';
// @ts-ignore
import { InlineObject88 } from '../models';
// @ts-ignore
import { InlineResponse20071 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
         * @summary # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersCheckPendingOrderByProductGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OrdersCheckPendingOrderByProductGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/orders/check_pending_order_by_product/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменение ордера в статусе pending(2).
         * @summary # Изменение ордера в статусе pending(2).
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {InlineObject88} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersCommentGuidPatch: async (guid: string, body?: InlineObject88, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OrdersCommentGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/orders/comment/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Изменение ордера в статусе pending(2).
         * @summary # Изменение ордера в статусе pending(2).
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {InlineObject87} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersPendingGuidPatch: async (guid: string, body?: InlineObject87, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OrdersPendingGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/orders/pending/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Перевести ордер со статуса pending(2) в статус readyForBuyout(3), только для баера ордера
         * @summary # Перевести ордер со статуса pending(2) в статус readyForBuyout(3)
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersReadyToBuyoutGuidPatch: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1OrdersReadyToBuyoutGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/orders/ready_to_buyout/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
         * @summary # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersCheckPendingOrderByProductGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20071>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersCheckPendingOrderByProductGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Изменение ордера в статусе pending(2).
         * @summary # Изменение ордера в статусе pending(2).
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {InlineObject88} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersCommentGuidPatch(guid: string, body?: InlineObject88, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersCommentGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Изменение ордера в статусе pending(2).
         * @summary # Изменение ордера в статусе pending(2).
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {InlineObject87} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersPendingGuidPatch(guid: string, body?: InlineObject87, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersPendingGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Перевести ордер со статуса pending(2) в статус readyForBuyout(3), только для баера ордера
         * @summary # Перевести ордер со статуса pending(2) в статус readyForBuyout(3)
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersReadyToBuyoutGuidPatch(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersReadyToBuyoutGuidPatch(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
         * @summary # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersCheckPendingOrderByProductGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20071>> {
            return localVarFp.apiV1OrdersCheckPendingOrderByProductGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменение ордера в статусе pending(2).
         * @summary # Изменение ордера в статусе pending(2).
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {InlineObject88} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersCommentGuidPatch(guid: string, body?: InlineObject88, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OrdersCommentGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Изменение ордера в статусе pending(2).
         * @summary # Изменение ордера в статусе pending(2).
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {InlineObject87} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersPendingGuidPatch(guid: string, body?: InlineObject87, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OrdersPendingGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Перевести ордер со статуса pending(2) в статус readyForBuyout(3), только для баера ордера
         * @summary # Перевести ордер со статуса pending(2) в статус readyForBuyout(3)
         * @param {string} guid GUID заказа, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersReadyToBuyoutGuidPatch(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1OrdersReadyToBuyoutGuidPatch(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1OrdersCheckPendingOrderByProductGuidGet operation in OrderApi.
 * @export
 * @interface OrderApiApiV1OrdersCheckPendingOrderByProductGuidGetRequest
 */
export interface OrderApiApiV1OrdersCheckPendingOrderByProductGuidGetRequest {
    /**
     * GUID заказа, который планируем изменить
     * @type {string}
     * @memberof OrderApiApiV1OrdersCheckPendingOrderByProductGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiApiV1OrdersCheckPendingOrderByProductGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OrdersCommentGuidPatch operation in OrderApi.
 * @export
 * @interface OrderApiApiV1OrdersCommentGuidPatchRequest
 */
export interface OrderApiApiV1OrdersCommentGuidPatchRequest {
    /**
     * GUID заказа, который планируем изменить
     * @type {string}
     * @memberof OrderApiApiV1OrdersCommentGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject88}
     * @memberof OrderApiApiV1OrdersCommentGuidPatch
     */
    readonly body?: InlineObject88

    /**
     * 
     * @type {string}
     * @memberof OrderApiApiV1OrdersCommentGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OrdersPendingGuidPatch operation in OrderApi.
 * @export
 * @interface OrderApiApiV1OrdersPendingGuidPatchRequest
 */
export interface OrderApiApiV1OrdersPendingGuidPatchRequest {
    /**
     * GUID заказа, который планируем изменить
     * @type {string}
     * @memberof OrderApiApiV1OrdersPendingGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject87}
     * @memberof OrderApiApiV1OrdersPendingGuidPatch
     */
    readonly body?: InlineObject87

    /**
     * 
     * @type {string}
     * @memberof OrderApiApiV1OrdersPendingGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1OrdersReadyToBuyoutGuidPatch operation in OrderApi.
 * @export
 * @interface OrderApiApiV1OrdersReadyToBuyoutGuidPatchRequest
 */
export interface OrderApiApiV1OrdersReadyToBuyoutGuidPatchRequest {
    /**
     * GUID заказа, который планируем изменить
     * @type {string}
     * @memberof OrderApiApiV1OrdersReadyToBuyoutGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiApiV1OrdersReadyToBuyoutGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
     * @summary # Проверить, существует ли заказ в статусах 0, 2, 3(formed, pending, readyForBuyout) с данным продуктом
     * @param {OrderApiApiV1OrdersCheckPendingOrderByProductGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiV1OrdersCheckPendingOrderByProductGuidGet(requestParameters: OrderApiApiV1OrdersCheckPendingOrderByProductGuidGetRequest, options?: any) {
        return OrderApiFp(this.configuration).apiV1OrdersCheckPendingOrderByProductGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Изменение ордера в статусе pending(2).
     * @summary # Изменение ордера в статусе pending(2).
     * @param {OrderApiApiV1OrdersCommentGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiV1OrdersCommentGuidPatch(requestParameters: OrderApiApiV1OrdersCommentGuidPatchRequest, options?: any) {
        return OrderApiFp(this.configuration).apiV1OrdersCommentGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Изменение ордера в статусе pending(2).
     * @summary # Изменение ордера в статусе pending(2).
     * @param {OrderApiApiV1OrdersPendingGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiV1OrdersPendingGuidPatch(requestParameters: OrderApiApiV1OrdersPendingGuidPatchRequest, options?: any) {
        return OrderApiFp(this.configuration).apiV1OrdersPendingGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Перевести ордер со статуса pending(2) в статус readyForBuyout(3), только для баера ордера
     * @summary # Перевести ордер со статуса pending(2) в статус readyForBuyout(3)
     * @param {OrderApiApiV1OrdersReadyToBuyoutGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiV1OrdersReadyToBuyoutGuidPatch(requestParameters: OrderApiApiV1OrdersReadyToBuyoutGuidPatchRequest, options?: any) {
        return OrderApiFp(this.configuration).apiV1OrdersReadyToBuyoutGuidPatch(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
