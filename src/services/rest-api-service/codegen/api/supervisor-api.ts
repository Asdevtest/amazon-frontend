/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { ConflictInTheState } from '../models';
// @ts-ignore
import { InlineObject138 } from '../models';
// @ts-ignore
import { InlineObject139 } from '../models';
// @ts-ignore
import { InlineResponse200105 } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { InlineResponse20031 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * SupervisorApi - axios parameter creator
 * @export
 */
export const SupervisorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Изменить продукт.  ## 20, 70, 80, 90 - эти статусы запускают процесс заполнения полей для выплат в продуете.    ## 270, 280, 290 - эти статусы запускают процесс авто выплат.   ## одн из таких статусов - больше нельзя так как появилась запись об оплате.     Возможные статусы продукта.      // Товар после заведения в базе ресерчером получает этот статус.      // Ресечер может дополнительно сменить его на статус 30      newProduct: 0,       researcherFoundSupplier: 10,      // Статусы, которые поставит супервайзер по итогам проверки      rejectedBySupervisorAtFistStep: 20, // Если ставит этот статус - должны заплатить супервайзеру.      toBuyerForSearch: 30,      buyerPickedUpProduct: 35,   // Статусы которые поставит байер по результатам своей работы.      buyerFoundSupplier: 40,      supplierWasNotFoundByBuyer:50,      supplierPriceWasNotAcceptable: 60,       // Статус которые проставит супервайзер по результатам второй проверки.      completeSuccess: 70,      // если был поставлен статус 70 то нужно учитывать предыдущий статус товара.      // если переходили с 10->70 оплачиваем ресечеру и супервайзеру.      // если переходили с 40->70 оплачиваем ресечеру, байеру и супервайзеру.      paidByClient: 75,     PLATFORMS_PRODUCT_COPY: 76, // копия товара от платформы, при покупке товара из бесплатно доступных     completeSupplierWasNotFund: 80,     // оплачиваем супервайзеру      completePriceWasNotAcceptable: 90      // оплачиваем только супервайзеру/      noPublished: 100,     PLATFORMS_FREE: 110, // продукт принадлежит платформе и распространяется бесплатно     CREATED_BY_CLIENT: 200, // товар создан клиентом     FROM_CLIENT_TO_BUYER_FOR_RESEARCH: 230, //статус говорит о том что клиент отправил товар на поиск поставщика баеру (устанавливает клиент)     FROM_CLIENT_BUYER_PICKED_PRODUCT: 235, // баер взял в работу товар клиента (устанавливает баер)     FROM_CLIENT_BUYER_FOUND_SUPPLIER: 240, // баер нашел поставщика для товара клиента     FROM_CLIENT_SUPPLIER_WAS_NOT_FOUND_BY_BUYER: 250, // баер не нашел поставщика для товара клиента (устанавливает баер)     FROM_CLIENT_SUPPLIER_PRICE_WAS_NOT_ACCEPTABLE: 260, // цена товара у поставщика не подходит для товара клиента (устанавливает баер)     FROM_CLIENT_COMPLETE_SUCCESS: 270, //  успешно найден поставщик для товара клиента (этот товар не публикуется на бирже товаров, а все так же доступен для просмотра только клиенту который создал товар) (устанавливает супервизор)       FROM_CLIENT_PAID_BY_CLIENT: 275,      FROM_CLIENT_COMPLETE_SUPPLIER_WAS_NOT_FOUND: 280, //  поставщик не найден для товара клиента (устанавливает супервизор)     FROM_CLIENT_COMPLETE_PRICE_WAS_NOT_ACCEPTABLE: 290, // - цена товара у поставщика не подходит для товара клиента (устанавливает супервизор)   
         * @summary # Изменить продукт.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {InlineObject138} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsGuidPatch: async (guid: string, body?: InlineObject138, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SupervisorsProductsGuidPatch', 'guid', guid)
            const localVarPath = `/api/v1/supervisors/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Изменить статус продукта на \'Временно отложен\'.
         * @summary # Изменить статус продукта.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {InlineObject139} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsGuidTemporarilyRejectedPatch: async (guid: string, body?: InlineObject139, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SupervisorsProductsGuidTemporarilyRejectedPatch', 'guid', guid)
            const localVarPath = `/api/v1/supervisors/products/{guid}/temporarily_rejected`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить облегченный список товаров взятых на проверку супервайзером.   
         * @summary # Получить облегченный список товаров взятых на проверку супервайзером.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsLightGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/supervisors/products/light`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список товаров взятых на проверку супервайзером с пагинацией.   
         * @summary # Получить список товаров взятых на проверку супервайзером с пагинацией.
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [filters]                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {string} [statusGroup] \&quot;allProducts\&quot;: [5, 205, 15, 20, 30, 230, 35, 235, 40, 240, 50, 250, 60, 260, 70, 270, 75, 275, 80, 280, 90, 290],     \&quot;rejectedBySupervisor\&quot;: [20],     \&quot;onCheckWithSupervisor\&quot;: [5, 205],     \&quot;atTheBuyerInWork\&quot;: [230, 30, 235, 35],     \&quot;searchComplete\&quot;: [70, 270],     \&quot;supplierWasNotFound\&quot;: [50, 250, 80, 280],     \&quot;supplierPriceDoesNotFit\&quot;: [60, 260, 90, 290],     \&quot;paidByTheClient\&quot;: [275, 75],     \&quot;productIsAppropriate\&quot;: [15],     \&quot;buyerFoundSupplier\&quot;: [240, 40]
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsPagMyGet: async (limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, filters?: string, statusGroup?: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/supervisors/products/pag/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sortType'] = sortType;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (statusGroup !== undefined) {
                localVarQueryParameter['statusGroup'] = statusGroup;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Закрепить продукт за супервайзером. Взять его в работу.  ##  Выставляет у продукта поле checkedby  
         * @summary # Закрепить продукт за супервайзером. Взять его в работу.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsPickupGuidPost: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1SupervisorsProductsPickupGuidPost', 'guid', guid)
            const localVarPath = `/api/v1/supervisors/products/pickup/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Получить список вакантных товаров со статусами 5, 10, 35 или 205, 235, 240 если нужны товары созданные клиентом.   
         * @summary # Получить список вакантных товаров.
         * @param {boolean} [isCreatedByClient] Если true отдает товары созданные клиентом.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsVacGet: async (isCreatedByClient?: boolean, noCache?: boolean, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/supervisors/products/vac`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isCreatedByClient !== undefined) {
                localVarQueryParameter['isCreatedByClient'] = isCreatedByClient;
            }

            if (noCache !== undefined) {
                localVarQueryParameter['noCache'] = noCache;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupervisorApi - functional programming interface
 * @export
 */
export const SupervisorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupervisorApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Изменить продукт.  ## 20, 70, 80, 90 - эти статусы запускают процесс заполнения полей для выплат в продуете.    ## 270, 280, 290 - эти статусы запускают процесс авто выплат.   ## одн из таких статусов - больше нельзя так как появилась запись об оплате.     Возможные статусы продукта.      // Товар после заведения в базе ресерчером получает этот статус.      // Ресечер может дополнительно сменить его на статус 30      newProduct: 0,       researcherFoundSupplier: 10,      // Статусы, которые поставит супервайзер по итогам проверки      rejectedBySupervisorAtFistStep: 20, // Если ставит этот статус - должны заплатить супервайзеру.      toBuyerForSearch: 30,      buyerPickedUpProduct: 35,   // Статусы которые поставит байер по результатам своей работы.      buyerFoundSupplier: 40,      supplierWasNotFoundByBuyer:50,      supplierPriceWasNotAcceptable: 60,       // Статус которые проставит супервайзер по результатам второй проверки.      completeSuccess: 70,      // если был поставлен статус 70 то нужно учитывать предыдущий статус товара.      // если переходили с 10->70 оплачиваем ресечеру и супервайзеру.      // если переходили с 40->70 оплачиваем ресечеру, байеру и супервайзеру.      paidByClient: 75,     PLATFORMS_PRODUCT_COPY: 76, // копия товара от платформы, при покупке товара из бесплатно доступных     completeSupplierWasNotFund: 80,     // оплачиваем супервайзеру      completePriceWasNotAcceptable: 90      // оплачиваем только супервайзеру/      noPublished: 100,     PLATFORMS_FREE: 110, // продукт принадлежит платформе и распространяется бесплатно     CREATED_BY_CLIENT: 200, // товар создан клиентом     FROM_CLIENT_TO_BUYER_FOR_RESEARCH: 230, //статус говорит о том что клиент отправил товар на поиск поставщика баеру (устанавливает клиент)     FROM_CLIENT_BUYER_PICKED_PRODUCT: 235, // баер взял в работу товар клиента (устанавливает баер)     FROM_CLIENT_BUYER_FOUND_SUPPLIER: 240, // баер нашел поставщика для товара клиента     FROM_CLIENT_SUPPLIER_WAS_NOT_FOUND_BY_BUYER: 250, // баер не нашел поставщика для товара клиента (устанавливает баер)     FROM_CLIENT_SUPPLIER_PRICE_WAS_NOT_ACCEPTABLE: 260, // цена товара у поставщика не подходит для товара клиента (устанавливает баер)     FROM_CLIENT_COMPLETE_SUCCESS: 270, //  успешно найден поставщик для товара клиента (этот товар не публикуется на бирже товаров, а все так же доступен для просмотра только клиенту который создал товар) (устанавливает супервизор)       FROM_CLIENT_PAID_BY_CLIENT: 275,      FROM_CLIENT_COMPLETE_SUPPLIER_WAS_NOT_FOUND: 280, //  поставщик не найден для товара клиента (устанавливает супервизор)     FROM_CLIENT_COMPLETE_PRICE_WAS_NOT_ACCEPTABLE: 290, // - цена товара у поставщика не подходит для товара клиента (устанавливает супервизор)   
         * @summary # Изменить продукт.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {InlineObject138} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupervisorsProductsGuidPatch(guid: string, body?: InlineObject138, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupervisorsProductsGuidPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Изменить статус продукта на \'Временно отложен\'.
         * @summary # Изменить статус продукта.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {InlineObject139} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupervisorsProductsGuidTemporarilyRejectedPatch(guid: string, body?: InlineObject139, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupervisorsProductsGuidTemporarilyRejectedPatch(guid, body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить облегченный список товаров взятых на проверку супервайзером.   
         * @summary # Получить облегченный список товаров взятых на проверку супервайзером.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupervisorsProductsLightGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20031>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupervisorsProductsLightGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список товаров взятых на проверку супервайзером с пагинацией.   
         * @summary # Получить список товаров взятых на проверку супервайзером с пагинацией.
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [filters]                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {string} [statusGroup] \&quot;allProducts\&quot;: [5, 205, 15, 20, 30, 230, 35, 235, 40, 240, 50, 250, 60, 260, 70, 270, 75, 275, 80, 280, 90, 290],     \&quot;rejectedBySupervisor\&quot;: [20],     \&quot;onCheckWithSupervisor\&quot;: [5, 205],     \&quot;atTheBuyerInWork\&quot;: [230, 30, 235, 35],     \&quot;searchComplete\&quot;: [70, 270],     \&quot;supplierWasNotFound\&quot;: [50, 250, 80, 280],     \&quot;supplierPriceDoesNotFit\&quot;: [60, 260, 90, 290],     \&quot;paidByTheClient\&quot;: [275, 75],     \&quot;productIsAppropriate\&quot;: [15],     \&quot;buyerFoundSupplier\&quot;: [240, 40]
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupervisorsProductsPagMyGet(limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, filters?: string, statusGroup?: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200105>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupervisorsProductsPagMyGet(limit, offset, sortField, sortType, noCache, filters, statusGroup, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Закрепить продукт за супервайзером. Взять его в работу.  ##  Выставляет у продукта поле checkedby  
         * @summary # Закрепить продукт за супервайзером. Взять его в работу.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupervisorsProductsPickupGuidPost(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupervisorsProductsPickupGuidPost(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Получить список вакантных товаров со статусами 5, 10, 35 или 205, 235, 240 если нужны товары созданные клиентом.   
         * @summary # Получить список вакантных товаров.
         * @param {boolean} [isCreatedByClient] Если true отдает товары созданные клиентом.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SupervisorsProductsVacGet(isCreatedByClient?: boolean, noCache?: boolean, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2002>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SupervisorsProductsVacGet(isCreatedByClient, noCache, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SupervisorApi - factory interface
 * @export
 */
export const SupervisorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupervisorApiFp(configuration)
    return {
        /**
         * ## Изменить продукт.  ## 20, 70, 80, 90 - эти статусы запускают процесс заполнения полей для выплат в продуете.    ## 270, 280, 290 - эти статусы запускают процесс авто выплат.   ## одн из таких статусов - больше нельзя так как появилась запись об оплате.     Возможные статусы продукта.      // Товар после заведения в базе ресерчером получает этот статус.      // Ресечер может дополнительно сменить его на статус 30      newProduct: 0,       researcherFoundSupplier: 10,      // Статусы, которые поставит супервайзер по итогам проверки      rejectedBySupervisorAtFistStep: 20, // Если ставит этот статус - должны заплатить супервайзеру.      toBuyerForSearch: 30,      buyerPickedUpProduct: 35,   // Статусы которые поставит байер по результатам своей работы.      buyerFoundSupplier: 40,      supplierWasNotFoundByBuyer:50,      supplierPriceWasNotAcceptable: 60,       // Статус которые проставит супервайзер по результатам второй проверки.      completeSuccess: 70,      // если был поставлен статус 70 то нужно учитывать предыдущий статус товара.      // если переходили с 10->70 оплачиваем ресечеру и супервайзеру.      // если переходили с 40->70 оплачиваем ресечеру, байеру и супервайзеру.      paidByClient: 75,     PLATFORMS_PRODUCT_COPY: 76, // копия товара от платформы, при покупке товара из бесплатно доступных     completeSupplierWasNotFund: 80,     // оплачиваем супервайзеру      completePriceWasNotAcceptable: 90      // оплачиваем только супервайзеру/      noPublished: 100,     PLATFORMS_FREE: 110, // продукт принадлежит платформе и распространяется бесплатно     CREATED_BY_CLIENT: 200, // товар создан клиентом     FROM_CLIENT_TO_BUYER_FOR_RESEARCH: 230, //статус говорит о том что клиент отправил товар на поиск поставщика баеру (устанавливает клиент)     FROM_CLIENT_BUYER_PICKED_PRODUCT: 235, // баер взял в работу товар клиента (устанавливает баер)     FROM_CLIENT_BUYER_FOUND_SUPPLIER: 240, // баер нашел поставщика для товара клиента     FROM_CLIENT_SUPPLIER_WAS_NOT_FOUND_BY_BUYER: 250, // баер не нашел поставщика для товара клиента (устанавливает баер)     FROM_CLIENT_SUPPLIER_PRICE_WAS_NOT_ACCEPTABLE: 260, // цена товара у поставщика не подходит для товара клиента (устанавливает баер)     FROM_CLIENT_COMPLETE_SUCCESS: 270, //  успешно найден поставщик для товара клиента (этот товар не публикуется на бирже товаров, а все так же доступен для просмотра только клиенту который создал товар) (устанавливает супервизор)       FROM_CLIENT_PAID_BY_CLIENT: 275,      FROM_CLIENT_COMPLETE_SUPPLIER_WAS_NOT_FOUND: 280, //  поставщик не найден для товара клиента (устанавливает супервизор)     FROM_CLIENT_COMPLETE_PRICE_WAS_NOT_ACCEPTABLE: 290, // - цена товара у поставщика не подходит для товара клиента (устанавливает супервизор)   
         * @summary # Изменить продукт.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {InlineObject138} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsGuidPatch(guid: string, body?: InlineObject138, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1SupervisorsProductsGuidPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Изменить статус продукта на \'Временно отложен\'.
         * @summary # Изменить статус продукта.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {InlineObject139} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsGuidTemporarilyRejectedPatch(guid: string, body?: InlineObject139, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1SupervisorsProductsGuidTemporarilyRejectedPatch(guid, body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить облегченный список товаров взятых на проверку супервайзером.   
         * @summary # Получить облегченный список товаров взятых на проверку супервайзером.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsLightGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20031>> {
            return localVarFp.apiV1SupervisorsProductsLightGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список товаров взятых на проверку супервайзером с пагинацией.   
         * @summary # Получить список товаров взятых на проверку супервайзером с пагинацией.
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [sortField] Название поля
         * @param {'ASC' | 'DESC'} [sortType] Тип сортировки
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [filters]                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
         * @param {string} [statusGroup] \&quot;allProducts\&quot;: [5, 205, 15, 20, 30, 230, 35, 235, 40, 240, 50, 250, 60, 260, 70, 270, 75, 275, 80, 280, 90, 290],     \&quot;rejectedBySupervisor\&quot;: [20],     \&quot;onCheckWithSupervisor\&quot;: [5, 205],     \&quot;atTheBuyerInWork\&quot;: [230, 30, 235, 35],     \&quot;searchComplete\&quot;: [70, 270],     \&quot;supplierWasNotFound\&quot;: [50, 250, 80, 280],     \&quot;supplierPriceDoesNotFit\&quot;: [60, 260, 90, 290],     \&quot;paidByTheClient\&quot;: [275, 75],     \&quot;productIsAppropriate\&quot;: [15],     \&quot;buyerFoundSupplier\&quot;: [240, 40]
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsPagMyGet(limit?: number, offset?: number, sortField?: string, sortType?: 'ASC' | 'DESC', noCache?: boolean, filters?: string, statusGroup?: string, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse200105> {
            return localVarFp.apiV1SupervisorsProductsPagMyGet(limit, offset, sortField, sortType, noCache, filters, statusGroup, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Закрепить продукт за супервайзером. Взять его в работу.  ##  Выставляет у продукта поле checkedby  
         * @summary # Закрепить продукт за супервайзером. Взять его в работу.
         * @param {string} guid GUID продукта, который планируем изменить
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsPickupGuidPost(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1SupervisorsProductsPickupGuidPost(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Получить список вакантных товаров со статусами 5, 10, 35 или 205, 235, 240 если нужны товары созданные клиентом.   
         * @summary # Получить список вакантных товаров.
         * @param {boolean} [isCreatedByClient] Если true отдает товары созданные клиентом.
         * @param {boolean} [noCache] Игнорировать данные в кеше
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SupervisorsProductsVacGet(isCreatedByClient?: boolean, noCache?: boolean, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse2002>> {
            return localVarFp.apiV1SupervisorsProductsVacGet(isCreatedByClient, noCache, acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1SupervisorsProductsGuidPatch operation in SupervisorApi.
 * @export
 * @interface SupervisorApiApiV1SupervisorsProductsGuidPatchRequest
 */
export interface SupervisorApiApiV1SupervisorsProductsGuidPatchRequest {
    /**
     * GUID продукта, который планируем изменить
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsGuidPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject138}
     * @memberof SupervisorApiApiV1SupervisorsProductsGuidPatch
     */
    readonly body?: InlineObject138

    /**
     * 
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsGuidPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SupervisorsProductsGuidTemporarilyRejectedPatch operation in SupervisorApi.
 * @export
 * @interface SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatchRequest
 */
export interface SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatchRequest {
    /**
     * GUID продукта, который планируем изменить
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatch
     */
    readonly guid: string

    /**
     * 
     * @type {InlineObject139}
     * @memberof SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatch
     */
    readonly body?: InlineObject139

    /**
     * 
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatch
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SupervisorsProductsLightGet operation in SupervisorApi.
 * @export
 * @interface SupervisorApiApiV1SupervisorsProductsLightGetRequest
 */
export interface SupervisorApiApiV1SupervisorsProductsLightGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsLightGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SupervisorsProductsPagMyGet operation in SupervisorApi.
 * @export
 * @interface SupervisorApiApiV1SupervisorsProductsPagMyGetRequest
 */
export interface SupervisorApiApiV1SupervisorsProductsPagMyGetRequest {
    /**
     * Лимит записей для пагинации
     * @type {number}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly limit?: number

    /**
     * Смещение для пагинации
     * @type {number}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly offset?: number

    /**
     * Название поля
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly sortField?: string

    /**
     * Тип сортировки
     * @type {'ASC' | 'DESC'}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly sortType?: 'ASC' | 'DESC'

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly noCache?: boolean

    /**
     *                Возможные поля - любые поля продукта               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]&#x3D;some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]&#x3D;some_title;or[1][asin][$eq]&#x3D;some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк                 $lt - less than (меньше)                 $gt - greater than (больше)                 $lte - less than or equal to (меньше или равно)                 $gte - greater than or equal to (больше или равно)                 $null - является ли поле NULL                 $notnull - не является ли поле NULL                 $any - значение поля соответствует любому из значений в массиве (Строка с разделителем -&gt; \&#39;,\&#39; example&#x3D;3,5,6,null)             
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly filters?: string

    /**
     * \&quot;allProducts\&quot;: [5, 205, 15, 20, 30, 230, 35, 235, 40, 240, 50, 250, 60, 260, 70, 270, 75, 275, 80, 280, 90, 290],     \&quot;rejectedBySupervisor\&quot;: [20],     \&quot;onCheckWithSupervisor\&quot;: [5, 205],     \&quot;atTheBuyerInWork\&quot;: [230, 30, 235, 35],     \&quot;searchComplete\&quot;: [70, 270],     \&quot;supplierWasNotFound\&quot;: [50, 250, 80, 280],     \&quot;supplierPriceDoesNotFit\&quot;: [60, 260, 90, 290],     \&quot;paidByTheClient\&quot;: [275, 75],     \&quot;productIsAppropriate\&quot;: [15],     \&quot;buyerFoundSupplier\&quot;: [240, 40]
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly statusGroup?: string

    /**
     * 
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsPagMyGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SupervisorsProductsPickupGuidPost operation in SupervisorApi.
 * @export
 * @interface SupervisorApiApiV1SupervisorsProductsPickupGuidPostRequest
 */
export interface SupervisorApiApiV1SupervisorsProductsPickupGuidPostRequest {
    /**
     * GUID продукта, который планируем изменить
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsPickupGuidPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsPickupGuidPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1SupervisorsProductsVacGet operation in SupervisorApi.
 * @export
 * @interface SupervisorApiApiV1SupervisorsProductsVacGetRequest
 */
export interface SupervisorApiApiV1SupervisorsProductsVacGetRequest {
    /**
     * Если true отдает товары созданные клиентом.
     * @type {boolean}
     * @memberof SupervisorApiApiV1SupervisorsProductsVacGet
     */
    readonly isCreatedByClient?: boolean

    /**
     * Игнорировать данные в кеше
     * @type {boolean}
     * @memberof SupervisorApiApiV1SupervisorsProductsVacGet
     */
    readonly noCache?: boolean

    /**
     * 
     * @type {string}
     * @memberof SupervisorApiApiV1SupervisorsProductsVacGet
     */
    readonly acceptEncoding?: string
}

/**
 * SupervisorApi - object-oriented interface
 * @export
 * @class SupervisorApi
 * @extends {BaseAPI}
 */
export class SupervisorApi extends BaseAPI {
    /**
     * ## Изменить продукт.  ## 20, 70, 80, 90 - эти статусы запускают процесс заполнения полей для выплат в продуете.    ## 270, 280, 290 - эти статусы запускают процесс авто выплат.   ## одн из таких статусов - больше нельзя так как появилась запись об оплате.     Возможные статусы продукта.      // Товар после заведения в базе ресерчером получает этот статус.      // Ресечер может дополнительно сменить его на статус 30      newProduct: 0,       researcherFoundSupplier: 10,      // Статусы, которые поставит супервайзер по итогам проверки      rejectedBySupervisorAtFistStep: 20, // Если ставит этот статус - должны заплатить супервайзеру.      toBuyerForSearch: 30,      buyerPickedUpProduct: 35,   // Статусы которые поставит байер по результатам своей работы.      buyerFoundSupplier: 40,      supplierWasNotFoundByBuyer:50,      supplierPriceWasNotAcceptable: 60,       // Статус которые проставит супервайзер по результатам второй проверки.      completeSuccess: 70,      // если был поставлен статус 70 то нужно учитывать предыдущий статус товара.      // если переходили с 10->70 оплачиваем ресечеру и супервайзеру.      // если переходили с 40->70 оплачиваем ресечеру, байеру и супервайзеру.      paidByClient: 75,     PLATFORMS_PRODUCT_COPY: 76, // копия товара от платформы, при покупке товара из бесплатно доступных     completeSupplierWasNotFund: 80,     // оплачиваем супервайзеру      completePriceWasNotAcceptable: 90      // оплачиваем только супервайзеру/      noPublished: 100,     PLATFORMS_FREE: 110, // продукт принадлежит платформе и распространяется бесплатно     CREATED_BY_CLIENT: 200, // товар создан клиентом     FROM_CLIENT_TO_BUYER_FOR_RESEARCH: 230, //статус говорит о том что клиент отправил товар на поиск поставщика баеру (устанавливает клиент)     FROM_CLIENT_BUYER_PICKED_PRODUCT: 235, // баер взял в работу товар клиента (устанавливает баер)     FROM_CLIENT_BUYER_FOUND_SUPPLIER: 240, // баер нашел поставщика для товара клиента     FROM_CLIENT_SUPPLIER_WAS_NOT_FOUND_BY_BUYER: 250, // баер не нашел поставщика для товара клиента (устанавливает баер)     FROM_CLIENT_SUPPLIER_PRICE_WAS_NOT_ACCEPTABLE: 260, // цена товара у поставщика не подходит для товара клиента (устанавливает баер)     FROM_CLIENT_COMPLETE_SUCCESS: 270, //  успешно найден поставщик для товара клиента (этот товар не публикуется на бирже товаров, а все так же доступен для просмотра только клиенту который создал товар) (устанавливает супервизор)       FROM_CLIENT_PAID_BY_CLIENT: 275,      FROM_CLIENT_COMPLETE_SUPPLIER_WAS_NOT_FOUND: 280, //  поставщик не найден для товара клиента (устанавливает супервизор)     FROM_CLIENT_COMPLETE_PRICE_WAS_NOT_ACCEPTABLE: 290, // - цена товара у поставщика не подходит для товара клиента (устанавливает супервизор)   
     * @summary # Изменить продукт.
     * @param {SupervisorApiApiV1SupervisorsProductsGuidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorApi
     */
    public apiV1SupervisorsProductsGuidPatch(requestParameters: SupervisorApiApiV1SupervisorsProductsGuidPatchRequest, options?: any) {
        return SupervisorApiFp(this.configuration).apiV1SupervisorsProductsGuidPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Изменить статус продукта на \'Временно отложен\'.
     * @summary # Изменить статус продукта.
     * @param {SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorApi
     */
    public apiV1SupervisorsProductsGuidTemporarilyRejectedPatch(requestParameters: SupervisorApiApiV1SupervisorsProductsGuidTemporarilyRejectedPatchRequest, options?: any) {
        return SupervisorApiFp(this.configuration).apiV1SupervisorsProductsGuidTemporarilyRejectedPatch(requestParameters.guid, requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить облегченный список товаров взятых на проверку супервайзером.   
     * @summary # Получить облегченный список товаров взятых на проверку супервайзером.
     * @param {SupervisorApiApiV1SupervisorsProductsLightGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorApi
     */
    public apiV1SupervisorsProductsLightGet(requestParameters: SupervisorApiApiV1SupervisorsProductsLightGetRequest = {}, options?: any) {
        return SupervisorApiFp(this.configuration).apiV1SupervisorsProductsLightGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список товаров взятых на проверку супервайзером с пагинацией.   
     * @summary # Получить список товаров взятых на проверку супервайзером с пагинацией.
     * @param {SupervisorApiApiV1SupervisorsProductsPagMyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorApi
     */
    public apiV1SupervisorsProductsPagMyGet(requestParameters: SupervisorApiApiV1SupervisorsProductsPagMyGetRequest = {}, options?: any) {
        return SupervisorApiFp(this.configuration).apiV1SupervisorsProductsPagMyGet(requestParameters.limit, requestParameters.offset, requestParameters.sortField, requestParameters.sortType, requestParameters.noCache, requestParameters.filters, requestParameters.statusGroup, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Закрепить продукт за супервайзером. Взять его в работу.  ##  Выставляет у продукта поле checkedby  
     * @summary # Закрепить продукт за супервайзером. Взять его в работу.
     * @param {SupervisorApiApiV1SupervisorsProductsPickupGuidPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorApi
     */
    public apiV1SupervisorsProductsPickupGuidPost(requestParameters: SupervisorApiApiV1SupervisorsProductsPickupGuidPostRequest, options?: any) {
        return SupervisorApiFp(this.configuration).apiV1SupervisorsProductsPickupGuidPost(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Получить список вакантных товаров со статусами 5, 10, 35 или 205, 235, 240 если нужны товары созданные клиентом.   
     * @summary # Получить список вакантных товаров.
     * @param {SupervisorApiApiV1SupervisorsProductsVacGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisorApi
     */
    public apiV1SupervisorsProductsVacGet(requestParameters: SupervisorApiApiV1SupervisorsProductsVacGetRequest = {}, options?: any) {
        return SupervisorApiFp(this.configuration).apiV1SupervisorsProductsVacGet(requestParameters.isCreatedByClient, requestParameters.noCache, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
