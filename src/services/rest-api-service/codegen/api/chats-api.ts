/* tslint:disable */
/* eslint-disable */
/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestError } from '../models';
// @ts-ignore
import { ConflictInTheState } from '../models';
// @ts-ignore
import { InlineObject35 } from '../models';
// @ts-ignore
import { InlineResponse20028 } from '../models';
// @ts-ignore
import { InlineResponse20029 } from '../models';
// @ts-ignore
import { InlineResponse20030 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFoundError } from '../models';
/**
 * ChatsApi - axios parameter creator
 * @export
 */
export const ChatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Метод создает групповой чат не привязаный к другим инстансам   
         * @summary Создать групповой чат
         * @param {InlineObject35} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsGroupPost: async (body?: InlineObject35, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chats/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Метод создает чат не привязаный к другим инстансам   
         * @summary Создать обычный чат
         * @param {string} guid GUID юзера в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsGuidPost: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ChatsGuidPost', 'guid', guid)
            const localVarPath = `/api/v1/chats/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Вступить в чат  
         * @summary Вступить в чат
         * @param {string} guid GUID чата в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsJoinGuidPost: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ChatsJoinGuidPost', 'guid', guid)
            const localVarPath = `/api/v1/chats/join/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить все файлы и имеджы с чата по гуиду   
         * @summary Получить все файлы и имеджы с чата по гуиду
         * @param {string} guid GUID чата в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsMediaGuidGet: async (guid: string, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ChatsMediaGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/chats/media/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)  
         * @summary Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)
         * @param {'allVideo' | 'allImages' | 'allFiles'} type Тип файла
         * @param {string} guid GUID чата в БД.
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsMediaPagGuidGet: async (type: 'allVideo' | 'allImages' | 'allFiles', guid: string, limit?: number, offset?: number, acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('apiV1ChatsMediaPagGuidGet', 'type', type)
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('apiV1ChatsMediaPagGuidGet', 'guid', guid)
            const localVarPath = `/api/v1/chats/media/pag/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить все имена юзеров (не считая модераторов и адмиинов)   
         * @summary Получить все имена юзеров
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsNamesGet: async (acceptEncoding?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chats/names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessTokenBearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (acceptEncoding !== undefined && acceptEncoding !== null) {
                localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatsApi - functional programming interface
 * @export
 */
export const ChatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatsApiAxiosParamCreator(configuration)
    return {
        /**
         * Метод создает групповой чат не привязаный к другим инстансам   
         * @summary Создать групповой чат
         * @param {InlineObject35} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChatsGroupPost(body?: InlineObject35, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChatsGroupPost(body, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Метод создает чат не привязаный к другим инстансам   
         * @summary Создать обычный чат
         * @param {string} guid GUID юзера в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChatsGuidPost(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChatsGuidPost(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Вступить в чат  
         * @summary Вступить в чат
         * @param {string} guid GUID чата в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChatsJoinGuidPost(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChatsJoinGuidPost(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить все файлы и имеджы с чата по гуиду   
         * @summary Получить все файлы и имеджы с чата по гуиду
         * @param {string} guid GUID чата в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChatsMediaGuidGet(guid: string, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20029>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChatsMediaGuidGet(guid, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)  
         * @summary Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)
         * @param {'allVideo' | 'allImages' | 'allFiles'} type Тип файла
         * @param {string} guid GUID чата в БД.
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChatsMediaPagGuidGet(type: 'allVideo' | 'allImages' | 'allFiles', guid: string, limit?: number, offset?: number, acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20030>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChatsMediaPagGuidGet(type, guid, limit, offset, acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Получить все имена юзеров (не считая модераторов и адмиинов)   
         * @summary Получить все имена юзеров
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ChatsNamesGet(acceptEncoding?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20028>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ChatsNamesGet(acceptEncoding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatsApi - factory interface
 * @export
 */
export const ChatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatsApiFp(configuration)
    return {
        /**
         * Метод создает групповой чат не привязаный к другим инстансам   
         * @summary Создать групповой чат
         * @param {InlineObject35} [body] 
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsGroupPost(body?: InlineObject35, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1ChatsGroupPost(body, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Метод создает чат не привязаный к другим инстансам   
         * @summary Создать обычный чат
         * @param {string} guid GUID юзера в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsGuidPost(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1ChatsGuidPost(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Вступить в чат  
         * @summary Вступить в чат
         * @param {string} guid GUID чата в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsJoinGuidPost(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiV1ChatsJoinGuidPost(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить все файлы и имеджы с чата по гуиду   
         * @summary Получить все файлы и имеджы с чата по гуиду
         * @param {string} guid GUID чата в БД.
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsMediaGuidGet(guid: string, acceptEncoding?: string, options?: any): AxiosPromise<InlineResponse20029> {
            return localVarFp.apiV1ChatsMediaGuidGet(guid, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)  
         * @summary Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)
         * @param {'allVideo' | 'allImages' | 'allFiles'} type Тип файла
         * @param {string} guid GUID чата в БД.
         * @param {number} [limit] Лимит записей для пагинации
         * @param {number} [offset] Смещение для пагинации
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsMediaPagGuidGet(type: 'allVideo' | 'allImages' | 'allFiles', guid: string, limit?: number, offset?: number, acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20030>> {
            return localVarFp.apiV1ChatsMediaPagGuidGet(type, guid, limit, offset, acceptEncoding, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить все имена юзеров (не считая модераторов и адмиинов)   
         * @summary Получить все имена юзеров
         * @param {string} [acceptEncoding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChatsNamesGet(acceptEncoding?: string, options?: any): AxiosPromise<Array<InlineResponse20028>> {
            return localVarFp.apiV1ChatsNamesGet(acceptEncoding, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1ChatsGroupPost operation in ChatsApi.
 * @export
 * @interface ChatsApiApiV1ChatsGroupPostRequest
 */
export interface ChatsApiApiV1ChatsGroupPostRequest {
    /**
     * 
     * @type {InlineObject35}
     * @memberof ChatsApiApiV1ChatsGroupPost
     */
    readonly body?: InlineObject35

    /**
     * 
     * @type {string}
     * @memberof ChatsApiApiV1ChatsGroupPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ChatsGuidPost operation in ChatsApi.
 * @export
 * @interface ChatsApiApiV1ChatsGuidPostRequest
 */
export interface ChatsApiApiV1ChatsGuidPostRequest {
    /**
     * GUID юзера в БД.
     * @type {string}
     * @memberof ChatsApiApiV1ChatsGuidPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ChatsApiApiV1ChatsGuidPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ChatsJoinGuidPost operation in ChatsApi.
 * @export
 * @interface ChatsApiApiV1ChatsJoinGuidPostRequest
 */
export interface ChatsApiApiV1ChatsJoinGuidPostRequest {
    /**
     * GUID чата в БД.
     * @type {string}
     * @memberof ChatsApiApiV1ChatsJoinGuidPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ChatsApiApiV1ChatsJoinGuidPost
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ChatsMediaGuidGet operation in ChatsApi.
 * @export
 * @interface ChatsApiApiV1ChatsMediaGuidGetRequest
 */
export interface ChatsApiApiV1ChatsMediaGuidGetRequest {
    /**
     * GUID чата в БД.
     * @type {string}
     * @memberof ChatsApiApiV1ChatsMediaGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ChatsApiApiV1ChatsMediaGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ChatsMediaPagGuidGet operation in ChatsApi.
 * @export
 * @interface ChatsApiApiV1ChatsMediaPagGuidGetRequest
 */
export interface ChatsApiApiV1ChatsMediaPagGuidGetRequest {
    /**
     * Тип файла
     * @type {'allVideo' | 'allImages' | 'allFiles'}
     * @memberof ChatsApiApiV1ChatsMediaPagGuidGet
     */
    readonly type: 'allVideo' | 'allImages' | 'allFiles'

    /**
     * GUID чата в БД.
     * @type {string}
     * @memberof ChatsApiApiV1ChatsMediaPagGuidGet
     */
    readonly guid: string

    /**
     * Лимит записей для пагинации
     * @type {number}
     * @memberof ChatsApiApiV1ChatsMediaPagGuidGet
     */
    readonly limit?: number

    /**
     * Смещение для пагинации
     * @type {number}
     * @memberof ChatsApiApiV1ChatsMediaPagGuidGet
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof ChatsApiApiV1ChatsMediaPagGuidGet
     */
    readonly acceptEncoding?: string
}

/**
 * Request parameters for apiV1ChatsNamesGet operation in ChatsApi.
 * @export
 * @interface ChatsApiApiV1ChatsNamesGetRequest
 */
export interface ChatsApiApiV1ChatsNamesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatsApiApiV1ChatsNamesGet
     */
    readonly acceptEncoding?: string
}

/**
 * ChatsApi - object-oriented interface
 * @export
 * @class ChatsApi
 * @extends {BaseAPI}
 */
export class ChatsApi extends BaseAPI {
    /**
     * Метод создает групповой чат не привязаный к другим инстансам   
     * @summary Создать групповой чат
     * @param {ChatsApiApiV1ChatsGroupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public apiV1ChatsGroupPost(requestParameters: ChatsApiApiV1ChatsGroupPostRequest = {}, options?: any) {
        return ChatsApiFp(this.configuration).apiV1ChatsGroupPost(requestParameters.body, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Метод создает чат не привязаный к другим инстансам   
     * @summary Создать обычный чат
     * @param {ChatsApiApiV1ChatsGuidPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public apiV1ChatsGuidPost(requestParameters: ChatsApiApiV1ChatsGuidPostRequest, options?: any) {
        return ChatsApiFp(this.configuration).apiV1ChatsGuidPost(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Вступить в чат  
     * @summary Вступить в чат
     * @param {ChatsApiApiV1ChatsJoinGuidPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public apiV1ChatsJoinGuidPost(requestParameters: ChatsApiApiV1ChatsJoinGuidPostRequest, options?: any) {
        return ChatsApiFp(this.configuration).apiV1ChatsJoinGuidPost(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить все файлы и имеджы с чата по гуиду   
     * @summary Получить все файлы и имеджы с чата по гуиду
     * @param {ChatsApiApiV1ChatsMediaGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public apiV1ChatsMediaGuidGet(requestParameters: ChatsApiApiV1ChatsMediaGuidGetRequest, options?: any) {
        return ChatsApiFp(this.configuration).apiV1ChatsMediaGuidGet(requestParameters.guid, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)  
     * @summary Получить все файлы,фотки,видео с чата по гуиду (Пагинацией)
     * @param {ChatsApiApiV1ChatsMediaPagGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public apiV1ChatsMediaPagGuidGet(requestParameters: ChatsApiApiV1ChatsMediaPagGuidGetRequest, options?: any) {
        return ChatsApiFp(this.configuration).apiV1ChatsMediaPagGuidGet(requestParameters.type, requestParameters.guid, requestParameters.limit, requestParameters.offset, requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить все имена юзеров (не считая модераторов и адмиинов)   
     * @summary Получить все имена юзеров
     * @param {ChatsApiApiV1ChatsNamesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public apiV1ChatsNamesGet(requestParameters: ChatsApiApiV1ChatsNamesGetRequest = {}, options?: any) {
        return ChatsApiFp(this.configuration).apiV1ChatsNamesGet(requestParameters.acceptEncoding, options).then((request) => request(this.axios, this.basePath));
    }
}
