/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import InlineObject43 from '../model/InlineObject43';
import InlineObject44 from '../model/InlineObject44';
import InlineObject45 from '../model/InlineObject45';
import InlineObject46 from '../model/InlineObject46';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse2016 from '../model/InlineResponse2016';
import InternalServerError from '../model/InternalServerError';
import NotFoundError from '../model/NotFoundError';

/**
* GoLogin service.
* @module api/GoLoginApi
* @version 0.1.0
*/
export default class GoLoginApi {

    /**
    * Constructs a new GoLoginApi. 
    * @alias module:api/GoLoginApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * # Создать новый профайл пользователя.
     * ## Создать новый профайл пользователя.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject43} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    apiV1GologinProfilePostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/api/v1/gologin/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Создать новый профайл пользователя.
     * ## Создать новый профайл пользователя.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject43} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20022}
     */
    apiV1GologinProfilePost(opts) {
      return this.apiV1GologinProfilePostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить профайл пользователя.
     * ## Изменить профайл пользователя.  
     * @param {String} profileId id профайла который нужно изменить.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject44} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1GologinProfileProfileIdPatchWithHttpInfo(profileId, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling apiV1GologinProfileProfileIdPatch");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/gologin/profile/{profileId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить профайл пользователя.
     * ## Изменить профайл пользователя.  
     * @param {String} profileId id профайла который нужно изменить.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject44} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1GologinProfileProfileIdPatch(profileId, opts) {
      return this.apiV1GologinProfileProfileIdPatchWithHttpInfo(profileId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Запустить пользователя.
     * ## Запустить профайл пользователя.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject45} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2016} and HTTP response
     */
    apiV1GologinProfileStartPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2016;
      return this.apiClient.callApi(
        '/api/v1/gologin/profile/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Запустить пользователя.
     * ## Запустить профайл пользователя.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject45} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2016}
     */
    apiV1GologinProfileStartPost(opts) {
      return this.apiV1GologinProfileStartPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Остановить профайл пользователя.
     * ## Остановить профайл пользователя.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject46} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    apiV1GologinProfileStopPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/gologin/profile/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Остановить профайл пользователя.
     * ## Остановить профайл пользователя.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject46} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    apiV1GologinProfileStopPost(opts) {
      return this.apiV1GologinProfileStopPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
