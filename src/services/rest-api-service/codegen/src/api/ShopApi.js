/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import ConflictInTheState from '../model/ConflictInTheState';
import InlineObject56 from '../model/InlineObject56';
import InlineObject57 from '../model/InlineObject57';
import InlineResponse20046 from '../model/InlineResponse20046';
import InlineResponse20047 from '../model/InlineResponse20047';
import InlineResponse2017 from '../model/InlineResponse2017';
import InternalServerError from '../model/InternalServerError';
import NotFoundError from '../model/NotFoundError';

/**
* Shop service.
* @module api/ShopApi
* @version 0.1.0
*/
export default class ShopApi {

    /**
    * Constructs a new ShopApi. 
    * @alias module:api/ShopApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * # Получить все магазины пользователя.
     * ## Получить все магазины пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20046>} and HTTP response
     */
    apiV1ShopsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20046];
      return this.apiClient.callApi(
        '/api/v1/shops/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить все магазины пользователя.
     * ## Получить все магазины пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20046>}
     */
    apiV1ShopsGet(opts) {
      return this.apiV1ShopsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Логическое удаление магазина по его GUID.
     * ## Логическое удаление магазина по его GUID.    Только владелец может удалить магазин.  После удаления магазин дезактивируется.
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1ShopsGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ShopsGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/shops/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Логическое удаление магазина по его GUID.
     * ## Логическое удаление магазина по его GUID.    Только владелец может удалить магазин.  После удаления магазин дезактивируется.
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1ShopsGuidDelete(guid, opts) {
      return this.apiV1ShopsGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Редактировать магазин.
     * # Редактировать магазин. клиентом.  ## Только владелец может редактировать  Перед записью в базу проверка работоспособности ссылок Поля со ссылками должны быть в формате uri!!! Это полная ссылка до файлов. валидный пример: \"https://user:password@app.sellerboard.com/ru/automation/reports?id=e5...8&format=csv\"
     * @param {String} guid GUID объекта в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject57} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1ShopsGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ShopsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/shops/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Редактировать магазин.
     * # Редактировать магазин. клиентом.  ## Только владелец может редактировать  Перед записью в базу проверка работоспособности ссылок Поля со ссылками должны быть в формате uri!!! Это полная ссылка до файлов. валидный пример: \"https://user:password@app.sellerboard.com/ru/automation/reports?id=e5...8&format=csv\"
     * @param {String} guid GUID объекта в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject57} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1ShopsGuidPatch(guid, opts) {
      return this.apiV1ShopsGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить все названия магазинов пользователя.
     * ## Получить все названия магазины пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20047>} and HTTP response
     */
    apiV1ShopsNamesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20047];
      return this.apiClient.callApi(
        '/api/v1/shops/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить все названия магазинов пользователя.
     * ## Получить все названия магазины пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20047>}
     */
    apiV1ShopsNamesGet(opts) {
      return this.apiV1ShopsNamesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Добавить новый магазин клиентом.
     * # Добавить новый магазин клиентом.  ## Создает новые магазин и добавляет в таблицу связи user_shops Проверки: Пользователь не может иметь два магазина с одинаковыми именами (name) Перед записью в базу проверка работоспособности ссылок Поля со ссылками должны быть в формате uri!!! Это полная ссылка до файлов. валидный пример: \"https://user:password@app.sellerboard.com/ru/automation/reports?id=e5...8&format=csv\"
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject56} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2017} and HTTP response
     */
    apiV1ShopsPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;
      return this.apiClient.callApi(
        '/api/v1/shops/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Добавить новый магазин клиентом.
     * # Добавить новый магазин клиентом.  ## Создает новые магазин и добавляет в таблицу связи user_shops Проверки: Пользователь не может иметь два магазина с одинаковыми именами (name) Перед записью в базу проверка работоспособности ссылок Поля со ссылками должны быть в формате uri!!! Это полная ссылка до файлов. валидный пример: \"https://user:password@app.sellerboard.com/ru/automation/reports?id=e5...8&format=csv\"
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject56} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2017}
     */
    apiV1ShopsPost(opts) {
      return this.apiV1ShopsPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
