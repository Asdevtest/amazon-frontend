/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1AdminsBatchesBoxes from '../model/ApiV1AdminsBatchesBoxes';
import BadRequestError from '../model/BadRequestError';
import ConflictInTheState from '../model/ConflictInTheState';
import InlineObject50 from '../model/InlineObject50';
import InlineObject51 from '../model/InlineObject51';
import InlineObject52 from '../model/InlineObject52';
import InlineResponse20017 from '../model/InlineResponse20017';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InternalServerError from '../model/InternalServerError';
import NotFoundError from '../model/NotFoundError';

/**
* Storekeepers service.
* @module api/StorekeepersApi
* @version 0.1.0
*/
export default class StorekeepersApi {

    /**
    * Constructs a new StorekeepersApi. 
    * @alias module:api/StorekeepersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * # Получить партии....
     * ## Получить партии...  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2004>} and HTTP response
     */
    apiV1StorekeepersBatchesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2004];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить партии....
     * ## Получить партии...  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2004>}
     */
    apiV1StorekeepersBatchesGet(opts) {
      return this.apiV1StorekeepersBatchesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить коробки и их строки по текущему сторкиперу.
     * ## Получить коробки и их строки по текущему сторкиперу.   Без отправленных в партию. Без сделан ли запрос на отправку коробки в партию)  GUID сторкипера получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsBatchesBoxes>} and HTTP response
     */
    apiV1StorekeepersBoxesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiV1AdminsBatchesBoxes];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/boxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить коробки и их строки по текущему сторкиперу.
     * ## Получить коробки и их строки по текущему сторкиперу.   Без отправленных в партию. Без сделан ли запрос на отправку коробки в партию)  GUID сторкипера получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsBatchesBoxes>}
     */
    apiV1StorekeepersBoxesGet(opts) {
      return this.apiV1StorekeepersBoxesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить значение isBarCodeAlreadyAttachedByTheSupplier и status в сущности заказ.
     * ## Изменить значение isBarCodeAlreadyAttachedByTheSupplier и status  в сущности заказ.   
     * @param {String} guid GUID ордера, который мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject52} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1StorekeepersOrdersSetBarcodeAndStatusGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersOrdersSetBarcodeAndStatusGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/storekeepers/orders/set_barcode_and_status/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить значение isBarCodeAlreadyAttachedByTheSupplier и status в сущности заказ.
     * ## Изменить значение isBarCodeAlreadyAttachedByTheSupplier и status  в сущности заказ.   
     * @param {String} guid GUID ордера, который мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject52} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1StorekeepersOrdersSetBarcodeAndStatusGuidPatch(guid, opts) {
      return this.apiV1StorekeepersOrdersSetBarcodeAndStatusGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отметить задачу, как отмененную..
     * ## Отметить задачу, как отмененную.  
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1StorekeepersTasksCancelGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksCancelGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/cancel/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отметить задачу, как отмененную..
     * ## Отметить задачу, как отмененную.  
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1StorekeepersTasksCancelGuidPost(guid, opts) {
      return this.apiV1StorekeepersTasksCancelGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отметить задачу, как выполненную.
     * ## Отметить задачу, как выполненную.  
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject51} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1StorekeepersTasksDoneGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksDoneGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/done/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отметить задачу, как выполненную.
     * ## Отметить задачу, как выполненную.  
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject51} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1StorekeepersTasksDoneGuidPost(guid, opts) {
      return this.apiV1StorekeepersTasksDoneGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить задачу по его id.
     * ## Получить задачу по его id.   
     * @param {String} guid GUID задачи.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    apiV1StorekeepersTasksGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить задачу по его id.
     * ## Получить задачу по его id.   
     * @param {String} guid GUID задачи.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    apiV1StorekeepersTasksGuidGet(guid, opts) {
      return this.apiV1StorekeepersTasksGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить задачу.
     * ## Изменить задачу. Здесь только статус.   
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject50} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1StorekeepersTasksGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить задачу.
     * ## Изменить задачу. Здесь только статус.   
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject50} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1StorekeepersTasksGuidPatch(guid, opts) {
      return this.apiV1StorekeepersTasksGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить задачи закрепленные за данным сборщиком..
     * ## Получить задачи закрепленные за данным сборщиком.  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Статус задачи для фильтра.
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2003>} and HTTP response
     */
    apiV1StorekeepersTasksLightMyGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2003];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks_light/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить задачи закрепленные за данным сборщиком..
     * ## Получить задачи закрепленные за данным сборщиком.  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Статус задачи для фильтра.
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2003>}
     */
    apiV1StorekeepersTasksLightMyGet(opts) {
      return this.apiV1StorekeepersTasksLightMyGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить задачи не закрепленные за сотрудниками склада.
     * ## Получить задачи не закрепленные за сотрудниками склада.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2003>} and HTTP response
     */
    apiV1StorekeepersTasksLightVacGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2003];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks_light/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить задачи не закрепленные за сотрудниками склада.
     * ## Получить задачи не закрепленные за сотрудниками склада.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2003>}
     */
    apiV1StorekeepersTasksLightVacGet(opts) {
      return this.apiV1StorekeepersTasksLightVacGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить задачи закрепленные за данным сборщиком..
     * ## Получить задачи закрепленные за данным сборщиком.  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Статус задачи для фильтра.
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20017>} and HTTP response
     */
    apiV1StorekeepersTasksMyGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20017];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить задачи закрепленные за данным сборщиком..
     * ## Получить задачи закрепленные за данным сборщиком.  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.status Статус задачи для фильтра.
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20017>}
     */
    apiV1StorekeepersTasksMyGet(opts) {
      return this.apiV1StorekeepersTasksMyGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Закрепить задачу за сборщиком.
     * ## Закрепить задачу за сборщиком.   
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1StorekeepersTasksPickupGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Закрепить задачу за сборщиком.
     * ## Закрепить задачу за сборщиком.   
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1StorekeepersTasksPickupGuidPost(guid, opts) {
      return this.apiV1StorekeepersTasksPickupGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить задачи не закрепленные за сотрудниками склада.
     * ## Получить задачи не закрепленные за сотрудниками склада.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20017>} and HTTP response
     */
    apiV1StorekeepersTasksVacGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20017];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить задачи не закрепленные за сотрудниками склада.
     * ## Получить задачи не закрепленные за сотрудниками склада.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20017>}
     */
    apiV1StorekeepersTasksVacGet(opts) {
      return this.apiV1StorekeepersTasksVacGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
