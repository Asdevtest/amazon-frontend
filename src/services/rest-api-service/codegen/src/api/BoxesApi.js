/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1AdminsTasksBoxesBefore from '../model/ApiV1AdminsTasksBoxesBefore';
import BadRequestError from '../model/BadRequestError';
import ConflictInTheState from '../model/ConflictInTheState';
import InlineObject10 from '../model/InlineObject10';
import InlineObject11 from '../model/InlineObject11';
import InlineObject12 from '../model/InlineObject12';
import InlineObject13 from '../model/InlineObject13';
import InlineObject14 from '../model/InlineObject14';
import InlineObject15 from '../model/InlineObject15';
import InlineObject16 from '../model/InlineObject16';
import InlineObject5 from '../model/InlineObject5';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineObject8 from '../model/InlineObject8';
import InlineObject9 from '../model/InlineObject9';
import InlineResponse2011 from '../model/InlineResponse2011';
import InlineResponse2012 from '../model/InlineResponse2012';
import InternalServerError from '../model/InternalServerError';
import NotFoundError from '../model/NotFoundError';

/**
* Boxes service.
* @module api/BoxesApi
* @version 0.1.0
*/
export default class BoxesApi {

    /**
    * Constructs a new BoxesApi. 
    * @alias module:api/BoxesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * # Подтвердить операцию объединения/разъединения коробок.
     * ## Подтвердить операцию объединения/разъединения коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject12} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesApprovePostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Подтвердить операцию объединения/разъединения коробок.
     * ## Подтвердить операцию объединения/разъединения коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject12} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesApprovePost(opts) {
      return this.apiV1BoxesApprovePostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить коробки и их строки по GUID заказа.
     * ## # Получить коробки и их строки по GUID заказа.   
     * @param {String} guid GUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesByOrderGuidGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesByOrderGuidGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/by_order_guid/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить коробки и их строки по GUID заказа.
     * ## # Получить коробки и их строки по GUID заказа.   
     * @param {String} guid GUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesByOrderGuidGuidGet(guid, opts) {
      return this.apiV1BoxesByOrderGuidGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить коробки и их строки по GUID продукта.
     * ## Получить коробки и их строки по GUID продукта.   
     * @param {String} guid GUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesByProductGuidGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesByProductGuidGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/by_product_guid/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить коробки и их строки по GUID продукта.
     * ## Получить коробки и их строки по GUID продукта.   
     * @param {String} guid GUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesByProductGuidGuidGet(guid, opts) {
      return this.apiV1BoxesByProductGuidGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Рассчитать стоимость доставки коробов.
     * ## Рассчитать стоимость доставки коробов.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject14} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    apiV1BoxesCalculateBoxDeliveryCostsInBatchPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/api/v1/boxes/calculate_box_delivery_costs_in_batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Рассчитать стоимость доставки коробов.
     * ## Рассчитать стоимость доставки коробов.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject14} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    apiV1BoxesCalculateBoxDeliveryCostsInBatchPost(opts) {
      return this.apiV1BoxesCalculateBoxDeliveryCostsInBatchPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отменить редактирование коробок.
     * ## Отменить редактирование коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject7} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesCancelEditPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/cancel-edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отменить редактирование коробок.
     * ## Отменить редактирование коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject7} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesCancelEditPost(opts) {
      return this.apiV1BoxesCancelEditPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отменить редактирование коробок сотрудником склада.
     * ## Отменить редактирование коробок сотрудником склада.  
     * @param {String} guid GUID коробки, объединение которой нужно отменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesCancelEditWithDraftGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesCancelEditWithDraftGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/cancel_edit_with_draft/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отменить редактирование коробок сотрудником склада.
     * ## Отменить редактирование коробок сотрудником склада.  
     * @param {String} guid GUID коробки, объединение которой нужно отменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesCancelEditWithDraftGuidPost(guid, opts) {
      return this.apiV1BoxesCancelEditWithDraftGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отменить объединение коробок.
     * ## Отменить объединение коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject9} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesCancelMergePostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/cancel-merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отменить объединение коробок.
     * ## Отменить объединение коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject9} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesCancelMergePost(opts) {
      return this.apiV1BoxesCancelMergePostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отменить разделение коробок.
     * ## Отменить разделение коробок.   ## !!! У каждой коробки которая была создана разделением есть братья.    ## !!! Братья - коробки которые были созданы с этой, при разделении родителя.    ## !!! При отмене текущая коробка и все ee братья будут удалены. Родитель восстановлен.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject11} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesCancelSplitPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/cancel-split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отменить разделение коробок.
     * ## Отменить разделение коробок.   ## !!! У каждой коробки которая была создана разделением есть братья.    ## !!! Братья - коробки которые были созданы с этой, при разделении родителя.    ## !!! При отмене текущая коробка и все ee братья будут удалены. Родитель восстановлен.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject11} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesCancelSplitPost(opts) {
      return this.apiV1BoxesCancelSplitPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить черновики коробок и их строки по текущему клиенту.
     * ## Получить черновики коробок и их строки по текущему клиенту.   ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesClientsDraftsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/clients/drafts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить черновики коробок и их строки по текущему клиенту.
     * ## Получить черновики коробок и их строки по текущему клиенту.   ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesClientsDraftsGet(opts) {
      return this.apiV1BoxesClientsDraftsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить коробки и их строки по текущему клиенту.
     * ## Получить коробки(без черновиков) и их строки по текущему клиенту. (Без отправленных в партию)  ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesClientsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить коробки и их строки по текущему клиенту.
     * ## Получить коробки(без черновиков) и их строки по текущему клиенту. (Без отправленных в партию)  ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesClientsGet(opts) {
      return this.apiV1BoxesClientsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить коробки по текущему клиенту отправленные в партию.
     * ## Получить коробки по текущему клиенту отправленные в партию.  ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesClientsSentToBatchGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/clients/sent_to_batch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить коробки по текущему клиенту отправленные в партию.
     * ## Получить коробки по текущему клиенту отправленные в партию.  ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesClientsSentToBatchGet(opts) {
      return this.apiV1BoxesClientsSentToBatchGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить черновики коробок и их строки.
     * ## Получить черновики коробок и их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesDraftsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/drafts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить черновики коробок и их строки.
     * ## Получить черновики коробок и их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesDraftsGet(opts) {
      return this.apiV1BoxesDraftsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отредактировать коробку.
     * ## ЭТО МЕТОД ИСОЛЬЗУЕТСЯ ДЛЯ ТАСКОВ  ## Отредактировать коробку. Коробка после редактирования станет черновиком. Ее нужно будет подтвердить  ## ВНИМАНИЕ - фактически будет создана новая коробка а старая пометится как удаленная.   ## ВНИМАНИЕ - передайте весь набор параметров как на создание новой коробки. Не только те которые нужно изменить.  
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject6} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    apiV1BoxesEditGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesEditGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2012;
      return this.apiClient.callApi(
        '/api/v1/boxes/edit/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отредактировать коробку.
     * ## ЭТО МЕТОД ИСОЛЬЗУЕТСЯ ДЛЯ ТАСКОВ  ## Отредактировать коробку. Коробка после редактирования станет черновиком. Ее нужно будет подтвердить  ## ВНИМАНИЕ - фактически будет создана новая коробка а старая пометится как удаленная.   ## ВНИМАНИЕ - передайте весь набор параметров как на создание новой коробки. Не только те которые нужно изменить.  
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject6} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    apiV1BoxesEditGuidPost(guid, opts) {
      return this.apiV1BoxesEditGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить коробки и их строки.
     * ## Получить коробки их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>} and HTTP response
     */
    apiV1BoxesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsTasksBoxesBefore];
      return this.apiClient.callApi(
        '/api/v1/boxes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить коробки и их строки.
     * ## Получить коробки их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsTasksBoxesBefore>}
     */
    apiV1BoxesGet(opts) {
      return this.apiV1BoxesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Удалить коробку.
     * ## Удалить коробку.  
     * @param {String} guid GUID для которой подтверждаем действие.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Удалить коробку.
     * ## Удалить коробку.  
     * @param {String} guid GUID для которой подтверждаем действие.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesGuidDelete(guid, opts) {
      return this.apiV1BoxesGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Объединить две и более коробок.
     * ## Объединить две и более коробок.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject8} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    apiV1BoxesMergePostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2012;
      return this.apiClient.callApi(
        '/api/v1/boxes/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Объединить две и более коробок.
     * ## Объединить две и более коробок.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject8} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    apiV1BoxesMergePost(opts) {
      return this.apiV1BoxesMergePostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Создать коробку и ее строки.
     * ## Создать коробку и ее строки.   ## Коробка состоит из шапки и строк (как накладная)   ## Коллекция Boxes содержит основные параметры коробки.   ## BoxesItems - коллекция которая содержит строки позиций в коробке.            У коробок есть еще такие параметры:            isActual - если false, то коробка удалена.            isDraft - если true, то коробка является черновиком. Его создал клиента при объеденении / разделении коробки            У клиента и у сотрудника склада их можно отфильтровать и обрабатывать в отдельном окне.         Сотрудник склада обработав позитивно изменение коробок от клиента просто ставит здесь (isDraft) false и коробка становится обычной.         Также у коробки созданной из других коробок заполнено поле parents. Это массив guid родительских коробок.         При отмене объединения коробок в базе по этим guid восстановим коробки isActual = true. А новые будут удалены isActual = false.         Также у коробки созданной при объединении/разделении будет заполнено поле brothers. Это guid других коробок которые были созданы вместе с этой из общих родителей.         Когда для любой из объединённых коробок будет запрошено удаление, восстановим старые коробки и кроме текущей коробки         будут удалены все ее братья.         
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject5} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response
     */
    apiV1BoxesPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2011;
      return this.apiClient.callApi(
        '/api/v1/boxes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Создать коробку и ее строки.
     * ## Создать коробку и ее строки.   ## Коробка состоит из шапки и строк (как накладная)   ## Коллекция Boxes содержит основные параметры коробки.   ## BoxesItems - коллекция которая содержит строки позиций в коробке.            У коробок есть еще такие параметры:            isActual - если false, то коробка удалена.            isDraft - если true, то коробка является черновиком. Его создал клиента при объеденении / разделении коробки            У клиента и у сотрудника склада их можно отфильтровать и обрабатывать в отдельном окне.         Сотрудник склада обработав позитивно изменение коробок от клиента просто ставит здесь (isDraft) false и коробка становится обычной.         Также у коробки созданной из других коробок заполнено поле parents. Это массив guid родительских коробок.         При отмене объединения коробок в базе по этим guid восстановим коробки isActual = true. А новые будут удалены isActual = false.         Также у коробки созданной при объединении/разделении будет заполнено поле brothers. Это guid других коробок которые были созданы вместе с этой из общих родителей.         Когда для любой из объединённых коробок будет запрошено удаление, восстановим старые коробки и кроме текущей коробки         будут удалены все ее братья.         
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject5} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}
     */
    apiV1BoxesPost(opts) {
      return this.apiV1BoxesPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Запросить отправку набора коробок в партию.
     * ## Запросить отправку набора коробок в партию.   при выполнении этого запроса у всех этих коробок поле sendToBatch должно выставиться в true.  Так же с клиента должны списаться деньги в пользу сотрудника склада.(и генерироваться оплаты) Проверки:  У каждой коробки поля clientId и storekeeperId должны быть заполнены.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject16} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesRequestSendBoxesToBatchPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/request_send_boxes_to_batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Запросить отправку набора коробок в партию.
     * ## Запросить отправку набора коробок в партию.   при выполнении этого запроса у всех этих коробок поле sendToBatch должно выставиться в true.  Так же с клиента должны списаться деньги в пользу сотрудника склада.(и генерироваться оплаты) Проверки:  У каждой коробки поля clientId и storekeeperId должны быть заполнены.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject16} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesRequestSendBoxesToBatchPost(opts) {
      return this.apiV1BoxesRequestSendBoxesToBatchPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отправить набор коробок в партию.
     * ## Отправить набор коробок в партию.   Этот метод будет дергать склад и передавать в него массив id коробок, после этого метода у коробок sendToBatchComplete должен измениться на true
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject15} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesSendBoxesToBatchPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/send_boxes_to_batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отправить набор коробок в партию.
     * ## Отправить набор коробок в партию.   Этот метод будет дергать склад и передавать в него массив id коробок, после этого метода у коробок sendToBatchComplete должен измениться на true
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject15} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesSendBoxesToBatchPost(opts) {
      return this.apiV1BoxesSendBoxesToBatchPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Разделить коробку.
     * ## Разделить коробку.   При разделении коробок странная сущность передается. Там массив массивов.Первый массив это          новые коробки - сколько элементов, столько и создаст коробок. Второй массив - это элементы в коробке.          В нем строки новой коробки. Фронт отвечает за то, что суммарное содержание новых коробок,          было ровно содержанию исходной коробки.           
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject10} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    apiV1BoxesSplitPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/boxes/split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Разделить коробку.
     * ## Разделить коробку.   При разделении коробок странная сущность передается. Там массив массивов.Первый массив это          новые коробки - сколько элементов, столько и создаст коробок. Второй массив - это элементы в коробке.          В нем строки новой коробки. Фронт отвечает за то, что суммарное содержание новых коробок,          было ровно содержанию исходной коробки.           
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject10} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    apiV1BoxesSplitPost(opts) {
      return this.apiV1BoxesSplitPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить коробку сотрудником склада.
     * ## Изменить коробку сотрудником склада.            Сотрудник склада не может редактировать содержание коробки, но ему доступно для         редактирования параметры коробки.         
     * @param {String} guid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject13} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1BoxesStorekeepersGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesStorekeepersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/boxes/storekeepers/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить коробку сотрудником склада.
     * ## Изменить коробку сотрудником склада.            Сотрудник склада не может редактировать содержание коробки, но ему доступно для         редактирования параметры коробки.         
     * @param {String} guid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject13} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1BoxesStorekeepersGuidPatch(guid, opts) {
      return this.apiV1BoxesStorekeepersGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
