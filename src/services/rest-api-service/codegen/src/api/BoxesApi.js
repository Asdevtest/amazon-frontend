/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiV1BatchesBoxes from '../model/ApiV1BatchesBoxes';
import InlineObject10 from '../model/InlineObject10';
import InlineObject4 from '../model/InlineObject4';
import InlineObject5 from '../model/InlineObject5';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineObject8 from '../model/InlineObject8';
import InlineObject9 from '../model/InlineObject9';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse2011 from '../model/InlineResponse2011';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse409 from '../model/InlineResponse409';
import InlineResponse500 from '../model/InlineResponse500';

/**
* Boxes service.
* @module api/BoxesApi
* @version v0.0.1
*/
export default class BoxesApi {
  /**
    * Constructs a new BoxesApi. 
    * @alias module:api/BoxesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
     * # Подтвердить операцию объединения/разъединения коробок.
     * ## Подтвердить операцию объединения/разъединения коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject9} opts.InlineObject9 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BoxesApprovePostWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['InlineObject9'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/boxes/approve',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Подтвердить операцию объединения/разъединения коробок.
     * ## Подтвердить операцию объединения/разъединения коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject9} opts.InlineObject9 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BoxesApprovePost(opts) {
    return this.apiV1BoxesApprovePostWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Отменить объединение коробок.
     * ## Отменить объединение коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject6} opts.InlineObject6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BoxesCancelMergePostWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['InlineObject6'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/boxes/cancel-merge',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Отменить объединение коробок.
     * ## Отменить объединение коробок.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject6} opts.InlineObject6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BoxesCancelMergePost(opts) {
    return this.apiV1BoxesCancelMergePostWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Отменить разделение коробок.
     * ## Отменить разделение коробок.   ## !!! У каждой коробки которая была создана разделением есть братья.    ## !!! Братья - коробки которые были созданы с этой, при разделении родителя.    ## !!! При отмене текущая коробка и все ee братья будут удалены. Родитель восстановлен.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject8} opts.InlineObject8 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BoxesCancelSplitPostWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['InlineObject8'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/boxes/cancel-split',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Отменить разделение коробок.
     * ## Отменить разделение коробок.   ## !!! У каждой коробки которая была создана разделением есть братья.    ## !!! Братья - коробки которые были созданы с этой, при разделении родителя.    ## !!! При отмене текущая коробка и все ee братья будут удалены. Родитель восстановлен.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject8} opts.InlineObject8 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BoxesCancelSplitPost(opts) {
    return this.apiV1BoxesCancelSplitPostWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить черновики коробок и их строки по текущему клиенту.
     * ## Получить черновики коробок и их строки по текущему клиенту.   ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1BatchesBoxes>} and HTTP response
     */
  apiV1BoxesClientsDraftsGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ ApiV1BatchesBoxes ];
    return this.apiClient.callApi(
      '/api/v1/boxes/clients/drafts',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить черновики коробок и их строки по текущему клиенту.
     * ## Получить черновики коробок и их строки по текущему клиенту.   ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1BatchesBoxes>}
     */
  apiV1BoxesClientsDraftsGet(opts) {
    return this.apiV1BoxesClientsDraftsGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить коробки и их строки по текущему клиенту.
     * ## Получить коробки(без черновиков) и их строки по текущему клиенту.   ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1BatchesBoxes>} and HTTP response
     */
  apiV1BoxesClientsGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ ApiV1BatchesBoxes ];
    return this.apiClient.callApi(
      '/api/v1/boxes/clients',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить коробки и их строки по текущему клиенту.
     * ## Получить коробки(без черновиков) и их строки по текущему клиенту.   ## GUID клиента получаем из токена.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1BatchesBoxes>}
     */
  apiV1BoxesClientsGet(opts) {
    return this.apiV1BoxesClientsGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить черновики коробок и их строки.
     * ## Получить черновики коробок и их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1BatchesBoxes>} and HTTP response
     */
  apiV1BoxesDraftsGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ ApiV1BatchesBoxes ];
    return this.apiClient.callApi(
      '/api/v1/boxes/drafts',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить черновики коробок и их строки.
     * ## Получить черновики коробок и их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1BatchesBoxes>}
     */
  apiV1BoxesDraftsGet(opts) {
    return this.apiV1BoxesDraftsGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить коробки и их строки.
     * ## Получить коробки их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1BatchesBoxes>} and HTTP response
     */
  apiV1BoxesGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ ApiV1BatchesBoxes ];
    return this.apiClient.callApi(
      '/api/v1/boxes/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить коробки и их строки.
     * ## Получить коробки их строки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1BatchesBoxes>}
     */
  apiV1BoxesGet(opts) {
    return this.apiV1BoxesGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Удалить коробку.
     * ## Удалить коробку.  
     * @param {String} guid GUID для которой подтверждаем действие.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BoxesGuidDeleteWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error("Missing the required parameter 'guid' when calling apiV1BoxesGuidDelete");
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/boxes/{guid}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Удалить коробку.
     * ## Удалить коробку.  
     * @param {String} guid GUID для которой подтверждаем действие.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BoxesGuidDelete(guid, opts) {
    return this.apiV1BoxesGuidDeleteWithHttpInfo(guid, opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Объединить две и более коробок.
     * ## Объединить две и более коробок.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject5} opts.InlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response
     */
  apiV1BoxesMergePostWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['InlineObject5'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = Object;
    return this.apiClient.callApi(
      '/api/v1/boxes/merge',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Объединить две и более коробок.
     * ## Объединить две и более коробок.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject5} opts.InlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}
     */
  apiV1BoxesMergePost(opts) {
    return this.apiV1BoxesMergePostWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Создать коробку и ее строки.
     * ## Создать коробку и ее строки.   ## Коробка состоит из шапки и строк (как накладная)   ## Коллекция Boxes содержит основные параметры коробки.   ## BoxesItems - коллекция которая содержит строки позиций в коробке.            У коробок есть еще такие параметры:            isActual - если false, то коробка удалена.            isDraft - если true, то коробка является черновиком. Его создал клиента при объеденении / разделении коробки            У клиента и у сотрудника склада их можно отфильтровать и обрабатывать в отдельном окне.         Сотрудник склада обработав позитивно изменение коробок от клиента просто ставит здесь (isDraft) false и коробка становится обычной.         Также у коробки созданной из других коробок заполнено поле parents. Это массив guid родительских коробок.         При отмене объединения коробок в базе по этим guid восстановим коробки isActual = true. А новые будут удалены isActual = false.         Также у коробки созданной при объединении/разделении будет заполнено поле brothers. Это guid других коробок которые были созданы вместе с этой из общих родителей.         Когда для любой из объединённых коробок будет запрошено удаление, восстановим старые коробки и кроме текущей коробки         будут удалены все ее братья.         
     * @param {module:model/InlineObject4} InlineObject4 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
  apiV1BoxesPostWithHttpInfo(InlineObject4, opts) {
    opts = opts || {};
    let postBody = InlineObject4;
    // verify the required parameter 'InlineObject4' is set
    if (InlineObject4 === undefined || InlineObject4 === null) {
      throw new Error("Missing the required parameter 'InlineObject4' when calling apiV1BoxesPost");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = InlineResponse201;
    return this.apiClient.callApi(
      '/api/v1/boxes/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Создать коробку и ее строки.
     * ## Создать коробку и ее строки.   ## Коробка состоит из шапки и строк (как накладная)   ## Коллекция Boxes содержит основные параметры коробки.   ## BoxesItems - коллекция которая содержит строки позиций в коробке.            У коробок есть еще такие параметры:            isActual - если false, то коробка удалена.            isDraft - если true, то коробка является черновиком. Его создал клиента при объеденении / разделении коробки            У клиента и у сотрудника склада их можно отфильтровать и обрабатывать в отдельном окне.         Сотрудник склада обработав позитивно изменение коробок от клиента просто ставит здесь (isDraft) false и коробка становится обычной.         Также у коробки созданной из других коробок заполнено поле parents. Это массив guid родительских коробок.         При отмене объединения коробок в базе по этим guid восстановим коробки isActual = true. А новые будут удалены isActual = false.         Также у коробки созданной при объединении/разделении будет заполнено поле brothers. Это guid других коробок которые были созданы вместе с этой из общих родителей.         Когда для любой из объединённых коробок будет запрошено удаление, восстановим старые коробки и кроме текущей коробки         будут удалены все ее братья.         
     * @param {module:model/InlineObject4} InlineObject4 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
  apiV1BoxesPost(InlineObject4, opts) {
    return this.apiV1BoxesPostWithHttpInfo(InlineObject4, opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Разделить коробку.
     * ## Разделить коробку.   При разделении коробок странная сущность передается. Там массив массивов.Первый массив это          новые коробки - сколько элементов, столько и создаст коробок. Второй массив - это элементы в коробке.          В нем строки новой коробки. Фронт отвечает за то, что суммарное содержание новых коробок,          было ровно содержанию исходной коробки.           
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject7} opts.InlineObject7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
  apiV1BoxesSplitPostWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['InlineObject7'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = [ String ];
    return this.apiClient.callApi(
      '/api/v1/boxes/split',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Разделить коробку.
     * ## Разделить коробку.   При разделении коробок странная сущность передается. Там массив массивов.Первый массив это          новые коробки - сколько элементов, столько и создаст коробок. Второй массив - это элементы в коробке.          В нем строки новой коробки. Фронт отвечает за то, что суммарное содержание новых коробок,          было ровно содержанию исходной коробки.           
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject7} opts.InlineObject7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
  apiV1BoxesSplitPost(opts) {
    return this.apiV1BoxesSplitPostWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Изменить коробку сотрудником склада.
     * ## Изменить коробку сотрудником склада.            Сотрудник склада не может редактировать содержание коробки, но ему доступно для         редактирования параметры коробки.         
     * @param {String} guid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject10} opts.InlineObject10 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BoxesStorekeepersGuidPatchWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = opts['InlineObject10'];
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BoxesStorekeepersGuidPatch"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/boxes/storekeepers/{guid}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Изменить коробку сотрудником склада.
     * ## Изменить коробку сотрудником склада.            Сотрудник склада не может редактировать содержание коробки, но ему доступно для         редактирования параметры коробки.         
     * @param {String} guid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject10} opts.InlineObject10 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BoxesStorekeepersGuidPatch(guid, opts) {
    return this.apiV1BoxesStorekeepersGuidPatchWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }
}
