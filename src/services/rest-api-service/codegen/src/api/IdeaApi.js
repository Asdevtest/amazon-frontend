/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import InlineObject64 from '../model/InlineObject64';
import InlineObject65 from '../model/InlineObject65';
import InlineObject66 from '../model/InlineObject66';
import InlineObject67 from '../model/InlineObject67';
import InlineResponse20045 from '../model/InlineResponse20045';
import InlineResponse20046 from '../model/InlineResponse20046';
import InlineResponse20046Rows from '../model/InlineResponse20046Rows';
import InlineResponse20047 from '../model/InlineResponse20047';
import InlineResponse2012 from '../model/InlineResponse2012';
import InternalServerError from '../model/InternalServerError';

/**
* Idea service.
* @module api/IdeaApi
* @version 0.1.0
*/
export default class IdeaApi {

    /**
    * Constructs a new IdeaApi. 
    * @alias module:api/IdeaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Добавить поставщиков к идее
     * ## Добавление поставщиков к идее  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject66} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasAddSuppliersGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasAddSuppliersGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/add_suppliers/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Добавить поставщиков к идее
     * ## Добавление поставщиков к идее  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject66} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasAddSuppliersGuidPost(guid, opts) {
      return this.apiV1IdeasAddSuppliersGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на addingAsin(18)
     * ## Изменить статус заявки с supplierFound(14) или productCreating(16) на addingAsin(18)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasAddingAsinGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasAddingAsinGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/adding_asin/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на addingAsin(18)
     * ## Изменить статус заявки с supplierFound(14) или productCreating(16) на addingAsin(18)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasAddingAsinGuidPatch(guid, opts) {
      return this.apiV1IdeasAddingAsinGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить идеи по родительскому продукту
     * Получить идеи по родительскому продукту
     * @param {String} guid ID родительского продукта, который должен быть в идее
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20045>} and HTTP response
     */
    apiV1IdeasByParentGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasByParentGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20045];
      return this.apiClient.callApi(
        '/api/v1/ideas/by_parent/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить идеи по родительскому продукту
     * Получить идеи по родительскому продукту
     * @param {String} guid ID родительского продукта, который должен быть в идее
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20045>}
     */
    apiV1IdeasByParentGuidGet(guid, opts) {
      return this.apiV1IdeasByParentGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на closed(30)
     * ## Изменить статус заявки с rejected(25) на closed(30)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasClosedGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasClosedGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/closed/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на closed(30)
     * ## Изменить статус заявки с rejected(25) на closed(30)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasClosedGuidPatch(guid, opts) {
      return this.apiV1IdeasClosedGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на finished(20)
     * ## Изменить статус заявки с addingAsin(18) на finished(20)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasFinishedGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasFinishedGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/finished/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на finished(20)
     * ## Изменить статус заявки с addingAsin(18) на finished(20)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasFinishedGuidPatch(guid, opts) {
      return this.apiV1IdeasFinishedGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Удалить идею
     * ## Удаление идеи  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Удалить идею
     * ## Удаление идеи  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasGuidDelete(guid, opts) {
      return this.apiV1IdeasGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить идею по гуиду
     * Получить идею по гуиду
     * @param {String} guid GUID идеи в БД
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withRequests Наличие в ответе заявок в продуктах
     * @param {Boolean} opts.withOrder Наличие в ответе заказа в продуктах
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20046Rows} and HTTP response
     */
    apiV1IdeasGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'withRequests': opts['withRequests'],
        'withOrder': opts['withOrder']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20046Rows;
      return this.apiClient.callApi(
        '/api/v1/ideas/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить идею по гуиду
     * Получить идею по гуиду
     * @param {String} guid GUID идеи в БД
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withRequests Наличие в ответе заявок в продуктах
     * @param {Boolean} opts.withOrder Наличие в ответе заказа в продуктах
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20046Rows}
     */
    apiV1IdeasGuidGet(guid, opts) {
      return this.apiV1IdeasGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Редактировать идею
     * ## Редактирование существующей идеи  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject64} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Редактировать идею
     * ## Редактирование существующей идеи  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject64} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasGuidPatch(guid, opts) {
      return this.apiV1IdeasGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить нотификации идей
     * ## Получить нотификации идей  
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archive Показывать в архиве/не в архиме нотификации (default to false)
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20047>} and HTTP response
     */
    apiV1IdeasNotificationsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'archive': opts['archive']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20047];
      return this.apiClient.callApi(
        '/api/v1/ideas/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить нотификации идей
     * ## Получить нотификации идей  
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archive Показывать в архиве/не в архиме нотификации (default to false)
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20047>}
     */
    apiV1IdeasNotificationsGet(opts) {
      return this.apiV1IdeasNotificationsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на OnCheck(10)
     * ## Изменить статус заявки с new(5) на OnCheck(10)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasOnCheckGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasOnCheckGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/on_check/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на OnCheck(10)
     * ## Изменить статус заявки с new(5) на OnCheck(10)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasOnCheckGuidPatch(guid, opts) {
      return this.apiV1IdeasOnCheckGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Список всех идей с пагинацией
     * Получить список всех идей с пагинацией
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters                Возможные поля: asin:, _id, title, status, comments, intervalStatusNew, intervalStatusOnCheck,               intervalStatusSupplierSearch, intervalStatusCardCreating, intervalStatusAddingAsin,               intervalStatusFinished, intervalStatusRejected, intervalsSum, dateStatusOnCheck, dateStatusSupplierSearch               dateStatusCardCreating, dateStatusAddingAsin, dateStatusFinished, dateStatusRejected, dateStatusClosed               intervalsSum, onCheckRequestsHumanFriendlyId, onFinishedRequestsHumanFriendlyId, onCheckRequestStatus, onFinishedRequestStatus, childProductSkusByClient, childProductAmazonTitle,               childProductShopIds, childProductAsin, parentProductSkusByClient, parentProductAmazonTitle,               parentProductShopIds, parentProductAsin               2 варианта использования:                 1. Фильтр по одному полю:                   [parentProductAmazonTitle][$eq]=some_title                 2. Фильтр по нескольким полям:                   or[0][parentProductAmazonTitle][$eq]=some_title;or[1][parentProductAsin][$eq]=some_asin                     Возвращает партии с коробками с продуктами, в которых parentProductAmazonTitle равен some_title или parentProductAsin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк             
     * @param {Boolean} opts.withRequests Наличие в ответе заявок в продуктах
     * @param {Boolean} opts.withOrder Наличие в ответе заказа в продуктах
     * @param {Number} opts.limit Лимит записей для пагинации (default to 10.0)
     * @param {Number} opts.offset Смещение для пагинации (default to 0.0)
     * @param {String} opts.sortField Название поля
     * @param {module:model/String} opts.sortType Тип сортировки
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20046} and HTTP response
     */
    apiV1IdeasPagMyGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters'],
        'withRequests': opts['withRequests'],
        'withOrder': opts['withOrder'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortType': opts['sortType']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20046;
      return this.apiClient.callApi(
        '/api/v1/ideas/pag/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Список всех идей с пагинацией
     * Получить список всех идей с пагинацией
     * @param {Object} opts Optional parameters
     * @param {String} opts.filters                Возможные поля: asin:, _id, title, status, comments, intervalStatusNew, intervalStatusOnCheck,               intervalStatusSupplierSearch, intervalStatusCardCreating, intervalStatusAddingAsin,               intervalStatusFinished, intervalStatusRejected, intervalsSum, dateStatusOnCheck, dateStatusSupplierSearch               dateStatusCardCreating, dateStatusAddingAsin, dateStatusFinished, dateStatusRejected, dateStatusClosed               intervalsSum, onCheckRequestsHumanFriendlyId, onFinishedRequestsHumanFriendlyId, onCheckRequestStatus, onFinishedRequestStatus, childProductSkusByClient, childProductAmazonTitle,               childProductShopIds, childProductAsin, parentProductSkusByClient, parentProductAmazonTitle,               parentProductShopIds, parentProductAsin               2 варианта использования:                 1. Фильтр по одному полю:                   [parentProductAmazonTitle][$eq]=some_title                 2. Фильтр по нескольким полям:                   or[0][parentProductAmazonTitle][$eq]=some_title;or[1][parentProductAsin][$eq]=some_asin                     Возвращает партии с коробками с продуктами, в которых parentProductAmazonTitle равен some_title или parentProductAsin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк             
     * @param {Boolean} opts.withRequests Наличие в ответе заявок в продуктах
     * @param {Boolean} opts.withOrder Наличие в ответе заказа в продуктах
     * @param {Number} opts.limit Лимит записей для пагинации (default to 10.0)
     * @param {Number} opts.offset Смещение для пагинации (default to 0.0)
     * @param {String} opts.sortField Название поля
     * @param {module:model/String} opts.sortType Тип сортировки
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20046}
     */
    apiV1IdeasPagMyGet(opts) {
      return this.apiV1IdeasPagMyGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Добавить идею
     * ## Добавление новой идеи   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject65} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    apiV1IdeasPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;
      return this.apiClient.callApi(
        '/api/v1/ideas/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Добавить идею
     * ## Добавление новой идеи   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject65} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    apiV1IdeasPost(opts) {
      return this.apiV1IdeasPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на productCreating(16)
     * ## Изменить статус заявки с supplierFound(14) на productCreating(16)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasProductCreatingGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasProductCreatingGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/product_creating/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на productCreating(16)
     * ## Изменить статус заявки с supplierFound(14) на productCreating(16)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasProductCreatingGuidPatch(guid, opts) {
      return this.apiV1IdeasProductCreatingGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на rejected(25)
     * ## Изменить статус заявки со статусов 5/10/13/14/15 на rejected(25)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasRejectedGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasRejectedGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/rejected/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на rejected(25)
     * ## Изменить статус заявки со статусов 5/10/13/14/15 на rejected(25)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasRejectedGuidPatch(guid, opts) {
      return this.apiV1IdeasRejectedGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Удалить поставщика
     * ## Удаление поставщика у идеи  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject67} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasRemoveSupplierGuidPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasRemoveSupplierGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/remove_supplier/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Удалить поставщика
     * ## Удаление поставщика у идеи  
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject67} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasRemoveSupplierGuidPost(guid, opts) {
      return this.apiV1IdeasRemoveSupplierGuidPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Открыть заявку заново
     * ## Открыть заявку заново rejected(25) -> new(5), затереть даты и интервалы
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasReopenGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasReopenGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/reopen/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Открыть заявку заново
     * ## Открыть заявку заново rejected(25) -> new(5), затереть даты и интервалы
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasReopenGuidPatch(guid, opts) {
      return this.apiV1IdeasReopenGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на supplierFound(14)
     * ## Изменить статус заявки с supplierSearch(13) на supplierFound(14)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasSupplierFoundGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasSupplierFoundGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/supplier_found/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на supplierFound(14)
     * ## Изменить статус заявки с supplierSearch(13) на supplierFound(14)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasSupplierFoundGuidPatch(guid, opts) {
      return this.apiV1IdeasSupplierFoundGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на supplierNotFound(15)
     * ## Изменить статус заявки с supplierSearch(13) на supplierNotFound(15)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasSupplierNotFoundGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasSupplierNotFoundGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/supplier_not_found/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на supplierNotFound(15)
     * ## Изменить статус заявки с supplierSearch(13) на supplierNotFound(15)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasSupplierNotFoundGuidPatch(guid, opts) {
      return this.apiV1IdeasSupplierNotFoundGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Изменить статус заявки на supplierSearch(13)
     * ## Изменить статус заявки с OnCheck(10) на supplierSearch(13)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1IdeasSupplierSearchGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1IdeasSupplierSearchGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/ideas/supplier_search/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Изменить статус заявки на supplierSearch(13)
     * ## Изменить статус заявки с OnCheck(10) на supplierSearch(13)
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1IdeasSupplierSearchGuidPatch(guid, opts) {
      return this.apiV1IdeasSupplierSearchGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
