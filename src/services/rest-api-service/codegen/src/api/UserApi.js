/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1AdminsOrdersCreatedBy from '../model/ApiV1AdminsOrdersCreatedBy';
import InlineObject39 from '../model/InlineObject39';
import InlineObject40 from '../model/InlineObject40';
import InlineObject41 from '../model/InlineObject41';
import InlineObject42 from '../model/InlineObject42';
import InlineResponse2016 from '../model/InlineResponse2016';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse403 from '../model/InlineResponse403';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse409 from '../model/InlineResponse409';
import InlineResponse500 from '../model/InlineResponse500';

/**
* User service.
* @module api/UserApi
* @version v0.0.1
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Очистить все коллекции в БД кроме пользователей.
     * ## Очистить все коллекции в БД кроме пользователей..   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1TechClearAllSchemasPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/tech/clear_all_schemas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Очистить все коллекции в БД кроме пользователей.
     * ## Очистить все коллекции в БД кроме пользователей..   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1TechClearAllSchemasPost(opts) {
      return this.apiV1TechClearAllSchemasPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить информацию от текущем пользователе.
     * ## Получить информацию от текущем пользователе.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1AdminsOrdersCreatedBy} and HTTP response
     */
    apiV1UsersInfoGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = ApiV1AdminsOrdersCreatedBy;
      return this.apiClient.callApi(
        '/api/v1/users/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить информацию от текущем пользователе.
     * ## Получить информацию от текущем пользователе.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1AdminsOrdersCreatedBy}
     */
    apiV1UsersInfoGet(opts) {
      return this.apiV1UsersInfoGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Привязка суб пользователя.
     * ## Этот эндпоинт может быть вызван из любой роли кроме админа.  ## В поле должен передаваться email пользователя которого к себе хочет привязать мастер пользователь.  
     * @param {module:model/InlineObject41} InlineObject41 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1UsersLinkSubUserPatchWithHttpInfo(InlineObject41, opts) {
      opts = opts || {};
      let postBody = InlineObject41;
      // verify the required parameter 'InlineObject41' is set
      if (InlineObject41 === undefined || InlineObject41 === null) {
        throw new Error("Missing the required parameter 'InlineObject41' when calling apiV1UsersLinkSubUserPatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/users/link_sub-user', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Привязка суб пользователя.
     * ## Этот эндпоинт может быть вызван из любой роли кроме админа.  ## В поле должен передаваться email пользователя которого к себе хочет привязать мастер пользователь.  
     * @param {module:model/InlineObject41} InlineObject41 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1UsersLinkSubUserPatch(InlineObject41, opts) {
      return this.apiV1UsersLinkSubUserPatchWithHttpInfo(InlineObject41, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Обновления информации о себе самим пользователем.
     * ## Сейчас возможно только редактирование поля role.  ## Можно выбрать роль из массива allowedRoles.  
     * @param {module:model/InlineObject42} InlineObject42 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1UsersMePatchWithHttpInfo(InlineObject42, opts) {
      opts = opts || {};
      let postBody = InlineObject42;
      // verify the required parameter 'InlineObject42' is set
      if (InlineObject42 === undefined || InlineObject42 === null) {
        throw new Error("Missing the required parameter 'InlineObject42' when calling apiV1UsersMePatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/users/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Обновления информации о себе самим пользователем.
     * ## Сейчас возможно только редактирование поля role.  ## Можно выбрать роль из массива allowedRoles.  
     * @param {module:model/InlineObject42} InlineObject42 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1UsersMePatch(InlineObject42, opts) {
      return this.apiV1UsersMePatchWithHttpInfo(InlineObject42, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Создание нового пользователя. Регистрация.
     * ## Создание нового пользователя. Регистрация.   
     * @param {module:model/InlineObject39} InlineObject39 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1AdminsOrdersCreatedBy} and HTTP response
     */
    apiV1UsersPostWithHttpInfo(InlineObject39, opts) {
      opts = opts || {};
      let postBody = InlineObject39;
      // verify the required parameter 'InlineObject39' is set
      if (InlineObject39 === undefined || InlineObject39 === null) {
        throw new Error("Missing the required parameter 'InlineObject39' when calling apiV1UsersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = ApiV1AdminsOrdersCreatedBy;
      return this.apiClient.callApi(
        '/api/v1/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Создание нового пользователя. Регистрация.
     * ## Создание нового пользователя. Регистрация.   
     * @param {module:model/InlineObject39} InlineObject39 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1AdminsOrdersCreatedBy}
     */
    apiV1UsersPost(InlineObject39, opts) {
      return this.apiV1UsersPostWithHttpInfo(InlineObject39, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получение токена авторизации.
     * ## Получение токена авторизации.   ## Время жизни токена 96 часов   
     * @param {module:model/InlineObject40} InlineObject40 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2016} and HTTP response
     */
    apiV1UsersSignInPostWithHttpInfo(InlineObject40, opts) {
      opts = opts || {};
      let postBody = InlineObject40;
      // verify the required parameter 'InlineObject40' is set
      if (InlineObject40 === undefined || InlineObject40 === null) {
        throw new Error("Missing the required parameter 'InlineObject40' when calling apiV1UsersSignInPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2016;
      return this.apiClient.callApi(
        '/api/v1/users/sign_in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получение токена авторизации.
     * ## Получение токена авторизации.   ## Время жизни токена 96 часов   
     * @param {module:model/InlineObject40} InlineObject40 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2016}
     */
    apiV1UsersSignInPost(InlineObject40, opts) {
      return this.apiV1UsersSignInPostWithHttpInfo(InlineObject40, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
