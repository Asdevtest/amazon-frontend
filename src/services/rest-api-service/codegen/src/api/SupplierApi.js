/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1AdminsGetProductsByStatusCurrentSupplier from '../model/ApiV1AdminsGetProductsByStatusCurrentSupplier';
import InlineObject38 from '../model/InlineObject38';
import InlineObject39 from '../model/InlineObject39';
import InlineResponse2013 from '../model/InlineResponse2013';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse500 from '../model/InlineResponse500';

/**
* Supplier service.
* @module api/SupplierApi
* @version v0.0.1
*/
export default class SupplierApi {

    /**
    * Constructs a new SupplierApi. 
    * @alias module:api/SupplierApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * # Получить список поставщиков.
     * ## Получить список поставщиков.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ApiV1AdminsGetProductsByStatusCurrentSupplier>} and HTTP response
     */
    apiV1SuppliersGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsGetProductsByStatusCurrentSupplier];
      return this.apiClient.callApi(
        '/api/v1/suppliers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить список поставщиков.
     * ## Получить список поставщиков.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ApiV1AdminsGetProductsByStatusCurrentSupplier>}
     */
    apiV1SuppliersGet(opts) {
      return this.apiV1SuppliersGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Удалить поставщика.
     * ##  Удалить поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1SuppliersGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SuppliersGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/suppliers/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Удалить поставщика.
     * ##  Удалить поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1SuppliersGuidDelete(guid, opts) {
      return this.apiV1SuppliersGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить одного поставщика.
     * ## Получить одного поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1AdminsGetProductsByStatusCurrentSupplier} and HTTP response
     */
    apiV1SuppliersGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SuppliersGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = ApiV1AdminsGetProductsByStatusCurrentSupplier;
      return this.apiClient.callApi(
        '/api/v1/suppliers/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить одного поставщика.
     * ## Получить одного поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1AdminsGetProductsByStatusCurrentSupplier}
     */
    apiV1SuppliersGuidGet(guid, opts) {
      return this.apiV1SuppliersGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить поставщика.
     * ## Изменить  поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject39} opts.InlineObject39 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1SuppliersGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['InlineObject39'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SuppliersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/suppliers/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить поставщика.
     * ## Изменить  поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject39} opts.InlineObject39 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1SuppliersGuidPatch(guid, opts) {
      return this.apiV1SuppliersGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Добавить нового поставщика.
     * ## Добавить нового поставщика.   
     * @param {module:model/InlineObject38} InlineObject38 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2013} and HTTP response
     */
    apiV1SuppliersPostWithHttpInfo(InlineObject38, opts) {
      opts = opts || {};
      let postBody = InlineObject38;
      // verify the required parameter 'InlineObject38' is set
      if (InlineObject38 === undefined || InlineObject38 === null) {
        throw new Error("Missing the required parameter 'InlineObject38' when calling apiV1SuppliersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2013;
      return this.apiClient.callApi(
        '/api/v1/suppliers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Добавить нового поставщика.
     * ## Добавить нового поставщика.   
     * @param {module:model/InlineObject38} InlineObject38 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2013}
     */
    apiV1SuppliersPost(InlineObject38, opts) {
      return this.apiV1SuppliersPostWithHttpInfo(InlineObject38, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
