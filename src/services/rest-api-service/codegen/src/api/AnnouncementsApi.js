/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse201 from '../model/InlineResponse201';
import InternalServerError from '../model/InternalServerError';
import NotFoundError from '../model/NotFoundError';

/**
* Announcements service.
* @module api/AnnouncementsApi
* @version 0.1.0
*/
export default class AnnouncementsApi {

    /**
    * Constructs a new AnnouncementsApi. 
    * @alias module:api/AnnouncementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * # Удалить анонс по гуиду
     * ## Удалить анонс по гуиду
     * @param {String} guid Гуид анонса
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1AnnouncementsGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AnnouncementsGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/announcements/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Удалить анонс по гуиду
     * ## Удалить анонс по гуиду
     * @param {String} guid Гуид анонса
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1AnnouncementsGuidDelete(guid, opts) {
      return this.apiV1AnnouncementsGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить анонс по гуиду
     * ## Получить анонс по гуиду
     * @param {String} guid Гуид анонса
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    apiV1AnnouncementsGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AnnouncementsGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/announcements/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить анонс по гуиду
     * ## Получить анонс по гуиду
     * @param {String} guid Гуид анонса
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    apiV1AnnouncementsGuidGet(guid, opts) {
      return this.apiV1AnnouncementsGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить анонс
     * ## Изменить анонс
     * @param {String} guid Гуид анонса
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject1} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1AnnouncementsGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AnnouncementsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/announcements/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить анонс
     * ## Изменить анонс
     * @param {String} guid Гуид анонса
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject1} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1AnnouncementsGuidPatch(guid, opts) {
      return this.apiV1AnnouncementsGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить свои анонсы
     * ## Получить свои анонсы
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    apiV1AnnouncementsMyGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/announcements/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить свои анонсы
     * ## Получить свои анонсы
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    apiV1AnnouncementsMyGet(opts) {
      return this.apiV1AnnouncementsMyGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Создать анонс
     * ## Создать анонс
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    apiV1AnnouncementsPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/announcements/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Создать анонс
     * ## Создать анонс
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
    apiV1AnnouncementsPost(opts) {
      return this.apiV1AnnouncementsPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Получить не свои анонсы
     * ## Получить не свои анонсы
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    apiV1AnnouncementsVacGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/announcements/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Получить не свои анонсы
     * ## Получить не свои анонсы
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    apiV1AnnouncementsVacGet(opts) {
      return this.apiV1AnnouncementsVacGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
