/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineObject11 from '../model/InlineObject11';
import InlineObject12 from '../model/InlineObject12';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2012 from '../model/InlineResponse2012';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse409 from '../model/InlineResponse409';
import InlineResponse500 from '../model/InlineResponse500';

/**
* Buyer service.
* @module api/BuyerApi
* @version v0.0.1
*/
export default class BuyerApi {
  /**
    * Constructs a new BuyerApi. 
    * @alias module:api/BuyerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
     * # Получить конкретный заказ по его GUID.
     * ## Получить конкретный заказ по его GUID.   
     * @param {String} guid GUID заказа.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
  apiV1BuyersOrdersGuidGetWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BuyersOrdersGuidGet"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = InlineResponse2001;
    return this.apiClient.callApi(
      '/api/v1/buyers/orders/{guid}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить конкретный заказ по его GUID.
     * ## Получить конкретный заказ по его GUID.   
     * @param {String} guid GUID заказа.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
  apiV1BuyersOrdersGuidGet(guid, opts) {
    return this.apiV1BuyersOrdersGuidGetWithHttpInfo(guid, opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Редактировать заказ.
     * ## Редактировать заказ.   
     * @param {String} guid GUID заказа, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject11} opts.InlineObject11 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BuyersOrdersGuidPatchWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = opts['InlineObject11'];
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BuyersOrdersGuidPatch"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/buyers/orders/{guid}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Редактировать заказ.
     * ## Редактировать заказ.   
     * @param {String} guid GUID заказа, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject11} opts.InlineObject11 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BuyersOrdersGuidPatch(guid, opts) {
    return this.apiV1BuyersOrdersGuidPatchWithHttpInfo(guid, opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список заказов текущего байера.
     * ## Получить список заказов текущего байера.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2001>} and HTTP response
     */
  apiV1BuyersOrdersMyGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2001 ];
    return this.apiClient.callApi(
      '/api/v1/buyers/orders/my',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список заказов текущего байера.
     * ## Получить список заказов текущего байера.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2001>}
     */
  apiV1BuyersOrdersMyGet(opts) {
    return this.apiV1BuyersOrdersMyGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Закрепить заказ за байером. Взять его в работу.
     * ## Закрепить заказ за байером. Взять его в работу.  ##  На основании заказа НУЖНО СФОРМИРОВАТЬ коробки по кол-ву товаров в заказе.   ## Эндпоинт НЕ ВЕРНЕТ сформированные коробки что бы не плодить МАГИЮ или ГЛЮКИ.   ## Запросите закрепление заказа. Если операция пройдет успешно 204 - запросите создание коробки.   ## Следующим этапом сделаем возможность закреплять пачку заказов и пачку коробок готовить одним запросом. Но потом.   ## Текущая база не поддерживает транзакции.   
     * @param {String} guid GUID заказа, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BuyersOrdersPickupGuidPostWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BuyersOrdersPickupGuidPost"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/buyers/orders/pickup/{guid}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Закрепить заказ за байером. Взять его в работу.
     * ## Закрепить заказ за байером. Взять его в работу.  ##  На основании заказа НУЖНО СФОРМИРОВАТЬ коробки по кол-ву товаров в заказе.   ## Эндпоинт НЕ ВЕРНЕТ сформированные коробки что бы не плодить МАГИЮ или ГЛЮКИ.   ## Запросите закрепление заказа. Если операция пройдет успешно 204 - запросите создание коробки.   ## Следующим этапом сделаем возможность закреплять пачку заказов и пачку коробок готовить одним запросом. Но потом.   ## Текущая база не поддерживает транзакции.   
     * @param {String} guid GUID заказа, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BuyersOrdersPickupGuidPost(guid, opts) {
    return this.apiV1BuyersOrdersPickupGuidPostWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список свободных заказов.
     * ## Получить список свободных заказов.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2001>} and HTTP response
     */
  apiV1BuyersOrdersVacGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2001 ];
    return this.apiClient.callApi(
      '/api/v1/buyers/orders/vac',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список свободных заказов.
     * ## Получить список свободных заказов.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2001>}
     */
  apiV1BuyersOrdersVacGet(opts) {
    return this.apiV1BuyersOrdersVacGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * Получить баланс для байера.
     * Получить баланс для байера.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
  apiV1BuyersPaymentsMyBalanceGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'Number';
    return this.apiClient.callApi(
      '/api/v1/buyers/payments/my-balance',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * Получить баланс для байера.
     * Получить баланс для байера.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
  apiV1BuyersPaymentsMyBalanceGet(opts) {
    return this.apiV1BuyersPaymentsMyBalanceGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * Получить информацию об платежах для этого байера.
     * Получить информацию об платежах для этого байера.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2004>} and HTTP response
     */
  apiV1BuyersPaymentsMyGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2004 ];
    return this.apiClient.callApi(
      '/api/v1/buyers/payments/my',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * Получить информацию об платежах для этого байера.
     * Получить информацию об платежах для этого байера.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2004>}
     */
  apiV1BuyersPaymentsMyGet(opts) {
    return this.apiV1BuyersPaymentsMyGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Внести изменения в продукт.
     * ## Внести изменения в продукт.  ## Байер может редактировать только товары со статусом: 30, 35, 40, 50, 60.   
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {Object.<String, {String: Object}>} opts.request_body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BuyersProductsGuidPatchWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = opts['request_body'];
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BuyersProductsGuidPatch"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/buyers/products/{guid}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Внести изменения в продукт.
     * ## Внести изменения в продукт.  ## Байер может редактировать только товары со статусом: 30, 35, 40, 50, 60.   
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {Object.<String, {String: Object}>} opts.request_body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BuyersProductsGuidPatch(guid, opts) {
    return this.apiV1BuyersProductsGuidPatchWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список товаров взятых в работу байером.
     * ## Получить список товаров взятых в работу байером.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
  apiV1BuyersProductsMyGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse200 ];
    return this.apiClient.callApi(
      '/api/v1/buyers/products/my',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список товаров взятых в работу байером.
     * ## Получить список товаров взятых в работу байером.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
  apiV1BuyersProductsMyGet(opts) {
    return this.apiV1BuyersProductsMyGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Закрепить продукт за байером. Взять его в работу.
     * ## Закрепить продукт за байером. Взять его в работу.  
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BuyersProductsPickupGuidPostWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BuyersProductsPickupGuidPost"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/buyers/products/pickup/{guid}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Закрепить продукт за байером. Взять его в работу.
     * ## Закрепить продукт за байером. Взять его в работу.  
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BuyersProductsPickupGuidPost(guid, opts) {
    return this.apiV1BuyersProductsPickupGuidPostWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список вакантных товаров.
     * ## Получить список вакантных товаров.   ## Товары со статусом 30 у которых не заполнен buyer   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
  apiV1BuyersProductsVacGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse200 ];
    return this.apiClient.callApi(
      '/api/v1/buyers/products/vac',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список вакантных товаров.
     * ## Получить список вакантных товаров.   ## Товары со статусом 30 у которых не заполнен buyer   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
  apiV1BuyersProductsVacGet(opts) {
    return this.apiV1BuyersProductsVacGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Показать все задачи данного пользователя.
     * ## Показать все задачи данного пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2005>} and HTTP response
     */
  apiV1BuyersTasksGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2005 ];
    return this.apiClient.callApi(
      '/api/v1/buyers/tasks',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Показать все задачи данного пользователя.
     * ## Показать все задачи данного пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2005>}
     */
  apiV1BuyersTasksGet(opts) {
    return this.apiV1BuyersTasksGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Удалить задачу.
     * ## Удалить задачу. !!! Можно удалять только задачи со статусом \"0\".   
     * @param {String} guid GUID удаляемого объекта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1BuyersTasksGuidDeleteWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1BuyersTasksGuidDelete"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/buyers/tasks/{guid}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Удалить задачу.
     * ## Удалить задачу. !!! Можно удалять только задачи со статусом \"0\".   
     * @param {String} guid GUID удаляемого объекта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1BuyersTasksGuidDelete(guid, opts) {
    return this.apiV1BuyersTasksGuidDeleteWithHttpInfo(guid, opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Создать задачу.
     * ## Создать задачу.   
     * @param {module:model/InlineObject12} InlineObject12 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
  apiV1BuyersTasksPostWithHttpInfo(InlineObject12, opts) {
    opts = opts || {};
    let postBody = InlineObject12;
    // verify the required parameter 'InlineObject12' is set
    if (InlineObject12 === undefined || InlineObject12 === null) {
      throw new Error(
        "Missing the required parameter 'InlineObject12' when calling apiV1BuyersTasksPost"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = InlineResponse2012;
    return this.apiClient.callApi(
      '/api/v1/buyers/tasks',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Создать задачу.
     * ## Создать задачу.   
     * @param {module:model/InlineObject12} InlineObject12 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
  apiV1BuyersTasksPost(InlineObject12, opts) {
    return this.apiV1BuyersTasksPostWithHttpInfo(InlineObject12, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }
}
