/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import ConflictInTheState from '../model/ConflictInTheState';
import InlineObject100 from '../model/InlineObject100';
import InlineObject101 from '../model/InlineObject101';
import InlineObject102 from '../model/InlineObject102';
import InlineObject103 from '../model/InlineObject103';
import InlineObject131 from '../model/InlineObject131';
import InlineObject132 from '../model/InlineObject132';
import InlineObject5 from '../model/InlineObject5';
import InlineObject96 from '../model/InlineObject96';
import InlineObject97 from '../model/InlineObject97';
import InlineObject98 from '../model/InlineObject98';
import InlineObject99 from '../model/InlineObject99';
import InlineResponse20060 from '../model/InlineResponse20060';
import InlineResponse20061 from '../model/InlineResponse20061';
import InlineResponse20062 from '../model/InlineResponse20062';
import InlineResponse20063 from '../model/InlineResponse20063';
import InlineResponse20064 from '../model/InlineResponse20064';
import InlineResponse20080 from '../model/InlineResponse20080';
import InlineResponse20081 from '../model/InlineResponse20081';
import InlineResponse20112 from '../model/InlineResponse20112';
import InlineResponse20113 from '../model/InlineResponse20113';
import InlineResponse2017 from '../model/InlineResponse2017';
import InternalServerError from '../model/InternalServerError';
import NotFoundError from '../model/NotFoundError';

/**
* Requests service.
* @module api/RequestsApi
* @version 0.1.0
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Получить облегченный список заявок по продукту
     * Получить облегченный список заявок по продукту   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.status 
     * @param {String} opts.excludeIdeaId Гуид идеи, который исключить
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20063>} and HTTP response
     */
    apiV1RequestsByProductLightGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsByProductLightGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        'status': opts['status'],
        'excludeIdeaId': opts['excludeIdeaId']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20063];
      return this.apiClient.callApi(
        '/api/v1/requests/by_product/light/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить облегченный список заявок по продукту
     * Получить облегченный список заявок по продукту   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.status 
     * @param {String} opts.excludeIdeaId Гуид идеи, который исключить
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20063>}
     */
    apiV1RequestsByProductLightGuidGet(guid, opts) {
      return this.apiV1RequestsByProductLightGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить детализацию стоимости заявки
     * ##  Получить детализацию стоимости заявки.  Перед публикованием заявки, нужно уведомить пользователя стоимости. Точность до сотых, (0.01$)   Проверки: Только владелец заявки может вызывать данный метод Только для заявок  со статусами DRAFT или FORBID_NEW_PROPOSALS.
     * @param {String} guid GUID в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20060} and HTTP response
     */
    apiV1RequestsCalculateRequestCostGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsCalculateRequestCostGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/api/v1/requests/calculate_request_cost/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить детализацию стоимости заявки
     * ##  Получить детализацию стоимости заявки.  Перед публикованием заявки, нужно уведомить пользователя стоимости. Точность до сотых, (0.01$)   Проверки: Только владелец заявки может вызывать данный метод Только для заявок  со статусами DRAFT или FORBID_NEW_PROPOSALS.
     * @param {String} guid GUID в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20060}
     */
    apiV1RequestsCalculateRequestCostGuidGet(guid, opts) {
      return this.apiV1RequestsCalculateRequestCostGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить все уникальные заявки для исполнителя.
     * ## Получить все уникальные заявки для исполнителя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20080>} and HTTP response
     */
    apiV1RequestsCustomGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20080];
      return this.apiClient.callApi(
        '/api/v1/requests/custom/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить все уникальные заявки для исполнителя.
     * ## Получить все уникальные заявки для исполнителя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20080>}
     */
    apiV1RequestsCustomGet(opts) {
      return this.apiV1RequestsCustomGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить уникальную заявку по его guid.
     * Получить уникальную заявку по его guid.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20081} and HTTP response
     */
    apiV1RequestsCustomGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsCustomGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20081;
      return this.apiClient.callApi(
        '/api/v1/requests/custom/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить уникальную заявку по его guid.
     * Получить уникальную заявку по его guid.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20081}
     */
    apiV1RequestsCustomGuidGet(guid, opts) {
      return this.apiV1RequestsCustomGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Изменить заявку.
     * ## Изменить заявку.   Цена будет округлена на до 0,01$   Проверки: Только владелец может редактировать заявку  Проверка на статус, статус должен быть DRAFT или PUBLISHED..
     * @param {String} guid GUID в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject132} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsCustomGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsCustomGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/custom/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Изменить заявку.
     * ## Изменить заявку.   Цена будет округлена на до 0,01$   Проверки: Только владелец может редактировать заявку  Проверка на статус, статус должен быть DRAFT или PUBLISHED..
     * @param {String} guid GUID в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject132} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsCustomGuidPatch(guid, opts) {
      return this.apiV1RequestsCustomGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Создать универсальную заявку.
     * ## Создать универсальную заявку.   Цена будет округлена на до 0,01$   Роли которые могут работать с заявками клиент, фрилансер и супервайзер  Проверки: пока нет проверки (Цена за предложение не должно быть меньше установленного в админке.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject131} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2017} and HTTP response
     */
    apiV1RequestsCustomPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;
      return this.apiClient.callApi(
        '/api/v1/requests/custom/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Создать универсальную заявку.
     * ## Создать универсальную заявку.   Цена будет округлена на до 0,01$   Роли которые могут работать с заявками клиент, фрилансер и супервайзер  Проверки: пока нет проверки (Цена за предложение не должно быть меньше установленного в админке.)
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject131} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2017}
     */
    apiV1RequestsCustomPost(opts) {
      return this.apiV1RequestsCustomPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить список заявок
     * Метод должен выдавать заявки в зависимости от query params.   
     * @param {module:model/String} kind Виды заявок:             VACANT - все заявки со статусом TO_PUBLISH и IN_PROCESS, + должны быть свободные слоты для предложений.             Фильтрует по ролям доступных для заявки.             Срыты заявки созданые тем кто вызвал данный метод.             MY - все заявки созданные тем кто вызывает метод,               countProposalsByStatuses: {                 allProposals: - предложения со статусами CREATED,OFFER_CONDITIONS_REJECTED,OFFER_CONDITIONS_CORRECTED,OFFER_CONDITIONS_ACCEPTED,READY_TO_VERIFY,VERIFYING_BY_SUPERVISOR,TO_CORRECT,CORRECTED,ACCEPTED_BY_CLIENT,ACCEPTED_BY_SUPERVISOR,                 waitedProposals: - предложения со статусами READY_TO_VERIFY,                 atWorkProposals: - предложения со статусами OFFER_CONDITIONS_ACCEPTED,READY_TO_VERIFY,VERIFYING_BY_SUPERVISOR,TO_CORRECT,CORRECTED,                 verifyingProposals: - предложения со статусами VERIFYING_BY_SUPERVISOR,                 acceptedProposals: - предложения со статусами ACCEPTED_BY_CLIENT,ACCEPTED_BY_SUPERVISOR               }             PICKUPED_BY_ME - все заявки где числится как исполнитель тот кто вызывает метод,             ALL - абсолютно все заявки, без исключения,             ASSIGNED_TO_ME - пока не реализовано.
     * @param {Object} opts Optional parameters
     * @param {String} opts.typeTask Спецификация для запроса
     * @param {String} opts.productId Гуид продукта
     * @param {String} opts.filters                Возможные поля: asin:, amazonTitle, skusByClient, orderHumanFriendlyId, trackNumberText, orderItem, humanFriendlyId               Поиск для полей продукта идет через схему Задача -> Коробка -> Айтем коробки -> Продукт               Поиск для полей заказа идет через схему Задача -> Коробка -> Айтем коробки -> Заказ               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]=some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]=some_title;or[1][asin][$eq]=some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк             
     * @param {Number} opts.limit Лимит записей для пагинации (default to 10.0)
     * @param {Number} opts.offset Смещение для пагинации (default to 0.0)
     * @param {String} opts.sortField Название поля
     * @param {module:model/String} opts.sortType Тип сортировки
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20062} and HTTP response
     */
    apiV1RequestsGetWithHttpInfo(kind, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling apiV1RequestsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'kind': kind,
        'typeTask': opts['typeTask'],
        'productId': opts['productId'],
        'filters': opts['filters'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortType': opts['sortType']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20062;
      return this.apiClient.callApi(
        '/api/v1/requests/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить список заявок
     * Метод должен выдавать заявки в зависимости от query params.   
     * @param {module:model/String} kind Виды заявок:             VACANT - все заявки со статусом TO_PUBLISH и IN_PROCESS, + должны быть свободные слоты для предложений.             Фильтрует по ролям доступных для заявки.             Срыты заявки созданые тем кто вызвал данный метод.             MY - все заявки созданные тем кто вызывает метод,               countProposalsByStatuses: {                 allProposals: - предложения со статусами CREATED,OFFER_CONDITIONS_REJECTED,OFFER_CONDITIONS_CORRECTED,OFFER_CONDITIONS_ACCEPTED,READY_TO_VERIFY,VERIFYING_BY_SUPERVISOR,TO_CORRECT,CORRECTED,ACCEPTED_BY_CLIENT,ACCEPTED_BY_SUPERVISOR,                 waitedProposals: - предложения со статусами READY_TO_VERIFY,                 atWorkProposals: - предложения со статусами OFFER_CONDITIONS_ACCEPTED,READY_TO_VERIFY,VERIFYING_BY_SUPERVISOR,TO_CORRECT,CORRECTED,                 verifyingProposals: - предложения со статусами VERIFYING_BY_SUPERVISOR,                 acceptedProposals: - предложения со статусами ACCEPTED_BY_CLIENT,ACCEPTED_BY_SUPERVISOR               }             PICKUPED_BY_ME - все заявки где числится как исполнитель тот кто вызывает метод,             ALL - абсолютно все заявки, без исключения,             ASSIGNED_TO_ME - пока не реализовано.
     * @param {Object} opts Optional parameters
     * @param {String} opts.typeTask Спецификация для запроса
     * @param {String} opts.productId Гуид продукта
     * @param {String} opts.filters                Возможные поля: asin:, amazonTitle, skusByClient, orderHumanFriendlyId, trackNumberText, orderItem, humanFriendlyId               Поиск для полей продукта идет через схему Задача -> Коробка -> Айтем коробки -> Продукт               Поиск для полей заказа идет через схему Задача -> Коробка -> Айтем коробки -> Заказ               2 варианта использования:                 1. Фильтр по одному полю:                   [amazonTitle][$eq]=some_title                 2. Фильтр по нескольким полям:                   or[0][amazonTitle][$eq]=some_title;or[1][asin][$eq]=some_asin                     Возвращает партии с коробками с продуктами, в которых amazonTitle равен some_title или asin равен some_asin               2 оператора совпадения:                 $eq - полное совпадение, нечувствителен к регистру                 $contains - наличие данной подстроки в поле, нечувствителен к регистру, предназначен только для строк             
     * @param {Number} opts.limit Лимит записей для пагинации (default to 10.0)
     * @param {Number} opts.offset Смещение для пагинации (default to 0.0)
     * @param {String} opts.sortField Название поля
     * @param {module:model/String} opts.sortType Тип сортировки
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20062}
     */
    apiV1RequestsGet(kind, opts) {
      return this.apiV1RequestsGetWithHttpInfo(kind, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Получить заявки с определенным продуктом и типом задания
     * Получить заявки с определенным продуктом и типом задания
     * @param {String} guid GUID в БД
     * @param {Number} typeTask Тип задачи заявки
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20061>} and HTTP response
     */
    apiV1RequestsGetExistingRequestsTypeTaskGuidGetWithHttpInfo(guid, typeTask, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGetExistingRequestsTypeTaskGuidGet");
      }
      // verify the required parameter 'typeTask' is set
      if (typeTask === undefined || typeTask === null) {
        throw new Error("Missing the required parameter 'typeTask' when calling apiV1RequestsGetExistingRequestsTypeTaskGuidGet");
      }

      let pathParams = {
        'guid': guid,
        'typeTask': typeTask
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20061];
      return this.apiClient.callApi(
        '/api/v1/requests/get_existing_requests/{typeTask}/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Получить заявки с определенным продуктом и типом задания
     * Получить заявки с определенным продуктом и типом задания
     * @param {String} guid GUID в БД
     * @param {Number} typeTask Тип задачи заявки
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20061>}
     */
    apiV1RequestsGetExistingRequestsTypeTaskGuidGet(guid, typeTask, opts) {
      return this.apiV1RequestsGetExistingRequestsTypeTaskGuidGetWithHttpInfo(guid, typeTask, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Прервать прием предложений.
     * ## Прервать прием предложений.  При вызове этого метода клиент прекращает прием предложений, статус меняется на FORBID_NEW_PROPOSALS  Проверки: Только владелец заявки может вызывать данный метод Только для заявок  со статусами PUBLISHED, IN_PROGRESS
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject100} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsGuidAbortPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGuidAbortPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/{guid}/abort', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Прервать прием предложений.
     * ## Прервать прием предложений.  При вызове этого метода клиент прекращает прием предложений, статус меняется на FORBID_NEW_PROPOSALS  Проверки: Только владелец заявки может вызывать данный метод Только для заявок  со статусами PUBLISHED, IN_PROGRESS
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject100} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsGuidAbortPatch(guid, opts) {
      return this.apiV1RequestsGuidAbortPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Отменить заявку создателем
     * ## УОтменить заявку создателем.    Заявку можно отменить только если статус DRAFT или PUBLISHED. Только владелец может отменить заявку  
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsGuidCancelByCreatorPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGuidCancelByCreatorPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/{guid}/cancel_by_creator', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Отменить заявку создателем
     * ## УОтменить заявку создателем.    Заявку можно отменить только если статус DRAFT или PUBLISHED. Только владелец может отменить заявку  
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsGuidCancelByCreatorPatch(guid, opts) {
      return this.apiV1RequestsGuidCancelByCreatorPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # (возможно данные метод не нужен) Удалить заявку по его GUID.
     * ## Удалить заявку по его GUIDD.    Заявку можно удалить только если статус DRAFT или PUBLISHED. Только владелец может удалить заявку  
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # (возможно данные метод не нужен) Удалить заявку по его GUID.
     * ## Удалить заявку по его GUIDD.    Заявку можно удалить только если статус DRAFT или PUBLISHED. Только владелец может удалить заявку  
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsGuidDelete(guid, opts) {
      return this.apiV1RequestsGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Этот метод вызывает тот кто бронирует место в заявке.
     * ## Этот метод вызывает тот кто бронирует место в заявке.  При первом бронировании статус заявка меняется с PUBLISHED на IN_PROGRESS. В зависимости от типа заявки создается предложение и его детали, статус предложения CREATED  ## Создается чат и добавляется клиент и исполнитель  Проверки: Можно бронировать только заявки со статусами: PUBLISHED, IN_PROCESS Владелец заявки не может отправлять себе предложения.  Если роль пользователя нет в списке roles заявки, то не может забронировать Если есть ограничение по количеству предложений maxAmountOfProposals !== null  Количество активных (принятых + в работе) предложений меньше чем ограничение клиента на эту заявку. Активные предложения имеют статусы:  CREATED OFFER_CONDITIONS_REJECTED OFFER_CONDITIONS_CORRECTED OFFER_CONDITIONS_ACCEPTED READY_TO_VERIFY VERIFYING_BY_SUPERVISOR TO_CORRECT CORRECTED ACCEPTED_BY_CLIENT ACCEPTED_BY_SUPERVISOR  Если у данной заявки есть незавершенные предложения от данного пользователя Незавершенные предложения имеют статусы:  CREATED OFFER_CONDITIONS_REJECTED OFFER_CONDITIONS_CORRECTED OFFER_CONDITIONS_ACCEPTED READY_TO_VERIFY VERIFYING_BY_SUPERVISOR TO_CORRECT CORRECTED
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject99} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20112} and HTTP response
     */
    apiV1RequestsGuidPickupPostWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGuidPickupPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;
      return this.apiClient.callApi(
        '/api/v1/requests/{guid}/pickup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Этот метод вызывает тот кто бронирует место в заявке.
     * ## Этот метод вызывает тот кто бронирует место в заявке.  При первом бронировании статус заявка меняется с PUBLISHED на IN_PROGRESS. В зависимости от типа заявки создается предложение и его детали, статус предложения CREATED  ## Создается чат и добавляется клиент и исполнитель  Проверки: Можно бронировать только заявки со статусами: PUBLISHED, IN_PROCESS Владелец заявки не может отправлять себе предложения.  Если роль пользователя нет в списке roles заявки, то не может забронировать Если есть ограничение по количеству предложений maxAmountOfProposals !== null  Количество активных (принятых + в работе) предложений меньше чем ограничение клиента на эту заявку. Активные предложения имеют статусы:  CREATED OFFER_CONDITIONS_REJECTED OFFER_CONDITIONS_CORRECTED OFFER_CONDITIONS_ACCEPTED READY_TO_VERIFY VERIFYING_BY_SUPERVISOR TO_CORRECT CORRECTED ACCEPTED_BY_CLIENT ACCEPTED_BY_SUPERVISOR  Если у данной заявки есть незавершенные предложения от данного пользователя Незавершенные предложения имеют статусы:  CREATED OFFER_CONDITIONS_REJECTED OFFER_CONDITIONS_CORRECTED OFFER_CONDITIONS_ACCEPTED READY_TO_VERIFY VERIFYING_BY_SUPERVISOR TO_CORRECT CORRECTED
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject99} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20112}
     */
    apiV1RequestsGuidPickupPost(guid, opts) {
      return this.apiV1RequestsGuidPickupPostWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Опубликовать заявку.
     * ## Опубликовать заявку.   Статус поменяется на PUBLISHED. ## Важно!! Для избежания проблем связанных с изменением состояния заявки, с того момента когда пользователь  ## получил детализацию из калькулятора стоимости заявки и до момента вызова данного метода,  для подтверждения нужно вернуть totalCost Проверки:  Публиковать можно только заявки со статусом DRAFT и FORBID_NEW_PROPOSALS. Только владелец может опубликовать. Проверка изменения totalCost
     * @param {String} guid GUID в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject96} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsGuidToPublishPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGuidToPublishPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/{guid}/to_publish', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Опубликовать заявку.
     * ## Опубликовать заявку.   Статус поменяется на PUBLISHED. ## Важно!! Для избежания проблем связанных с изменением состояния заявки, с того момента когда пользователь  ## получил детализацию из калькулятора стоимости заявки и до момента вызова данного метода,  для подтверждения нужно вернуть totalCost Проверки:  Публиковать можно только заявки со статусом DRAFT и FORBID_NEW_PROPOSALS. Только владелец может опубликовать. Проверка изменения totalCost
     * @param {String} guid GUID в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject96} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsGuidToPublishPatch(guid, opts) {
      return this.apiV1RequestsGuidToPublishPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Обновить дедлайн, вернуть из статуса EXPIRED
     * Обновить дедлайн, вернуть из статуса EXPIRED
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject98} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsGuidUpdateDeadlinePatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsGuidUpdateDeadlinePatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/{guid}/update_deadline', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Обновить дедлайн, вернуть из статуса EXPIRED
     * Обновить дедлайн, вернуть из статуса EXPIRED
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject98} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsGuidUpdateDeadlinePatch(guid, opts) {
      return this.apiV1RequestsGuidUpdateDeadlinePatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Связать заявку с идеей, поле, которое не отправляется сетится на наллб если ничего не отправлено - на налл сетятся оба
     * ## Связать заявку с идеей
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject103} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsIdeasGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsIdeasGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/ideas/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Связать заявку с идеей, поле, которое не отправляется сетится на наллб если ничего не отправлено - на налл сетятся оба
     * ## Связать заявку с идеей
     * @param {String} guid ID идеи
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject103} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsIdeasGuidPatch(guid, opts) {
      return this.apiV1RequestsIdeasGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Удалить исходник.
     * ## Удалить исходник
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsMediaGuidDeleteWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsMediaGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/media/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Удалить исходник.
     * ## Удалить исходник
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsMediaGuidDelete(guid, opts) {
      return this.apiV1RequestsMediaGuidDeleteWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Получить медиа.
     * ## Получить медиа
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse20064>} and HTTP response
     */
    apiV1RequestsMediaGuidGetWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsMediaGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse20064];
      return this.apiClient.callApi(
        '/api/v1/requests/media/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Получить медиа.
     * ## Получить медиа
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse20064>}
     */
    apiV1RequestsMediaGuidGet(guid, opts) {
      return this.apiV1RequestsMediaGuidGetWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Изменить медиа.
     * ## Изменить медиа
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject101} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsMediaGuidPatchWithHttpInfo(guid, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1RequestsMediaGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/media/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Изменить медиа.
     * ## Изменить медиа
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject101} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsMediaGuidPatch(guid, opts) {
      return this.apiV1RequestsMediaGuidPatchWithHttpInfo(guid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Изменить медиа.
     * ## Изменить медиа
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {Array.<module:model/InlineObject5>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsMediaManyPatchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/media/many', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Изменить медиа.
     * ## Изменить медиа
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {Array.<module:model/InlineObject5>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsMediaManyPatch(opts) {
      return this.apiV1RequestsMediaManyPatchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * #  Создать медиа.
     * ## Создать медиа
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject102} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20113} and HTTP response
     */
    apiV1RequestsMediaPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20113;
      return this.apiClient.callApi(
        '/api/v1/requests/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * #  Создать медиа.
     * ## Создать медиа
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject102} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20113}
     */
    apiV1RequestsMediaPost(opts) {
      return this.apiV1RequestsMediaPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * # Изменить uploadedToListing
     * # Изменить uploadedToListing
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject97} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    apiV1RequestsUploadedToListingPatchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/requests/uploaded_to_listing', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * # Изменить uploadedToListing
     * # Изменить uploadedToListing
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding 
     * @param {module:model/InlineObject97} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    apiV1RequestsUploadedToListingPatch(opts) {
      return this.apiV1RequestsUploadedToListingPatchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
