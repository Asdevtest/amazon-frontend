/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject12 from '../model/InlineObject12';
import InlineObject13 from '../model/InlineObject13';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse500 from '../model/InlineResponse500';
import Null from '../model/Null';

/**
* ProductForTestOnly service.
* @module api/ProductForTestOnlyApi
* @version v0.0.1
*/
export default class ProductForTestOnlyApi {

    /**
    * Constructs a new ProductForTestOnlyApi. 
    * @alias module:api/ProductForTestOnlyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1ProductsIdDelete operation.
     * @callback module:api/ProductForTestOnlyApi~apiV1ProductsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить продукт.
     * ## Удалить продукт.   
     * @param {String} id GUID продукта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/ProductForTestOnlyApi~apiV1ProductsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ProductsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ProductsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsIdGet operation.
     * @callback module:api/ProductForTestOnlyApi~apiV1ProductsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить продукт по GUID.
     * ## Получить продукт по GUID.   
     * @param {String} id GUID продукта в БД.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/ProductForTestOnlyApi~apiV1ProductsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    apiV1ProductsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ProductsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsIdPatch operation.
     * @callback module:api/ProductForTestOnlyApi~apiV1ProductsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить продукт.
     * ## Изменить продукт.   
     * @param {String} id GUID продукта, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject13} opts.InlineObject13 
     * @param {module:api/ProductForTestOnlyApi~apiV1ProductsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ProductsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject13'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ProductsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsPost operation.
     * @callback module:api/ProductForTestOnlyApi~apiV1ProductsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить новый продукт.
     * ## Добавить новый продукт.   
     * @param {module:model/InlineObject12} InlineObject12 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/ProductForTestOnlyApi~apiV1ProductsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1ProductsPost(InlineObject12, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject12;
      // verify the required parameter 'InlineObject12' is set
      if (InlineObject12 === undefined || InlineObject12 === null) {
        throw new Error("Missing the required parameter 'InlineObject12' when calling apiV1ProductsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/products/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
