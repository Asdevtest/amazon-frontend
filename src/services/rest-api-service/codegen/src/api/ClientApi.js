/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineObject13 from '../model/InlineObject13';
import InlineObject14 from '../model/InlineObject14';
import InlineObject15 from '../model/InlineObject15';
import InlineObject16 from '../model/InlineObject16';
import InlineObject17 from '../model/InlineObject17';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2012 from '../model/InlineResponse2012';
import InlineResponse2013 from '../model/InlineResponse2013';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse409 from '../model/InlineResponse409';
import InlineResponse500 from '../model/InlineResponse500';

/**
* Client service.
* @module api/ClientApi
* @version v0.0.1
*/
export default class ClientApi {
  /**
    * Constructs a new ClientApi. 
    * @alias module:api/ClientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
     * # Получить партии.
     * ## Получить партии.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2003>} and HTTP response
     */
  apiV1ClientsBatchesGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2003 ];
    return this.apiClient.callApi(
      '/api/v1/clients/batches',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить партии.
     * ## Получить партии.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2003>}
     */
  apiV1ClientsBatchesGet(opts) {
    return this.apiV1ClientsBatchesGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Оплатить товары.
     * ## Оплатить товары.   ## ВНИМАНИЕ: Данный эндпоинт не выбросит ошибку если один из GUID будет валидным но товара с таким GUID    ## ВНИМАНИЕ: не будет найден в базе.    ## ВНИМАНИЕ: Эта оплата товара не имеет ничего общего с оплатой в блоке байер.    ## ВНИМАНИЕ: Здесь оплата заполняет значения полей paidby, paidat в Продукте.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject14} opts.InlineObject14 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1ClientsMakePaymentsPostWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['InlineObject14'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/clients/make_payments',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Оплатить товары.
     * ## Оплатить товары.   ## ВНИМАНИЕ: Данный эндпоинт не выбросит ошибку если один из GUID будет валидным но товара с таким GUID    ## ВНИМАНИЕ: не будет найден в базе.    ## ВНИМАНИЕ: Эта оплата товара не имеет ничего общего с оплатой в блоке байер.    ## ВНИМАНИЕ: Здесь оплата заполняет значения полей paidby, paidat в Продукте.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject14} opts.InlineObject14 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1ClientsMakePaymentsPost(opts) {
    return this.apiV1ClientsMakePaymentsPostWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить заказы текущего клиента.
     * ## Получить заказы текущего клиента.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2001>} and HTTP response
     */
  apiV1ClientsOrdersGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2001 ];
    return this.apiClient.callApi(
      '/api/v1/clients/orders',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить заказы текущего клиента.
     * ## Получить заказы текущего клиента.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2001>}
     */
  apiV1ClientsOrdersGet(opts) {
    return this.apiV1ClientsOrdersGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить заказ по его GUID.
     * ## Получить заказ по его GUID.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1ClientsOrdersGuidDeleteWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1ClientsOrdersGuidDelete"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/clients/orders/{guid}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить заказ по его GUID.
     * ## Получить заказ по его GUID.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1ClientsOrdersGuidDelete(guid, opts) {
    return this.apiV1ClientsOrdersGuidDeleteWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Получить заказ по его GUID.
     * ## Получить заказ по его GUID.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
  apiV1ClientsOrdersGuidGetWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1ClientsOrdersGuidGet"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = InlineResponse2001;
    return this.apiClient.callApi(
      '/api/v1/clients/orders/{guid}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить заказ по его GUID.
     * ## Получить заказ по его GUID.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
  apiV1ClientsOrdersGuidGet(guid, opts) {
    return this.apiV1ClientsOrdersGuidGetWithHttpInfo(guid, opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Внести изменения в заказ.
     * ## Внести изменения в заказ.   ## Обратить внимание - внутри заказа нельзя отдельно редактировать атрибуты товара.   ## Если изменился какой-то они товар, все равно нужно передать полностью новый массив с .   ## с товарами.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID заказа, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject16} opts.InlineObject16 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1ClientsOrdersGuidPatchWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = opts['InlineObject16'];
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1ClientsOrdersGuidPatch"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/clients/orders/{guid}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Внести изменения в заказ.
     * ## Внести изменения в заказ.   ## Обратить внимание - внутри заказа нельзя отдельно редактировать атрибуты товара.   ## Если изменился какой-то они товар, все равно нужно передать полностью новый массив с .   ## с товарами.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID заказа, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject16} opts.InlineObject16 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1ClientsOrdersGuidPatch(guid, opts) {
    return this.apiV1ClientsOrdersGuidPatchWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Создать заказ.
     * ## Создать заказ.   ### Внимание ДИЧЬ!!! по коду если status установлен 1 то в коде он меняется на 10    ### Внимание ДИЧЬ!!! в комментариях по статусу есть то, что он через 10 минут должен стать 10.   ### Внимание ДИЧЬ!!! Если нужно так, то надо запилить планировщик задач и дергать его через крон.   ### описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {module:model/InlineObject15} InlineObject15 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2013} and HTTP response
     */
  apiV1ClientsOrdersPostWithHttpInfo(InlineObject15, opts) {
    opts = opts || {};
    let postBody = InlineObject15;
    // verify the required parameter 'InlineObject15' is set
    if (InlineObject15 === undefined || InlineObject15 === null) {
      throw new Error(
        "Missing the required parameter 'InlineObject15' when calling apiV1ClientsOrdersPost"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = InlineResponse2013;
    return this.apiClient.callApi(
      '/api/v1/clients/orders',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Создать заказ.
     * ## Создать заказ.   ### Внимание ДИЧЬ!!! по коду если status установлен 1 то в коде он меняется на 10    ### Внимание ДИЧЬ!!! в комментариях по статусу есть то, что он через 10 минут должен стать 10.   ### Внимание ДИЧЬ!!! Если нужно так, то надо запилить планировщик задач и дергать его через крон.   ### описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {module:model/InlineObject15} InlineObject15 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2013}
     */
  apiV1ClientsOrdersPost(InlineObject15, opts) {
    return this.apiV1ClientsOrdersPostWithHttpInfo(InlineObject15, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Внести изменения в товар.
     * ## Внести изменения в товар.   
     * @param {String} guid GUID заказа, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject13} opts.InlineObject13 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1ClientsProductsGuidPatchWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = opts['InlineObject13'];
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1ClientsProductsGuidPatch"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/clients/products/{guid}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Внести изменения в товар.
     * ## Внести изменения в товар.   
     * @param {String} guid GUID заказа, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject13} opts.InlineObject13 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1ClientsProductsGuidPatch(guid, opts) {
    return this.apiV1ClientsProductsGuidPatchWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список товаров данного клиента.
     * ## Получить список товаров данного клиента.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
  apiV1ClientsProductsMyGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse200 ];
    return this.apiClient.callApi(
      '/api/v1/clients/products/my',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список товаров данного клиента.
     * ## Получить список товаров данного клиента.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
  apiV1ClientsProductsMyGet(opts) {
    return this.apiV1ClientsProductsMyGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список товаров оплаченных данного клиента.
     * ## Получить список товаров оплаченных данного клиента.   ## Думаю это УСТАРЕВШИЙ метод. Он опирается на dirchecked.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
  apiV1ClientsProductsPaidGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse200 ];
    return this.apiClient.callApi(
      '/api/v1/clients/products/paid',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список товаров оплаченных данного клиента.
     * ## Получить список товаров оплаченных данного клиента.   ## Думаю это УСТАРЕВШИЙ метод. Он опирается на dirchecked.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
  apiV1ClientsProductsPaidGet(opts) {
    return this.apiV1ClientsProductsPaidGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Взять товар в работу.
     * ## Взять товар в работу.   
     * @param {String} guid GUID продукта в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1ClientsProductsPickupGuidPostWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1ClientsProductsPickupGuidPost"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/clients/products/pickup/{guid}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Взять товар в работу.
     * ## Взять товар в работу.   
     * @param {String} guid GUID продукта в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1ClientsProductsPickupGuidPost(guid, opts) {
    return this.apiV1ClientsProductsPickupGuidPostWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Получить список вакантных товаров.
     * ## Получить список  вакантных товаров.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
  apiV1ClientsProductsVacGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse200 ];
    return this.apiClient.callApi(
      '/api/v1/clients/products/vac',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Получить список вакантных товаров.
     * ## Получить список  вакантных товаров.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
  apiV1ClientsProductsVacGet(opts) {
    return this.apiV1ClientsProductsVacGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Показать все задачи данного пользователя.
     * ## Показать все задачи данного пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2005>} and HTTP response
     */
  apiV1ClientsTasksGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = [ InlineResponse2005 ];
    return this.apiClient.callApi(
      '/api/v1/clients/tasks',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Показать все задачи данного пользователя.
     * ## Показать все задачи данного пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2005>}
     */
  apiV1ClientsTasksGet(opts) {
    return this.apiV1ClientsTasksGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }

  /**
     * # Удалить задачу.
     * ## Удалить задачу. !!! Можно удалять только задачи со статусом \"0\".   
     * @param {String} guid GUID удаляемого объекта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  apiV1ClientsTasksGuidDeleteWithHttpInfo(guid, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'guid' is set
    if (guid === undefined || guid === null) {
      throw new Error(
        "Missing the required parameter 'guid' when calling apiV1ClientsTasksGuidDelete"
      );
    }

    let pathParams = {
      guid: guid
    };
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/api/v1/clients/tasks/{guid}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Удалить задачу.
     * ## Удалить задачу. !!! Можно удалять только задачи со статусом \"0\".   
     * @param {String} guid GUID удаляемого объекта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  apiV1ClientsTasksGuidDelete(guid, opts) {
    return this.apiV1ClientsTasksGuidDeleteWithHttpInfo(guid, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * # Создать задачу.
     * ## Создать задачу.   
     * @param {module:model/InlineObject17} InlineObject17 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
  apiV1ClientsTasksPostWithHttpInfo(InlineObject17, opts) {
    opts = opts || {};
    let postBody = InlineObject17;
    // verify the required parameter 'InlineObject17' is set
    if (InlineObject17 === undefined || InlineObject17 === null) {
      throw new Error(
        "Missing the required parameter 'InlineObject17' when calling apiV1ClientsTasksPost"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [ 'application/json' ];
    let accepts = [ 'text/html' ];
    let returnType = InlineResponse2012;
    return this.apiClient.callApi(
      '/api/v1/clients/tasks',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * # Создать задачу.
     * ## Создать задачу.   
     * @param {module:model/InlineObject17} InlineObject17 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
  apiV1ClientsTasksPost(InlineObject17, opts) {
    return this.apiV1ClientsTasksPostWithHttpInfo(InlineObject17, opts).then(function(
      response_and_data
    ){
      return response_and_data.data;
    });
  }

  /**
     * Получить баланс для клиента.
     * Получить баланс для клиента.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
  apiV1ClientsPaymentsMyBalanceGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Accept-Encoding': opts['Accept_Encoding']
    };
    let formParams = {};

    let authNames = [ 'AccessTokenBearer' ];
    let contentTypes = [];
    let accepts = [ 'text/html' ];
    let returnType = 'Number';
    return this.apiClient.callApi(
      '/api/v1/clients/payments/my-balance',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
     * Получить баланс для клиента.
     * Получить баланс для клиента.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
  apiV1ClientsPaymentsMyBalanceGet(opts) {
    return this.apiV1ClientsPaymentsMyBalanceGetWithHttpInfo(opts).then(function(response_and_data){
      return response_and_data.data;
    });
  }
}
