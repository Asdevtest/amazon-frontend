/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1AdminsGetNotPaidProductsCreatedby from '../model/ApiV1AdminsGetNotPaidProductsCreatedby';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject10 from '../model/InlineObject10';
import InlineObject11 from '../model/InlineObject11';
import InlineObject12 from '../model/InlineObject12';
import InlineObject13 from '../model/InlineObject13';
import InlineObject14 from '../model/InlineObject14';
import InlineObject15 from '../model/InlineObject15';
import InlineObject16 from '../model/InlineObject16';
import InlineObject17 from '../model/InlineObject17';
import InlineObject18 from '../model/InlineObject18';
import InlineObject19 from '../model/InlineObject19';
import InlineObject2 from '../model/InlineObject2';
import InlineObject20 from '../model/InlineObject20';
import InlineObject21 from '../model/InlineObject21';
import InlineObject22 from '../model/InlineObject22';
import InlineObject3 from '../model/InlineObject3';
import InlineObject4 from '../model/InlineObject4';
import InlineObject5 from '../model/InlineObject5';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineObject8 from '../model/InlineObject8';
import InlineObject9 from '../model/InlineObject9';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse2011 from '../model/InlineResponse2011';
import InlineResponse2012 from '../model/InlineResponse2012';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse403 from '../model/InlineResponse403';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse409 from '../model/InlineResponse409';
import InlineResponse500 from '../model/InlineResponse500';
import Null from '../model/Null';

/**
*  service.
* @module api/DefaultApi
* @version v0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1AdminsGetCheckingProductsGet operation.
     * @callback module:api/DefaultApi~apiV1AdminsGetCheckingProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров, которые находятся на проверке. 
     * ## Получить список товаров, которые находятся на проверке.   ## У таких товаров dircheckedby != null && paidat = null   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsGetCheckingProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1AdminsGetCheckingProductsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/admins/get_checking_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsGetNotPaidProductsGet operation.
     * @callback module:api/DefaultApi~apiV1AdminsGetNotPaidProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список не оплаченных товаров.
     * ## Получить список не оплаченных товаров.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsGetNotPaidProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1AdminsGetNotPaidProductsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/admins/get_not_paid_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsGetVacProductsGet operation.
     * @callback module:api/DefaultApi~apiV1AdminsGetVacProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров, которые ожидают проверку. 
     * ## Получить список товаров, которые ожидают проверку.   ## У таких товаров status = 0   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsGetVacProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1AdminsGetVacProductsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/admins/get_vac_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsGetWaitingProductsGet operation.
     * @callback module:api/DefaultApi~apiV1AdminsGetWaitingProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров, которые ожидают проверку. 
     * ## Получить список товаров, которые ожидают проверку.   ## У таких товаров status = 0   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsGetWaitingProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1AdminsGetWaitingProductsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/admins/get_waiting_products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsMakePaymentPost operation.
     * @callback module:api/DefaultApi~apiV1AdminsMakePaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Оплатить выбранные продукты.
     * ## Оплатить выбранные продукты.   ## ВНИМАНИЕ: нет проверки все ли guid корректны. По корректным GUID обновит. Битые заигнорит..   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject1} opts.InlineObject1 
     * @param {module:api/DefaultApi~apiV1AdminsMakePaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1AdminsMakePaymentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject1'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/admins/make_payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsPatchProductsGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1AdminsPatchProductsGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Внести изменения в продукт.
     * ## Внести изменения в продукт.   
     * @param {String} guid GUID продукта в БД.
     * @param {module:model/InlineObject} InlineObject 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsPatchProductsGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1AdminsPatchProductsGuidPatch(guid, InlineObject, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AdminsPatchProductsGuidPatch");
      }
      // verify the required parameter 'InlineObject' is set
      if (InlineObject === undefined || InlineObject === null) {
        throw new Error("Missing the required parameter 'InlineObject' when calling apiV1AdminsPatchProductsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/admins/patch_products/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsPickupItemGuidPost operation.
     * @callback module:api/DefaultApi~apiV1AdminsPickupItemGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Взять продукт на проверку.
     * ## Взять продукт на проверку.   
     * @param {String} guid GUID продукта в БД.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsPickupItemGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1AdminsPickupItemGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AdminsPickupItemGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/admins/pickup_item/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsUsersGet operation.
     * @callback module:api/DefaultApi~apiV1AdminsUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1AdminsGetNotPaidProductsCreatedby>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить всех пользователей.
     * ## Получить всех пользователей.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1AdminsGetNotPaidProductsCreatedby>}
     */
    apiV1AdminsUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsGetNotPaidProductsCreatedby];
      return this.apiClient.callApi(
        '/api/v1/admins/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsUsersGuidDelete operation.
     * @callback module:api/DefaultApi~apiV1AdminsUsersGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить пользователя.
     * ##  Изменить пользователя.  ##  Эндпоинт предназначен в большой степени для тестов. Удаление пользователя  ##  предполагалось логическим. Для этого в поле active нужно поставить false.   
     * @param {String} guid GUID продукта в БД.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1AdminsUsersGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1AdminsUsersGuidDelete(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AdminsUsersGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/admins/users/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminsUsersGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1AdminsUsersGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить пользователя.
     * ##  Изменить пользователя.  
     * @param {String} guid GUID продукта в БД.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject2} opts.InlineObject2 
     * @param {module:api/DefaultApi~apiV1AdminsUsersGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1AdminsUsersGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject2'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1AdminsUsersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/admins/users/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersBoxesGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1BuyersBoxesGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Изменить коробку с товаром.
     * ## Изменить коробку с товаром.  ## Выборка идет по GUID коробки и байера, кто ее создавал. Нельзя отредактировать чужую коробку.  
     * @param {String} guid GUID коробки, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject5} opts.InlineObject5 
     * @param {module:api/DefaultApi~apiV1BuyersBoxesGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1BuyersBoxesGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject5'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersBoxesGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/buyers/boxes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersBoxesMyGet operation.
     * @callback module:api/DefaultApi~apiV1BuyersBoxesMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2011>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Посмотреть мои коробки.
     * ## Посмотреть мои коробки.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersBoxesMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2011>}
     */
    apiV1BuyersBoxesMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2011];
      return this.apiClient.callApi(
        '/api/v1/buyers/boxes/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersBoxesPost operation.
     * @callback module:api/DefaultApi~apiV1BuyersBoxesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Создать коробку с товаром.
     * ## Создать коробку с товаром.  
     * @param {module:model/InlineObject4} InlineObject4 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersBoxesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1BuyersBoxesPost(InlineObject4, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject4;
      // verify the required parameter 'InlineObject4' is set
      if (InlineObject4 === undefined || InlineObject4 === null) {
        throw new Error("Missing the required parameter 'InlineObject4' when calling apiV1BuyersBoxesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/buyers/boxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersBoxesSendToStorekeeperGuidPost operation.
     * @callback module:api/DefaultApi~apiV1BuyersBoxesSendToStorekeeperGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Отправить коробку на обработку на склад.
     * ## Отправить коробку на обработку на склад.  ## Установит статус коробки в 20.   
     * @param {String} guid GUID коробки, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersBoxesSendToStorekeeperGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1BuyersBoxesSendToStorekeeperGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersBoxesSendToStorekeeperGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/buyers/boxes/send_to_storekeeper/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersOrdersGuidGet operation.
     * @callback module:api/DefaultApi~apiV1BuyersOrdersGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить конкретный заказ по его GUID.
     * ## Получить конкретный заказ по его GUID.   
     * @param {String} guid GUID заказа.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersOrdersGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    apiV1BuyersOrdersGuidGet(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersOrdersGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/api/v1/buyers/orders/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersOrdersGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1BuyersOrdersGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Редактировать заказ.
     * ## Редактировать заказ.   
     * @param {String} guid GUID заказа, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject3} opts.InlineObject3 
     * @param {module:api/DefaultApi~apiV1BuyersOrdersGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1BuyersOrdersGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject3'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersOrdersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/buyers/orders/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersOrdersMyGet operation.
     * @callback module:api/DefaultApi~apiV1BuyersOrdersMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список заказов текущего байера.
     * ## Получить список заказов текущего байера.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersOrdersMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    apiV1BuyersOrdersMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2001];
      return this.apiClient.callApi(
        '/api/v1/buyers/orders/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersOrdersPickupGuidPost operation.
     * @callback module:api/DefaultApi~apiV1BuyersOrdersPickupGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Закрепить заказ за байером. Взять его в работу.
     * ## Закрепить заказ за байером. Взять его в работу.  ##  На основании заказа НУЖНО СФОРМИРОВАТЬ коробки по кол-ву товаров в заказе.   ## Эндпоинт НЕ ВЕРНЕТ сформированные коробки что бы не плодить МАГИЮ или ГЛЮКИ.   ## Запросите закрепление заказа. Если операция пройдет успешно 204 - запросите создание коробки.   ## Следующим этапом сделаем возможность закреплять пачку заказов и пачку коробок готовить одним запросом. Но потом.   ## Текущая база не поддерживает транзакции.   
     * @param {String} guid GUID заказа, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersOrdersPickupGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1BuyersOrdersPickupGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersOrdersPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/buyers/orders/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersOrdersVacGet operation.
     * @callback module:api/DefaultApi~apiV1BuyersOrdersVacGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список свободных заказов.
     * ## Получить список свободных заказов.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersOrdersVacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    apiV1BuyersOrdersVacGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2001];
      return this.apiClient.callApi(
        '/api/v1/buyers/orders/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersProductsGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1BuyersProductsGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Внести изменения в продукт.
     * ## Внести изменения в продукт.  
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object.<String, {String: Object}>} request_body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersProductsGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1BuyersProductsGuidPatch(guid, request_body, opts, callback) {
      opts = opts || {};
      let postBody = request_body;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersProductsGuidPatch");
      }
      // verify the required parameter 'request_body' is set
      if (request_body === undefined || request_body === null) {
        throw new Error("Missing the required parameter 'request_body' when calling apiV1BuyersProductsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/buyers/products/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersProductsMyGet operation.
     * @callback module:api/DefaultApi~apiV1BuyersProductsMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров взятых на проверку супервайзером.
     * ## Получить список товаров взятых на проверку супервайзером.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersProductsMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1BuyersProductsMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/buyers/products/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersProductsPickupGuidPost operation.
     * @callback module:api/DefaultApi~apiV1BuyersProductsPickupGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Закрепить продукт за байером. Взять его в работу.
     * ## Закрепить продукт за байером. Взять его в работу.  
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersProductsPickupGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1BuyersProductsPickupGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1BuyersProductsPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/buyers/products/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BuyersProductsVacGet operation.
     * @callback module:api/DefaultApi~apiV1BuyersProductsVacGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список вакантных товаров.
     * ## Получить список вакантных товаров.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1BuyersProductsVacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1BuyersProductsVacGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/buyers/products/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsBoxesGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsBoxesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2003>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Показать все коробки.
     * ## Показать все коробки.   Клиент ничего не может сам делать с коробками. Только видеть их параметры.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsBoxesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2003>}
     */
    apiV1ClientsBoxesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2003];
      return this.apiClient.callApi(
        '/api/v1/clients/boxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsBoxesGuidGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsBoxesGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Показать коробку по GUID.
     * ## Показать коробку по GUID.   
     * @param {String} guid GUID коробки.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsBoxesGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    apiV1ClientsBoxesGuidGet(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsBoxesGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/api/v1/clients/boxes/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsMakePaymentsPost operation.
     * @callback module:api/DefaultApi~apiV1ClientsMakePaymentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Оплатить товары.
     * ## Оплатить товары.   ## ВНИМАНИЕ: Данный эндпоинт не выбросит ошибку если один из GUID будет валидным но товара с таким GUID    ## ВНИМАНИЕ: не будет найден в базе.    
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject7} opts.InlineObject7 
     * @param {module:api/DefaultApi~apiV1ClientsMakePaymentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ClientsMakePaymentsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject7'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/clients/make_payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsOrdersGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить заказы текущего директора.
     * ## Получить заказы текущего директора.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    apiV1ClientsOrdersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2001];
      return this.apiClient.callApi(
        '/api/v1/clients/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsOrdersGuidDelete operation.
     * @callback module:api/DefaultApi~apiV1ClientsOrdersGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить заказ по его GUID.
     * ## Получить заказ по его GUID.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsOrdersGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ClientsOrdersGuidDelete(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsOrdersGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/clients/orders/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsOrdersGuidGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsOrdersGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить заказ по его GUID.
     * ## Получить заказ по его GUID.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsOrdersGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    apiV1ClientsOrdersGuidGet(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsOrdersGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/api/v1/clients/orders/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsOrdersGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1ClientsOrdersGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Внести изменения в заказ.
     * ## Внести изменения в заказ.   ## Обратить внимание - внутри заказа нельзя отдельно редактировать атрибуты товара.   ## Если изменился какой-то они товар, все равно нужно передать полностью новый массив с .   ## с товарами.   ## описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {String} guid GUID заказа, который будет изменен
     * @param {module:model/InlineObject9} InlineObject9 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsOrdersGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ClientsOrdersGuidPatch(guid, InlineObject9, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject9;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsOrdersGuidPatch");
      }
      // verify the required parameter 'InlineObject9' is set
      if (InlineObject9 === undefined || InlineObject9 === null) {
        throw new Error("Missing the required parameter 'InlineObject9' when calling apiV1ClientsOrdersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/clients/orders/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsOrdersPost operation.
     * @callback module:api/DefaultApi~apiV1ClientsOrdersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Создать заказ.
     * ## Создать заказ.   ### Внимание ДИЧЬ!!! по коду если status установлен 1 то в коде он меняется на 10    ### Внимание ДИЧЬ!!! в комментариях по статусу есть то, что он через 10 минут должен стать 10.   ### Внимание ДИЧЬ!!! Если нужно так, то надо запилить планировщик задач и дергать его через крон.   ### описание поля status:       formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
     * @param {module:model/InlineObject8} InlineObject8 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsOrdersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1ClientsOrdersPost(InlineObject8, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject8;
      // verify the required parameter 'InlineObject8' is set
      if (InlineObject8 === undefined || InlineObject8 === null) {
        throw new Error("Missing the required parameter 'InlineObject8' when calling apiV1ClientsOrdersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/clients/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsProductsGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1ClientsProductsGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Внести изменения в товар.
     * ## Внести изменения в товар.   
     * @param {String} guid GUID заказа, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject6} opts.InlineObject6 
     * @param {module:api/DefaultApi~apiV1ClientsProductsGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ClientsProductsGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject6'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsProductsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/clients/products/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsProductsMyGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsProductsMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров данного директора.
     * ## Получить список товаров данного директора.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsProductsMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1ClientsProductsMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/clients/products/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsProductsPaidGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsProductsPaidGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров оплаченных данного директора.
     * ## Получить список товаров оплаченных данного директора.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsProductsPaidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1ClientsProductsPaidGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/clients/products/paid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsProductsPickupGuidPost operation.
     * @callback module:api/DefaultApi~apiV1ClientsProductsPickupGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Взять товар в работу.
     * ## Взять товар в работу.   
     * @param {String} guid GUID продукта в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsProductsPickupGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1ClientsProductsPickupGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsProductsPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/clients/products/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsProductsVacGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsProductsVacGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список вакантных товаров.
     * ## Получить список  вакантных товаров.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsProductsVacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1ClientsProductsVacGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/clients/products/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsTasksGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Показать все задачи данного пользователя.
     * ## Показать все задачи данного пользователя.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004>}
     */
    apiV1ClientsTasksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2004];
      return this.apiClient.callApi(
        '/api/v1/clients/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsTasksPost operation.
     * @callback module:api/DefaultApi~apiV1ClientsTasksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Создать задачу.
     * ## Создать задачу.   
     * @param {module:model/InlineObject11} InlineObject11 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsTasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1ClientsTasksPost(InlineObject11, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject11;
      // verify the required parameter 'InlineObject11' is set
      if (InlineObject11 === undefined || InlineObject11 === null) {
        throw new Error("Missing the required parameter 'InlineObject11' when calling apiV1ClientsTasksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/clients/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsUsersGet operation.
     * @callback module:api/DefaultApi~apiV1ClientsUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1AdminsGetNotPaidProductsCreatedby>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список пользователей.
     * ## Получить список пользователей.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ClientsUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1AdminsGetNotPaidProductsCreatedby>}
     */
    apiV1ClientsUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [ApiV1AdminsGetNotPaidProductsCreatedby];
      return this.apiClient.callApi(
        '/api/v1/clients/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ClientsUsersGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1ClientsUsersGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Изменить пользователя.
     * ## Изменить пользователя.  
     * @param {String} guid GUID пользователя.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject10} opts.InlineObject10 
     * @param {module:api/DefaultApi~apiV1ClientsUsersGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ClientsUsersGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject10'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ClientsUsersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/clients/users/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersCheckProductsIdGet operation.
     * @callback module:api/DefaultApi~apiV1ManagersCheckProductsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Проверить продукт по ID существует ли он в базе.
     * Проверить продукт по ID существует ли он в базе.  В базе id продукта (asin) должно быть уникально. База не даст завести дубль. Перед добавление продукта   нужно проверить, нет ли в базе уже продукта с таким ID   
     * @param {String} id id для проверки
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ManagersCheckProductsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    apiV1ManagersCheckProductsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ManagersCheckProductsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/api/v1/managers/check_products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersParseAmazonIdGet operation.
     * @callback module:api/DefaultApi~apiV1ManagersParseAmazonIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить данные о продукте с сайта Амазон по id(asin)
     * Получить данные о продукте с сайта Амазон по id(asin)  
     * @param {String} id id(asin) для проверки
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ManagersParseAmazonIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    apiV1ManagersParseAmazonIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ManagersParseAmazonIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/api/v1/managers/parse_amazon/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersParseSellercentralGet operation.
     * @callback module:api/DefaultApi~apiV1ManagersParseSellercentralGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить данные о продукте с SellerCentral
     * Получить данные о продукте с SellerCentral  
     * @param {Object} opts Optional parameters
     * @param {String} opts.id ASIN продукта
     * @param {Number} opts.price Цена продукта.
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ManagersParseSellercentralGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    apiV1ManagersParseSellercentralGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'price': opts['price']
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/api/v1/managers/parse_sellercentral', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersProductsGet operation.
     * @callback module:api/DefaultApi~apiV1ManagersProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список товаров созданных данным пользователем.
     * Получить список товаров созданных данным пользователем.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ManagersProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1ManagersProductsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/managers/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersProductsGuidDelete operation.
     * @callback module:api/DefaultApi~apiV1ManagersProductsGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить продукт.
     * ## Удалить продукт.   
     * @param {String} guid GUID продукта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ManagersProductsGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ManagersProductsGuidDelete(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ManagersProductsGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/managers/products/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersProductsGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1ManagersProductsGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * #  Изменить продукт.
     * ## Изменить продукт.   
     * @param {String} guid GUID продукта БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject13} opts.InlineObject13 
     * @param {module:api/DefaultApi~apiV1ManagersProductsGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ManagersProductsGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject13'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1ManagersProductsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/managers/products/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ManagersProductsPost operation.
     * @callback module:api/DefaultApi~apiV1ManagersProductsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Добавить новый продукт.
     * ## Добавить новый продукт.   
     * @param {module:model/InlineObject12} InlineObject12 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ManagersProductsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1ManagersProductsPost(InlineObject12, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject12;
      // verify the required parameter 'InlineObject12' is set
      if (InlineObject12 === undefined || InlineObject12 === null) {
        throw new Error("Missing the required parameter 'InlineObject12' when calling apiV1ManagersProductsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/managers/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsIdDelete operation.
     * @callback module:api/DefaultApi~apiV1ProductsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удалить продукт.
     * ## Удалить продукт.   
     * @param {String} id GUID продукта.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ProductsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ProductsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ProductsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsIdGet operation.
     * @callback module:api/DefaultApi~apiV1ProductsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить продукт по GUID.
     * ## Получить продукт по GUID.   
     * @param {String} id GUID продукта в БД.
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ProductsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    apiV1ProductsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ProductsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsIdPatch operation.
     * @callback module:api/DefaultApi~apiV1ProductsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменить продукт.
     * ## Изменить продукт.   
     * @param {String} id GUID продукта, который будет изменен
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject15} opts.InlineObject15 
     * @param {module:api/DefaultApi~apiV1ProductsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1ProductsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject15'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ProductsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ProductsPost operation.
     * @callback module:api/DefaultApi~apiV1ProductsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить новый продукт.
     * ## Добавить новый продукт.   
     * @param {module:model/InlineObject14} InlineObject14 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1ProductsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1ProductsPost(InlineObject14, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject14;
      // verify the required parameter 'InlineObject14' is set
      if (InlineObject14 === undefined || InlineObject14 === null) {
        throw new Error("Missing the required parameter 'InlineObject14' when calling apiV1ProductsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/products/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersBoxesGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersBoxesGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Изменить коробку с товаром.
     * ## Изменить коробку с товаром.  ## Выборка идет по GUID коробки и кладовщика/сборщика, кто ее подобрал. Нельзя отредактировать чужую коробку.  
     * @param {String} guid GUID коробки, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject16} opts.InlineObject16 
     * @param {module:api/DefaultApi~apiV1StorekeepersBoxesGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1StorekeepersBoxesGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject16'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersBoxesGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/storekeepers/boxes/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersBoxesMyGet operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersBoxesMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2007>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить коробки закрепленные за данным сборщиком..
     * ## Получить коробки закрепленные за данным сборщиком.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersBoxesMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2007>}
     */
    apiV1StorekeepersBoxesMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2007];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/boxes/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersBoxesPickupGuidPost operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersBoxesPickupGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Закрепить коробку за сборщиками.
     * ## Закрепить коробку за сборщиками.   
     * @param {String} guid GUID коробки, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersBoxesPickupGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1StorekeepersBoxesPickupGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersBoxesPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/storekeepers/boxes/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersBoxesVacGet operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersBoxesVacGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2007>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить коробки не закрепленные за сборщиками.
     * ## Получить коробки не закрепленные за сборщиками.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersBoxesVacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2007>}
     */
    apiV1StorekeepersBoxesVacGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2007];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/boxes/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersTasksGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersTasksGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Изменить задачу.
     * ## Изменить задачу. Здесь только статус.   
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {module:model/InlineObject17} InlineObject17 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersTasksGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1StorekeepersTasksGuidPatch(guid, InlineObject17, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject17;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksGuidPatch");
      }
      // verify the required parameter 'InlineObject17' is set
      if (InlineObject17 === undefined || InlineObject17 === null) {
        throw new Error("Missing the required parameter 'InlineObject17' when calling apiV1StorekeepersTasksGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersTasksMyGet operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersTasksMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2008>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить задачи закрепленные за данным сборщиком..
     * ## Получить задачи закрепленные за данным сборщиком.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersTasksMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2008>}
     */
    apiV1StorekeepersTasksMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2008];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersTasksPickupGuidPost operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersTasksPickupGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Закрепить задачу за сборщиком.
     * ## Закрепить задачу за сборщиком.   
     * @param {String} guid GUID задачи, которую мы хотим изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersTasksPickupGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1StorekeepersTasksPickupGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1StorekeepersTasksPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StorekeepersTasksVacGet operation.
     * @callback module:api/DefaultApi~apiV1StorekeepersTasksVacGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2008>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить задачи не закрепленные за сотрудниками склада.
     * ## Получить задачи не закрепленные за сотрудниками склада.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1StorekeepersTasksVacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2008>}
     */
    apiV1StorekeepersTasksVacGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2008];
      return this.apiClient.callApi(
        '/api/v1/storekeepers/tasks/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SupervisorsProductsGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1SupervisorsProductsGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Изменить статус и дать комментарий доя продукта.
     * ## Изменить статус и дать комментарий доя продукта.    Возможные статусы продукта.   newitem = 0,      tested = 1,       rjected = 2,      forfba = 3,       fbadone = 4,      fbaok = 5,        approved = 6,      decline = 7.    
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {module:model/InlineObject18} InlineObject18 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SupervisorsProductsGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1SupervisorsProductsGuidPatch(guid, InlineObject18, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject18;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SupervisorsProductsGuidPatch");
      }
      // verify the required parameter 'InlineObject18' is set
      if (InlineObject18 === undefined || InlineObject18 === null) {
        throw new Error("Missing the required parameter 'InlineObject18' when calling apiV1SupervisorsProductsGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/supervisors/products/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SupervisorsProductsMyGet operation.
     * @callback module:api/DefaultApi~apiV1SupervisorsProductsMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список товаров взятых на проверку супервайзером.
     * ## Получить список товаров взятых на проверку супервайзером.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SupervisorsProductsMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1SupervisorsProductsMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/supervisors/products/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SupervisorsProductsPickupGuidPost operation.
     * @callback module:api/DefaultApi~apiV1SupervisorsProductsPickupGuidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Закрепить продукт за супервайзером. Взять его в работу.
     * ## Закрепить продукт за супервайзером. Взять его в работу.  
     * @param {String} guid GUID продукта, который планируем изменить
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SupervisorsProductsPickupGuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1SupervisorsProductsPickupGuidPost(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SupervisorsProductsPickupGuidPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/supervisors/products/pickup/{guid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SupervisorsProductsVacGet operation.
     * @callback module:api/DefaultApi~apiV1SupervisorsProductsVacGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список вакантных товаров.
     * ## Получить список вакантных товаров.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SupervisorsProductsVacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    apiV1SupervisorsProductsVacGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/api/v1/supervisors/products/vac', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuppliersGet operation.
     * @callback module:api/DefaultApi~apiV1SuppliersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2009>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить список поставщиков.
     * ## Получить список поставщиков.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SuppliersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2009>}
     */
    apiV1SuppliersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = [InlineResponse2009];
      return this.apiClient.callApi(
        '/api/v1/suppliers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuppliersGuidDelete operation.
     * @callback module:api/DefaultApi~apiV1SuppliersGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Удалить поставщика.
     * ##  Удалить поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SuppliersGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1SuppliersGuidDelete(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SuppliersGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/suppliers/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuppliersGuidGet operation.
     * @callback module:api/DefaultApi~apiV1SuppliersGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получить одного поставщика.
     * ## Получить одного поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1SuppliersGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    apiV1SuppliersGuidGet(guid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SuppliersGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/api/v1/suppliers/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuppliersGuidPatch operation.
     * @callback module:api/DefaultApi~apiV1SuppliersGuidPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Null} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Изменить поставщика.
     * ## Изменить  поставщика.   
     * @param {String} guid GUID в сущности в БД
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject20} opts.InlineObject20 
     * @param {module:api/DefaultApi~apiV1SuppliersGuidPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Null}
     */
    apiV1SuppliersGuidPatch(guid, opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject20'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiV1SuppliersGuidPatch");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = Null;
      return this.apiClient.callApi(
        '/api/v1/suppliers/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuppliersPost operation.
     * @callback module:api/DefaultApi~apiV1SuppliersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Добавить нового поставщика.
     * ## Добавить нового поставщика.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:model/InlineObject19} opts.InlineObject19 
     * @param {module:api/DefaultApi~apiV1SuppliersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    apiV1SuppliersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['InlineObject19'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/api/v1/suppliers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1UsersInfoGet operation.
     * @callback module:api/DefaultApi~apiV1UsersInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1AdminsGetNotPaidProductsCreatedby} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить информацию от текущем пользователе.
     * ## Получить информацию от текущем пользователе.   
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1UsersInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1AdminsGetNotPaidProductsCreatedby}
     */
    apiV1UsersInfoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = ['AccessTokenBearer'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = ApiV1AdminsGetNotPaidProductsCreatedby;
      return this.apiClient.callApi(
        '/api/v1/users/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1UsersPost operation.
     * @callback module:api/DefaultApi~apiV1UsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1AdminsGetNotPaidProductsCreatedby} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание нового пользователя. Регистрация.
     * ## Создание нового пользователя. Регистрация.   
     * @param {module:model/InlineObject21} InlineObject21 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1UsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1AdminsGetNotPaidProductsCreatedby}
     */
    apiV1UsersPost(InlineObject21, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject21;
      // verify the required parameter 'InlineObject21' is set
      if (InlineObject21 === undefined || InlineObject21 === null) {
        throw new Error("Missing the required parameter 'InlineObject21' when calling apiV1UsersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = ApiV1AdminsGetNotPaidProductsCreatedby;
      return this.apiClient.callApi(
        '/api/v1/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1UsersSignInPost operation.
     * @callback module:api/DefaultApi~apiV1UsersSignInPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * # Получение токена авторизации.
     * ## Получение токена авторизации.   ## Время жизни токена 96 часов   
     * @param {module:model/InlineObject22} InlineObject22 
     * @param {Object} opts Optional parameters
     * @param {String} opts.Accept_Encoding  (default to 'gzip, deflate')
     * @param {module:api/DefaultApi~apiV1UsersSignInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2012}
     */
    apiV1UsersSignInPost(InlineObject22, opts, callback) {
      opts = opts || {};
      let postBody = InlineObject22;
      // verify the required parameter 'InlineObject22' is set
      if (InlineObject22 === undefined || InlineObject22 === null) {
        throw new Error("Missing the required parameter 'InlineObject22' when calling apiV1UsersSignInPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Encoding': opts['Accept_Encoding']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = InlineResponse2012;
      return this.apiClient.callApi(
        '/api/v1/users/sign_in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
