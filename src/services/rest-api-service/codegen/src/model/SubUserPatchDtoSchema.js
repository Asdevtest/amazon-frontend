/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubUserPatchDtoSchema model module.
 * @module model/SubUserPatchDtoSchema
 * @version 0.1.0
 */
class SubUserPatchDtoSchema {
    /**
     * Constructs a new <code>SubUserPatchDtoSchema</code>.
     * @alias module:model/SubUserPatchDtoSchema
     */
    constructor() { 
        
        SubUserPatchDtoSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubUserPatchDtoSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubUserPatchDtoSchema} obj Optional instance to populate.
     * @return {module:model/SubUserPatchDtoSchema} The populated <code>SubUserPatchDtoSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubUserPatchDtoSchema();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fba')) {
                obj['fba'] = ApiClient.convertToType(data['fba'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('permissionGroups')) {
                obj['permissionGroups'] = ApiClient.convertToType(data['permissionGroups'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Имя пользователя.
 * @member {String} name
 */
SubUserPatchDtoSchema.prototype['name'] = undefined;

/**
 * email
 * @member {String} email
 */
SubUserPatchDtoSchema.prototype['email'] = undefined;

/**
 * Флаг fba.
 * @member {Boolean} fba
 */
SubUserPatchDtoSchema.prototype['fba'] = undefined;

/**
 * Если истина - пользователь активен. Если нет - заблокирован админом.
 * @member {Boolean} active
 */
SubUserPatchDtoSchema.prototype['active'] = undefined;

/**
 * Массив permission-ов.
 * @member {Array.<String>} permissions
 */
SubUserPatchDtoSchema.prototype['permissions'] = undefined;

/**
 * Массив групп permission-ов.
 * @member {Array.<String>} permissionGroups
 */
SubUserPatchDtoSchema.prototype['permissionGroups'] = undefined;






export default SubUserPatchDtoSchema;

