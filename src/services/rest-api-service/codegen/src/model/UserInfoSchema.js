/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserInfoSchemaMasterUser from './UserInfoSchemaMasterUser';
import UserInfoSchemaNeedConfirmPriceChange from './UserInfoSchemaNeedConfirmPriceChange';
import UserInfoSchemaNeedUpdateTariff from './UserInfoSchemaNeedUpdateTariff';
import UserInfoSchemaPermissionGroups from './UserInfoSchemaPermissionGroups';
import UserInfoSchemaPermissions from './UserInfoSchemaPermissions';

/**
 * The UserInfoSchema model module.
 * @module model/UserInfoSchema
 * @version 0.1.0
 */
class UserInfoSchema {
    /**
     * Constructs a new <code>UserInfoSchema</code>.
     * @alias module:model/UserInfoSchema
     * @param name {String} Имя пользователя.
     */
    constructor(name) { 
        
        UserInfoSchema.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>UserInfoSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserInfoSchema} obj Optional instance to populate.
     * @return {module:model/UserInfoSchema} The populated <code>UserInfoSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserInfoSchema();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('fba')) {
                obj['fba'] = ApiClient.convertToType(data['fba'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('balanceFreeze')) {
                obj['balanceFreeze'] = ApiClient.convertToType(data['balanceFreeze'], 'Number');
            }
            if (data.hasOwnProperty('overdraft')) {
                obj['overdraft'] = ApiClient.convertToType(data['overdraft'], 'Number');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [UserInfoSchemaPermissions]);
            }
            if (data.hasOwnProperty('permissionGroups')) {
                obj['permissionGroups'] = ApiClient.convertToType(data['permissionGroups'], [UserInfoSchemaPermissionGroups]);
            }
            if (data.hasOwnProperty('masterUser')) {
                obj['masterUser'] = UserInfoSchemaMasterUser.constructFromObject(data['masterUser']);
            }
            if (data.hasOwnProperty('allowedRoles')) {
                obj['allowedRoles'] = ApiClient.convertToType(data['allowedRoles'], ['Number']);
            }
            if (data.hasOwnProperty('allowedStrategies')) {
                obj['allowedStrategies'] = ApiClient.convertToType(data['allowedStrategies'], ['Number']);
            }
            if (data.hasOwnProperty('canByMasterUser')) {
                obj['canByMasterUser'] = ApiClient.convertToType(data['canByMasterUser'], 'Boolean');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('needConfirmPriceChange')) {
                obj['needConfirmPriceChange'] = UserInfoSchemaNeedConfirmPriceChange.constructFromObject(data['needConfirmPriceChange']);
            }
            if (data.hasOwnProperty('needUpdateTariff')) {
                obj['needUpdateTariff'] = UserInfoSchemaNeedUpdateTariff.constructFromObject(data['needUpdateTariff']);
            }
            if (data.hasOwnProperty('purchaseOrderRequired')) {
                obj['purchaseOrderRequired'] = ApiClient.convertToType(data['purchaseOrderRequired'], ['String']);
            }
            if (data.hasOwnProperty('updatesOnIdeas')) {
                obj['updatesOnIdeas'] = ApiClient.convertToType(data['updatesOnIdeas'], 'Number');
            }
            if (data.hasOwnProperty('allowedSpec')) {
                obj['allowedSpec'] = ApiClient.convertToType(data['allowedSpec'], ['Number']);
            }
            if (data.hasOwnProperty('tasksNewAll')) {
                obj['tasksNewAll'] = ApiClient.convertToType(data['tasksNewAll'], 'Number');
            }
            if (data.hasOwnProperty('tasksAtProcessAll')) {
                obj['tasksAtProcessAll'] = ApiClient.convertToType(data['tasksAtProcessAll'], 'Number');
            }
            if (data.hasOwnProperty('tasksNewHigh')) {
                obj['tasksNewHigh'] = ApiClient.convertToType(data['tasksNewHigh'], 'Number');
            }
            if (data.hasOwnProperty('tasksAtProcessHigh')) {
                obj['tasksAtProcessHigh'] = ApiClient.convertToType(data['tasksAtProcessHigh'], 'Number');
            }
            if (data.hasOwnProperty('freeOrders')) {
                obj['freeOrders'] = ApiClient.convertToType(data['freeOrders'], 'Number');
            }
            if (data.hasOwnProperty('orders')) {
                obj['orders'] = ApiClient.convertToType(data['orders'], 'Number');
            }
            if (data.hasOwnProperty('pendingOrders')) {
                obj['pendingOrders'] = ApiClient.convertToType(data['pendingOrders'], 'Number');
            }
            if (data.hasOwnProperty('allOrders')) {
                obj['allOrders'] = ApiClient.convertToType(data['allOrders'], 'Number');
            }
            if (data.hasOwnProperty('pendingOrdersByDeadline')) {
                obj['pendingOrdersByDeadline'] = ApiClient.convertToType(data['pendingOrdersByDeadline'], 'Number');
            }
            if (data.hasOwnProperty('notPaid')) {
                obj['notPaid'] = ApiClient.convertToType(data['notPaid'], 'Number');
            }
            if (data.hasOwnProperty('readyForPayment')) {
                obj['readyForPayment'] = ApiClient.convertToType(data['readyForPayment'], 'Number');
            }
            if (data.hasOwnProperty('partiallyPaid')) {
                obj['partiallyPaid'] = ApiClient.convertToType(data['partiallyPaid'], 'Number');
            }
            if (data.hasOwnProperty('needTrackNumber')) {
                obj['needTrackNumber'] = ApiClient.convertToType(data['needTrackNumber'], 'Number');
            }
            if (data.hasOwnProperty('inbound')) {
                obj['inbound'] = ApiClient.convertToType(data['inbound'], 'Number');
            }
            if (data.hasOwnProperty('confirmationRequired')) {
                obj['confirmationRequired'] = ApiClient.convertToType(data['confirmationRequired'], 'Number');
            }
            if (data.hasOwnProperty('closedAndCanceled')) {
                obj['closedAndCanceled'] = ApiClient.convertToType(data['closedAndCanceled'], 'Number');
            }
            if (data.hasOwnProperty('allProducts')) {
                obj['allProducts'] = ApiClient.convertToType(data['allProducts'], 'Number');
            }
            if (data.hasOwnProperty('rejectedBySupervisor')) {
                obj['rejectedBySupervisor'] = ApiClient.convertToType(data['rejectedBySupervisor'], 'Number');
            }
            if (data.hasOwnProperty('onCheckWithSupervisor')) {
                obj['onCheckWithSupervisor'] = ApiClient.convertToType(data['onCheckWithSupervisor'], 'Number');
            }
            if (data.hasOwnProperty('atTheBuyerInWork')) {
                obj['atTheBuyerInWork'] = ApiClient.convertToType(data['atTheBuyerInWork'], 'Number');
            }
            if (data.hasOwnProperty('searchComplete')) {
                obj['searchComplete'] = ApiClient.convertToType(data['searchComplete'], 'Number');
            }
            if (data.hasOwnProperty('supplierWasNotFound')) {
                obj['supplierWasNotFound'] = ApiClient.convertToType(data['supplierWasNotFound'], 'Number');
            }
            if (data.hasOwnProperty('supplierPriceDoesNotFit')) {
                obj['supplierPriceDoesNotFit'] = ApiClient.convertToType(data['supplierPriceDoesNotFit'], 'Number');
            }
            if (data.hasOwnProperty('paidByTheClient')) {
                obj['paidByTheClient'] = ApiClient.convertToType(data['paidByTheClient'], 'Number');
            }
            if (data.hasOwnProperty('productIsAppropriate')) {
                obj['productIsAppropriate'] = ApiClient.convertToType(data['productIsAppropriate'], 'Number');
            }
            if (data.hasOwnProperty('buyerFoundSupplier')) {
                obj['buyerFoundSupplier'] = ApiClient.convertToType(data['buyerFoundSupplier'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * GUID пользователя в БД.
 * @member {String} _id
 */
UserInfoSchema.prototype['_id'] = undefined;

/**
 * Имя пользователя.
 * @member {String} name
 */
UserInfoSchema.prototype['name'] = undefined;

/**
 * email
 * @member {String} email
 */
UserInfoSchema.prototype['email'] = undefined;

/**
 * @member {Number} role
 */
UserInfoSchema.prototype['role'] = undefined;

/**
 * Флаг fba.
 * @member {Boolean} fba
 */
UserInfoSchema.prototype['fba'] = undefined;

/**
 * Если истина - пользователь активен. Если нет - заблокирован админом.
 * @member {Boolean} active
 */
UserInfoSchema.prototype['active'] = undefined;

/**
 * Ставка, по который оплачивается сотрудник.
 * @member {Number} rate
 */
UserInfoSchema.prototype['rate'] = undefined;

/**
 * Баланс пользователя.
 * @member {Number} balance
 */
UserInfoSchema.prototype['balance'] = undefined;

/**
 * Замороженная при оплате ордера сумма..
 * @member {Number} balanceFreeze
 */
UserInfoSchema.prototype['balanceFreeze'] = undefined;

/**
 * Сумма на которую может уходить в минус пользователь.
 * @member {Number} overdraft
 */
UserInfoSchema.prototype['overdraft'] = undefined;

/**
 * Массив permission-ов.
 * @member {Array.<module:model/UserInfoSchemaPermissions>} permissions
 */
UserInfoSchema.prototype['permissions'] = undefined;

/**
 * Массив групп permission-ов.
 * @member {Array.<module:model/UserInfoSchemaPermissionGroups>} permissionGroups
 */
UserInfoSchema.prototype['permissionGroups'] = undefined;

/**
 * @member {module:model/UserInfoSchemaMasterUser} masterUser
 */
UserInfoSchema.prototype['masterUser'] = undefined;

/**
 * Массив массив ролей.
 * @member {Array.<Number>} allowedRoles
 */
UserInfoSchema.prototype['allowedRoles'] = undefined;

/**
 * Массив доступных стратегий.
 * @member {Array.<Number>} allowedStrategies
 */
UserInfoSchema.prototype['allowedStrategies'] = undefined;

/**
 * Может ли данный пользователь быть мастер юзером.
 * @member {Boolean} canByMasterUser
 */
UserInfoSchema.prototype['canByMasterUser'] = undefined;

/**
 * Рейтинг пользователя.
 * @member {Number} rating
 */
UserInfoSchema.prototype['rating'] = undefined;

/**
 * Дата создания
 * @member {Date} createdAt
 */
UserInfoSchema.prototype['createdAt'] = undefined;

/**
 * Дата изменения
 * @member {Date} updatedAt
 */
UserInfoSchema.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/UserInfoSchemaNeedConfirmPriceChange} needConfirmPriceChange
 */
UserInfoSchema.prototype['needConfirmPriceChange'] = undefined;

/**
 * @member {module:model/UserInfoSchemaNeedUpdateTariff} needUpdateTariff
 */
UserInfoSchema.prototype['needUpdateTariff'] = undefined;

/**
 * @member {Array.<String>} purchaseOrderRequired
 */
UserInfoSchema.prototype['purchaseOrderRequired'] = undefined;

/**
 * @member {Number} updatesOnIdeas
 */
UserInfoSchema.prototype['updatesOnIdeas'] = undefined;

/**
 * Массив доступных специализаций фрилансера.
 * @member {Array.<Number>} allowedSpec
 */
UserInfoSchema.prototype['allowedSpec'] = undefined;

/**
 * Количество новых заданий у пользователя
 * @member {Number} tasksNewAll
 */
UserInfoSchema.prototype['tasksNewAll'] = undefined;

/**
 * Количество заданий в работе у пользователя
 * @member {Number} tasksAtProcessAll
 */
UserInfoSchema.prototype['tasksAtProcessAll'] = undefined;

/**
 * Количество новых заданий у пользователя с высоким приоритетом
 * @member {Number} tasksNewHigh
 */
UserInfoSchema.prototype['tasksNewHigh'] = undefined;

/**
 * Количество заданий в работе у пользователяс высоким приоритетом
 * @member {Number} tasksAtProcessHigh
 */
UserInfoSchema.prototype['tasksAtProcessHigh'] = undefined;

/**
 * Количество заказов из /buyers/orders/vac
 * @member {Number} freeOrders
 */
UserInfoSchema.prototype['freeOrders'] = undefined;

/**
 * Количество заказов 2, 3 статусы
 * @member {Number} orders
 */
UserInfoSchema.prototype['orders'] = undefined;

/**
 * Количество заказов 2, 3 статусы
 * @member {Number} pendingOrders
 */
UserInfoSchema.prototype['pendingOrders'] = undefined;

/**
 * Количество заказов 15, 20, 25, 27, 19, 30, 35, 40 статусы
 * @member {Number} allOrders
 */
UserInfoSchema.prototype['allOrders'] = undefined;

/**
 * Количество заказов 2, 3 статусы у которых до дедлайна меньше суток
 * @member {Number} pendingOrdersByDeadline
 */
UserInfoSchema.prototype['pendingOrdersByDeadline'] = undefined;

/**
 * Количество заказов 15, 19 статусы
 * @member {Number} notPaid
 */
UserInfoSchema.prototype['notPaid'] = undefined;

/**
 * Количество заказов 16 статусы
 * @member {Number} readyForPayment
 */
UserInfoSchema.prototype['readyForPayment'] = undefined;

/**
 * Количество заказов 16 статусы
 * @member {Number} partiallyPaid
 */
UserInfoSchema.prototype['partiallyPaid'] = undefined;

/**
 * Количество заказов 20 статус
 * @member {Number} needTrackNumber
 */
UserInfoSchema.prototype['needTrackNumber'] = undefined;

/**
 * Количество заказов 25 статус
 * @member {Number} inbound
 */
UserInfoSchema.prototype['inbound'] = undefined;

/**
 * Количество заказов 27 статус
 * @member {Number} confirmationRequired
 */
UserInfoSchema.prototype['confirmationRequired'] = undefined;

/**
 * Количество заказов 30,35,40 статусы
 * @member {Number} closedAndCanceled
 */
UserInfoSchema.prototype['closedAndCanceled'] = undefined;

/**
 * Количество продуктов супервизора во всех статусах
 * @member {Number} allProducts
 */
UserInfoSchema.prototype['allProducts'] = undefined;

/**
 * Количество продуктов супервизора в 20 статусе
 * @member {Number} rejectedBySupervisor
 */
UserInfoSchema.prototype['rejectedBySupervisor'] = undefined;

/**
 * Количество продуктов супервизора в 5 и 205 статусах
 * @member {Number} onCheckWithSupervisor
 */
UserInfoSchema.prototype['onCheckWithSupervisor'] = undefined;

/**
 * Количество продуктов супервизора в 230, 30, 235, 35 статусах
 * @member {Number} atTheBuyerInWork
 */
UserInfoSchema.prototype['atTheBuyerInWork'] = undefined;

/**
 * Количество продуктов супервизора в 70, 270 статусах
 * @member {Number} searchComplete
 */
UserInfoSchema.prototype['searchComplete'] = undefined;

/**
 * Количество продуктов супервизора в 50, 250, 80, 280 статусах
 * @member {Number} supplierWasNotFound
 */
UserInfoSchema.prototype['supplierWasNotFound'] = undefined;

/**
 * Количество продуктов супервизора в 60, 260, 90, 290 статусах
 * @member {Number} supplierPriceDoesNotFit
 */
UserInfoSchema.prototype['supplierPriceDoesNotFit'] = undefined;

/**
 * Количество продуктов супервизора в 275, 75 статусах
 * @member {Number} paidByTheClient
 */
UserInfoSchema.prototype['paidByTheClient'] = undefined;

/**
 * Количество продуктов супервизора в 15 статусе
 * @member {Number} productIsAppropriate
 */
UserInfoSchema.prototype['productIsAppropriate'] = undefined;

/**
 * Количество продуктов супервизора в 240, 40 статусах
 * @member {Number} buyerFoundSupplier
 */
UserInfoSchema.prototype['buyerFoundSupplier'] = undefined;






export default UserInfoSchema;

