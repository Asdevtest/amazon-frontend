/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineObject16 model module.
 * @module model/InlineObject16
 * @version v0.0.1
 */
class InlineObject16 {
    /**
     * Constructs a new <code>InlineObject16</code>.
     * @alias module:model/InlineObject16
     */
    constructor() { 
        
        InlineObject16.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineObject16</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject16} obj Optional instance to populate.
     * @return {module:model/InlineObject16} The populated <code>InlineObject16</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject16();

            if (data.hasOwnProperty('buyerComment')) {
                obj['buyerComment'] = ApiClient.convertToType(data['buyerComment'], 'String');
            }
            if (data.hasOwnProperty('warehouse')) {
                obj['warehouse'] = ApiClient.convertToType(data['warehouse'], 'Number');
            }
            if (data.hasOwnProperty('deliveryMethod')) {
                obj['deliveryMethod'] = ApiClient.convertToType(data['deliveryMethod'], 'Number');
            }
            if (data.hasOwnProperty('fba')) {
                obj['fba'] = ApiClient.convertToType(data['fba'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('deliveryCostToTheWarehouse')) {
                obj['deliveryCostToTheWarehouse'] = ApiClient.convertToType(data['deliveryCostToTheWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
            if (data.hasOwnProperty('isBarCodeAlreadyAttachedByTheSupplier')) {
                obj['isBarCodeAlreadyAttachedByTheSupplier'] = ApiClient.convertToType(data['isBarCodeAlreadyAttachedByTheSupplier'], 'Boolean');
            }
            if (data.hasOwnProperty('trackingNumberChina')) {
                obj['trackingNumberChina'] = ApiClient.convertToType(data['trackingNumberChina'], 'String');
            }
            if (data.hasOwnProperty('amountPaymentPerConsignmentAtDollars')) {
                obj['amountPaymentPerConsignmentAtDollars'] = ApiClient.convertToType(data['amountPaymentPerConsignmentAtDollars'], 'Number');
            }
            if (data.hasOwnProperty('totalPriceChanged')) {
                obj['totalPriceChanged'] = ApiClient.convertToType(data['totalPriceChanged'], 'Number');
            }
        }
        return obj;
    }


}



/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
 InlineObject16['StatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 35
     * @const
     */
    "35": 35,

    /**
     * value: 40
     * @const
     */
    "40": 40
};



/**
 * комментарии байера.
 * @member {String} buyerComment
 */
InlineObject16.prototype['buyerComment'] = undefined;

/**
 * Номер склада.
 * @member {Number} warehouse
 */
InlineObject16.prototype['warehouse'] = undefined;

/**
 * Вид доставки.
 * @member {Number} deliveryMethod
 */
InlineObject16.prototype['deliveryMethod'] = undefined;

/**
 * Признак FBA это заказ или нет.
 * @member {Boolean} fba
 */
InlineObject16.prototype['fba'] = undefined;

/**
 *    formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
 * @member {module:model/InlineObject16.StatusEnum} status
 * @default StatusEnum.1
 */
InlineObject16.prototype['status'] = InlineObject16.StatusEnum[1];

/**
 * Стоимость доставки до склада.
 * @member {Number} deliveryCostToTheWarehouse
 */
InlineObject16.prototype['deliveryCostToTheWarehouse'] = undefined;

/**
 * Массив картинок.
 * @member {Array.<String>} images
 */
InlineObject16.prototype['images'] = undefined;

/**
 * Кнопка в заказе, сообщающая складу что штрихкод на товар поклеен у поставщика.
 * @member {Boolean} isBarCodeAlreadyAttachedByTheSupplier
 */
InlineObject16.prototype['isBarCodeAlreadyAttachedByTheSupplier'] = undefined;

/**
 * Трек номер в ЗАКАЗЕ, по китаю отправленный заказ, до нашего склада. Вводиться баером, в заказ.
 * @member {String} trackingNumberChina
 */
InlineObject16.prototype['trackingNumberChina'] = undefined;

/**
 * Сумма оплаты $ за партию товара - это сумма в $ указывается закупщиком
 * @member {Number} amountPaymentPerConsignmentAtDollars
 */
InlineObject16.prototype['amountPaymentPerConsignmentAtDollars'] = undefined;

/**
 * Если вдруг байер понял что стоимость заказа меняется в меньшую/большую сторону он напишет эту сумму в заказе в поле totalPriceChanged (нужно добавить это поле), далее корректировка стоимости решается через админа. 
 * @member {Number} totalPriceChanged
 */
InlineObject16.prototype['totalPriceChanged'] = undefined;





export default InlineObject16;

