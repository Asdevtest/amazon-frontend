/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserFullSchema model module.
 * @module model/UserFullSchema
 * @version 0.1.0
 */
class UserFullSchema {
    /**
     * Constructs a new <code>UserFullSchema</code>.
     * Пользователь системы
     * @alias module:model/UserFullSchema
     * @param _id {String} GUID пользователя в БД.
     * @param name {String} Имя пользователя.
     * @param email {String} email
     * @param role {Number} Код роли присвоенный пользователю.    roles.root = 0    roles.client = 10    roles.super = 20    roles.researcher = 30    roles.freelancer = 35    roles.buyer = 40    roles.storekeeper = 45    roles.candidate = 50    
     * @param fba {Boolean} Флаг fba.
     * @param active {Boolean} Если истина - пользователь активен. Если нет - заблокирован админом.
     * @param rate {Number} Ставка, по который оплачивается сотрудник.
     */
    constructor(_id, name, email, role, fba, active, rate) { 
        
        UserFullSchema.initialize(this, _id, name, email, role, fba, active, rate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _id, name, email, role, fba, active, rate) { 
        obj['_id'] = _id;
        obj['name'] = name;
        obj['email'] = email;
        obj['role'] = role;
        obj['fba'] = fba;
        obj['active'] = active;
        obj['rate'] = rate;
    }

    /**
     * Constructs a <code>UserFullSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserFullSchema} obj Optional instance to populate.
     * @return {module:model/UserFullSchema} The populated <code>UserFullSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserFullSchema();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('fba')) {
                obj['fba'] = ApiClient.convertToType(data['fba'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('balanceFreeze')) {
                obj['balanceFreeze'] = ApiClient.convertToType(data['balanceFreeze'], 'Number');
            }
            if (data.hasOwnProperty('overdraft')) {
                obj['overdraft'] = ApiClient.convertToType(data['overdraft'], 'Number');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('permissionGroups')) {
                obj['permissionGroups'] = ApiClient.convertToType(data['permissionGroups'], ['String']);
            }
            if (data.hasOwnProperty('masterUser')) {
                obj['masterUser'] = ApiClient.convertToType(data['masterUser'], 'String');
            }
            if (data.hasOwnProperty('canByMasterUser')) {
                obj['canByMasterUser'] = ApiClient.convertToType(data['canByMasterUser'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedRoles')) {
                obj['allowedRoles'] = ApiClient.convertToType(data['allowedRoles'], ['Number']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * GUID пользователя в БД.
 * @member {String} _id
 */
UserFullSchema.prototype['_id'] = undefined;

/**
 * Имя пользователя.
 * @member {String} name
 */
UserFullSchema.prototype['name'] = undefined;

/**
 * email
 * @member {String} email
 */
UserFullSchema.prototype['email'] = undefined;

/**
 * Код роли присвоенный пользователю.    roles.root = 0    roles.client = 10    roles.super = 20    roles.researcher = 30    roles.freelancer = 35    roles.buyer = 40    roles.storekeeper = 45    roles.candidate = 50    
 * @member {Number} role
 */
UserFullSchema.prototype['role'] = undefined;

/**
 * Флаг fba.
 * @member {Boolean} fba
 */
UserFullSchema.prototype['fba'] = undefined;

/**
 * Если истина - пользователь активен. Если нет - заблокирован админом.
 * @member {Boolean} active
 */
UserFullSchema.prototype['active'] = undefined;

/**
 * Ставка, по который оплачивается сотрудник.
 * @member {Number} rate
 */
UserFullSchema.prototype['rate'] = undefined;

/**
 * Баланс пользователя.
 * @member {Number} balance
 */
UserFullSchema.prototype['balance'] = undefined;

/**
 * Замороженная при оплате ордера сумма..
 * @member {Number} balanceFreeze
 */
UserFullSchema.prototype['balanceFreeze'] = undefined;

/**
 * Сумма на которую может уходить в минус пользователь.
 * @member {Number} overdraft
 */
UserFullSchema.prototype['overdraft'] = undefined;

/**
 * Массив permission-ов.
 * @member {Array.<String>} permissions
 */
UserFullSchema.prototype['permissions'] = undefined;

/**
 * Массив групп permission-ов.
 * @member {Array.<String>} permissionGroups
 */
UserFullSchema.prototype['permissionGroups'] = undefined;

/**
 * GUID мастер пользователя к которму относится данный субпользователь.
 * @member {String} masterUser
 */
UserFullSchema.prototype['masterUser'] = undefined;

/**
 * Флаг fba.
 * @member {Boolean} canByMasterUser
 */
UserFullSchema.prototype['canByMasterUser'] = undefined;

/**
 * Массив массив ролей.
 * @member {Array.<Number>} allowedRoles
 */
UserFullSchema.prototype['allowedRoles'] = undefined;

/**
 * Дата создания
 * @member {Date} createdAt
 */
UserFullSchema.prototype['createdAt'] = undefined;

/**
 * Дата изменения
 * @member {Date} updatedAt
 */
UserFullSchema.prototype['updatedAt'] = undefined;






export default UserFullSchema;

