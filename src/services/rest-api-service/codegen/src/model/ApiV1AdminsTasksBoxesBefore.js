/**
 * amazonapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiV1AdminsTasksItems from './ApiV1AdminsTasksItems';

/**
 * The ApiV1AdminsTasksBoxesBefore model module.
 * @module model/ApiV1AdminsTasksBoxesBefore
 * @version v0.0.1
 */
class ApiV1AdminsTasksBoxesBefore {
    /**
     * Constructs a new <code>ApiV1AdminsTasksBoxesBefore</code>.
     * @alias module:model/ApiV1AdminsTasksBoxesBefore
     */
    constructor() { 
        
        ApiV1AdminsTasksBoxesBefore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiV1AdminsTasksBoxesBefore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiV1AdminsTasksBoxesBefore} obj Optional instance to populate.
     * @return {module:model/ApiV1AdminsTasksBoxesBefore} The populated <code>ApiV1AdminsTasksBoxesBefore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiV1AdminsTasksBoxesBefore();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('weighGrossKg')) {
                obj['weighGrossKg'] = ApiClient.convertToType(data['weighGrossKg'], 'Number');
            }
            if (data.hasOwnProperty('volumeWeightKg')) {
                obj['volumeWeightKg'] = ApiClient.convertToType(data['volumeWeightKg'], 'Number');
            }
            if (data.hasOwnProperty('weightFinalAccountingKg')) {
                obj['weightFinalAccountingKg'] = ApiClient.convertToType(data['weightFinalAccountingKg'], 'Number');
            }
            if (data.hasOwnProperty('shippingLabel')) {
                obj['shippingLabel'] = ApiClient.convertToType(data['shippingLabel'], 'String');
            }
            if (data.hasOwnProperty('shipmentPlanId')) {
                obj['shipmentPlanId'] = ApiClient.convertToType(data['shipmentPlanId'], 'String');
            }
            if (data.hasOwnProperty('warehouse')) {
                obj['warehouse'] = ApiClient.convertToType(data['warehouse'], 'Number');
            }
            if (data.hasOwnProperty('clientComment')) {
                obj['clientComment'] = ApiClient.convertToType(data['clientComment'], 'String');
            }
            if (data.hasOwnProperty('deliveryMethod')) {
                obj['deliveryMethod'] = ApiClient.convertToType(data['deliveryMethod'], 'Number');
            }
            if (data.hasOwnProperty('lengthCmSupplier')) {
                obj['lengthCmSupplier'] = ApiClient.convertToType(data['lengthCmSupplier'], 'Number');
            }
            if (data.hasOwnProperty('widthCmSupplier')) {
                obj['widthCmSupplier'] = ApiClient.convertToType(data['widthCmSupplier'], 'Number');
            }
            if (data.hasOwnProperty('heightCmSupplier')) {
                obj['heightCmSupplier'] = ApiClient.convertToType(data['heightCmSupplier'], 'Number');
            }
            if (data.hasOwnProperty('weighGrossKgSupplier')) {
                obj['weighGrossKgSupplier'] = ApiClient.convertToType(data['weighGrossKgSupplier'], 'Number');
            }
            if (data.hasOwnProperty('volumeWeightKgSupplier')) {
                obj['volumeWeightKgSupplier'] = ApiClient.convertToType(data['volumeWeightKgSupplier'], 'Number');
            }
            if (data.hasOwnProperty('weightFinalAccountingKgSupplier')) {
                obj['weightFinalAccountingKgSupplier'] = ApiClient.convertToType(data['weightFinalAccountingKgSupplier'], 'Number');
            }
            if (data.hasOwnProperty('buyerComment')) {
                obj['buyerComment'] = ApiClient.convertToType(data['buyerComment'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('lengthCmWarehouse')) {
                obj['lengthCmWarehouse'] = ApiClient.convertToType(data['lengthCmWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('widthCmWarehouse')) {
                obj['widthCmWarehouse'] = ApiClient.convertToType(data['widthCmWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('heightCmWarehouse')) {
                obj['heightCmWarehouse'] = ApiClient.convertToType(data['heightCmWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('weighGrossKgWarehouse')) {
                obj['weighGrossKgWarehouse'] = ApiClient.convertToType(data['weighGrossKgWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('volumeWeightKgWarehouse')) {
                obj['volumeWeightKgWarehouse'] = ApiClient.convertToType(data['volumeWeightKgWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('isBarCodeAttachedByTheStorekeeper')) {
                obj['isBarCodeAttachedByTheStorekeeper'] = ApiClient.convertToType(data['isBarCodeAttachedByTheStorekeeper'], 'Boolean');
            }
            if (data.hasOwnProperty('isShippingLabelAttachedByStorekeeper')) {
                obj['isShippingLabelAttachedByStorekeeper'] = ApiClient.convertToType(data['isShippingLabelAttachedByStorekeeper'], 'Boolean');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('buyerId')) {
                obj['buyerId'] = ApiClient.convertToType(data['buyerId'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('scheduledDispatchDate')) {
                obj['scheduledDispatchDate'] = ApiClient.convertToType(data['scheduledDispatchDate'], 'Date');
            }
            if (data.hasOwnProperty('factDispatchDate')) {
                obj['factDispatchDate'] = ApiClient.convertToType(data['factDispatchDate'], 'Date');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ApiV1AdminsTasksItems]);
            }
            if (data.hasOwnProperty('isDraft')) {
                obj['isDraft'] = ApiClient.convertToType(data['isDraft'], 'Boolean');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * ID коробки
 * @member {Number} id
 */
ApiV1AdminsTasksBoxesBefore.prototype['id'] = undefined;

/**
 * GUID коробки в БД
 * @member {String} _id
 */
ApiV1AdminsTasksBoxesBefore.prototype['_id'] = undefined;

/**
 * сколько таких же коробок в одной коробке
 * @member {Number} amount
 */
ApiV1AdminsTasksBoxesBefore.prototype['amount'] = undefined;

/**
 * Общий вес кг коробки
 * @member {Number} weighGrossKg
 */
ApiV1AdminsTasksBoxesBefore.prototype['weighGrossKg'] = undefined;

/**
 * Объемный вес (подсчет)
 * @member {Number} volumeWeightKg
 */
ApiV1AdminsTasksBoxesBefore.prototype['volumeWeightKg'] = undefined;

/**
 * Наибольший вес (подсчет)
 * @member {Number} weightFinalAccountingKg
 */
ApiV1AdminsTasksBoxesBefore.prototype['weightFinalAccountingKg'] = undefined;

/**
 * Ссылка на наклейку для коробки
 * @member {String} shippingLabel
 */
ApiV1AdminsTasksBoxesBefore.prototype['shippingLabel'] = undefined;

/**
 * Ид шипмент плана ( не обязательное поле)
 * @member {String} shipmentPlanId
 */
ApiV1AdminsTasksBoxesBefore.prototype['shipmentPlanId'] = undefined;

/**
 * id склада - склады куда отправляют 
 * @member {Number} warehouse
 */
ApiV1AdminsTasksBoxesBefore.prototype['warehouse'] = undefined;

/**
 * Комментарий к коробке
 * @member {String} clientComment
 */
ApiV1AdminsTasksBoxesBefore.prototype['clientComment'] = undefined;

/**
 * Метод доставки - 1: Air , 2: Sea
 * @member {Number} deliveryMethod
 */
ApiV1AdminsTasksBoxesBefore.prototype['deliveryMethod'] = undefined;

/**
 * Размеры которые назвал поставщик при заказе ( могут отличаться с реальными).
 * @member {Number} lengthCmSupplier
 */
ApiV1AdminsTasksBoxesBefore.prototype['lengthCmSupplier'] = undefined;

/**
 * Размеры которые назвал поставщик при заказе ( могут отличаться с реальными).
 * @member {Number} widthCmSupplier
 */
ApiV1AdminsTasksBoxesBefore.prototype['widthCmSupplier'] = undefined;

/**
 * Размеры которые назвал поставщик при заказе ( могут отличаться с реальными).
 * @member {Number} heightCmSupplier
 */
ApiV1AdminsTasksBoxesBefore.prototype['heightCmSupplier'] = undefined;

/**
 * Общий вес кг коробки который назвал поставщик.
 * @member {Number} weighGrossKgSupplier
 */
ApiV1AdminsTasksBoxesBefore.prototype['weighGrossKgSupplier'] = undefined;

/**
 * id склада - склады куда отправляют 
 * @member {Number} volumeWeightKgSupplier
 */
ApiV1AdminsTasksBoxesBefore.prototype['volumeWeightKgSupplier'] = undefined;

/**
 * Наибольший вес (подсчет) (что большее объемный или обычный вес) у поставщика.
 * @member {Number} weightFinalAccountingKgSupplier
 */
ApiV1AdminsTasksBoxesBefore.prototype['weightFinalAccountingKgSupplier'] = undefined;

/**
 * Объемный вес (подсчет) на размерах от поставщика (формула)
 * @member {String} buyerComment
 */
ApiV1AdminsTasksBoxesBefore.prototype['buyerComment'] = undefined;

/**
 * Текущий статус коробки.
 * @member {Number} status
 */
ApiV1AdminsTasksBoxesBefore.prototype['status'] = undefined;

/**
 * Что фактически пришло на склад. Кладовщик.
 * @member {Number} lengthCmWarehouse
 */
ApiV1AdminsTasksBoxesBefore.prototype['lengthCmWarehouse'] = undefined;

/**
 * Что фактически пришло на склад. Кладовщик.
 * @member {Number} widthCmWarehouse
 */
ApiV1AdminsTasksBoxesBefore.prototype['widthCmWarehouse'] = undefined;

/**
 * Что фактически пришло на склад. Кладовщик.
 * @member {Number} heightCmWarehouse
 */
ApiV1AdminsTasksBoxesBefore.prototype['heightCmWarehouse'] = undefined;

/**
 * Что фактически пришло на склад. Кладовщик.
 * @member {Number} weighGrossKgWarehouse
 */
ApiV1AdminsTasksBoxesBefore.prototype['weighGrossKgWarehouse'] = undefined;

/**
 * Что фактически пришло на склад. Кладовщик.
 * @member {Number} volumeWeightKgWarehouse
 */
ApiV1AdminsTasksBoxesBefore.prototype['volumeWeightKgWarehouse'] = undefined;

/**
 * Прикреплен ли баркод к коробке сотрудником склада.
 * @member {Boolean} isBarCodeAttachedByTheStorekeeper
 */
ApiV1AdminsTasksBoxesBefore.prototype['isBarCodeAttachedByTheStorekeeper'] = undefined;

/**
 * Поле будет указывать на то что при решении задачи сторкипером на обновление коробок что он проклеил шиппинг лейбл.
 * @member {Boolean} isShippingLabelAttachedByStorekeeper
 */
ApiV1AdminsTasksBoxesBefore.prototype['isShippingLabelAttachedByStorekeeper'] = undefined;

/**
 * Тот кто создал коробку.
 * @member {String} createdBy
 */
ApiV1AdminsTasksBoxesBefore.prototype['createdBy'] = undefined;

/**
 * Дата создания
 * @member {Date} createdAt
 */
ApiV1AdminsTasksBoxesBefore.prototype['createdAt'] = undefined;

/**
 * Дата обновления
 * @member {Date} updatedAt
 */
ApiV1AdminsTasksBoxesBefore.prototype['updatedAt'] = undefined;

/**
 * Клиент кто или для кого создана коробка.
 * @member {String} clientId
 */
ApiV1AdminsTasksBoxesBefore.prototype['clientId'] = undefined;

/**
 * Байер взявший коробку в работу.
 * @member {String} buyerId
 */
ApiV1AdminsTasksBoxesBefore.prototype['buyerId'] = undefined;

/**
 * GUID любого, кто последний редактировал коробку.
 * @member {String} lastModifiedBy
 */
ApiV1AdminsTasksBoxesBefore.prototype['lastModifiedBy'] = undefined;

/**
 * Запланированная дата отправки.
 * @member {Date} scheduledDispatchDate
 */
ApiV1AdminsTasksBoxesBefore.prototype['scheduledDispatchDate'] = undefined;

/**
 * Запланированная дата доставки.
 * @member {Date} factDispatchDate
 */
ApiV1AdminsTasksBoxesBefore.prototype['factDispatchDate'] = undefined;

/**
 * Массив коробок.
 * @member {Array.<module:model/ApiV1AdminsTasksItems>} items
 */
ApiV1AdminsTasksBoxesBefore.prototype['items'] = undefined;

/**
 * true - если создаем черновик заказа.
 * @member {Boolean} isDraft
 */
ApiV1AdminsTasksBoxesBefore.prototype['isDraft'] = undefined;

/**
 * Массив ссылок на фотографии.
 * @member {Array.<String>} images
 */
ApiV1AdminsTasksBoxesBefore.prototype['images'] = undefined;






export default ApiV1AdminsTasksBoxesBefore;

