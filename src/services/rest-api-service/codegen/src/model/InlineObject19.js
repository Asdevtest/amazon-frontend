/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineObject19 model module.
 * @module model/InlineObject19
 * @version 0.1.0
 */
class InlineObject19 {
    /**
     * Constructs a new <code>InlineObject19</code>.
     * @alias module:model/InlineObject19
     */
    constructor() { 
        
        InlineObject19.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineObject19</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject19} obj Optional instance to populate.
     * @return {module:model/InlineObject19} The populated <code>InlineObject19</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject19();

            if (data.hasOwnProperty('buyerComment')) {
                obj['buyerComment'] = ApiClient.convertToType(data['buyerComment'], 'String');
            }
            if (data.hasOwnProperty('warehouse')) {
                obj['warehouse'] = ApiClient.convertToType(data['warehouse'], 'Number');
            }
            if (data.hasOwnProperty('deliveryMethod')) {
                obj['deliveryMethod'] = ApiClient.convertToType(data['deliveryMethod'], 'Number');
            }
            if (data.hasOwnProperty('fba')) {
                obj['fba'] = ApiClient.convertToType(data['fba'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('deliveryCostToTheWarehouse')) {
                obj['deliveryCostToTheWarehouse'] = ApiClient.convertToType(data['deliveryCostToTheWarehouse'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
            if (data.hasOwnProperty('yuanToDollarRate')) {
                obj['yuanToDollarRate'] = ApiClient.convertToType(data['yuanToDollarRate'], 'Number');
            }
            if (data.hasOwnProperty('isBarCodeAlreadyAttachedByTheSupplier')) {
                obj['isBarCodeAlreadyAttachedByTheSupplier'] = ApiClient.convertToType(data['isBarCodeAlreadyAttachedByTheSupplier'], 'Boolean');
            }
            if (data.hasOwnProperty('trackingNumberChina')) {
                obj['trackingNumberChina'] = ApiClient.convertToType(data['trackingNumberChina'], 'String');
            }
            if (data.hasOwnProperty('amountPaymentPerConsignmentAtDollars')) {
                obj['amountPaymentPerConsignmentAtDollars'] = ApiClient.convertToType(data['amountPaymentPerConsignmentAtDollars'], 'Number');
            }
            if (data.hasOwnProperty('totalPriceChanged')) {
                obj['totalPriceChanged'] = ApiClient.convertToType(data['totalPriceChanged'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * комментарии байера.
 * @member {String} buyerComment
 */
InlineObject19.prototype['buyerComment'] = undefined;

/**
 * Номер склада.
 * @member {Number} warehouse
 */
InlineObject19.prototype['warehouse'] = undefined;

/**
 * Вид доставки.
 * @member {Number} deliveryMethod
 */
InlineObject19.prototype['deliveryMethod'] = undefined;

/**
 * Признак FBA это заказ или нет.
 * @member {Boolean} fba
 */
InlineObject19.prototype['fba'] = undefined;

/**
 *    formed: 0,  Корзина - статус \"Формируется\"      new: 1,  Клиент создал заказ - статус \"Новый\"      readyToProcess: 10,  Заказ доступен к обработке закупщиком (через 15минут после того как он был сделан, приобрёл статус Новый ) - статус \"доступен для обработки\"      atProcess: 15,  Закупщик взял заказ в обработку - статус \"в обработке\"        Варианты обработки - \"Что-то не так - требуется уточнение у клиента\" - уведомить клиента. - закупщику контрольное         уведомление (т.к. будет суброль)        Необходим поиск нового поставщика. - уведомить клиента. - закупщику контрольное уведомление (т.к. будет суброль)      needConfirmingToPriceChange: 19,  \"требуется подтверждение для изменения цены \"        paid: 20, закупщик оплатил заказ - статус \"оплачен\"       trackNumberIssued: 25, выдан и принят трек номер - статус \"выдан трек номер\"      inStock: 30, Товар пришёл на склад - \"Пришёл на склад\"      returnOrder: 35 Если Заказ пришёл не кондиционный - \"возврат заказа\"    
 * @member {Number} status
 */
InlineObject19.prototype['status'] = undefined;

/**
 * Стоимость доставки до склада.
 * @member {Number} deliveryCostToTheWarehouse
 */
InlineObject19.prototype['deliveryCostToTheWarehouse'] = undefined;

/**
 * Массив картинок.
 * @member {Array.<String>} images
 */
InlineObject19.prototype['images'] = undefined;

/**
 * Курс юань доллар.
 * @member {Number} yuanToDollarRate
 */
InlineObject19.prototype['yuanToDollarRate'] = undefined;

/**
 * Кнопка в заказе, сообщающая складу что штрихкод на товар поклеен у поставщика.
 * @member {Boolean} isBarCodeAlreadyAttachedByTheSupplier
 */
InlineObject19.prototype['isBarCodeAlreadyAttachedByTheSupplier'] = undefined;

/**
 * Трек номер в ЗАКАЗЕ, по китаю отправленный заказ, до нашего склада. Вводиться баером, в заказ.
 * @member {String} trackingNumberChina
 */
InlineObject19.prototype['trackingNumberChina'] = undefined;

/**
 * Сумма оплаты $ за партию товара - это сумма в $ указывается закупщиком
 * @member {Number} amountPaymentPerConsignmentAtDollars
 */
InlineObject19.prototype['amountPaymentPerConsignmentAtDollars'] = undefined;

/**
 * Если вдруг байер понял что стоимость заказа меняется в меньшую/большую сторону он напишет эту сумму в заказе в поле totalPriceChanged (нужно добавить это поле), далее корректировка стоимости решается через админа. 
 * @member {Number} totalPriceChanged
 */
InlineObject19.prototype['totalPriceChanged'] = undefined;






export default InlineObject19;

