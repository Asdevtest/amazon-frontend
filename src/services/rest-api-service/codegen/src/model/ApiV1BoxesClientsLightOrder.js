/**
 * Test swagger
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiV1AdminsGetProductsByStatusSuppliers from './ApiV1AdminsGetProductsByStatusSuppliers';

/**
 * The ApiV1BoxesClientsLightOrder model module.
 * @module model/ApiV1BoxesClientsLightOrder
 * @version 0.1.0
 */
class ApiV1BoxesClientsLightOrder {
    /**
     * Constructs a new <code>ApiV1BoxesClientsLightOrder</code>.
     * @alias module:model/ApiV1BoxesClientsLightOrder
     */
    constructor() { 
        
        ApiV1BoxesClientsLightOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiV1BoxesClientsLightOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiV1BoxesClientsLightOrder} obj Optional instance to populate.
     * @return {module:model/ApiV1BoxesClientsLightOrder} The populated <code>ApiV1BoxesClientsLightOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiV1BoxesClientsLightOrder();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = ApiClient.convertToType(data['item'], 'String');
            }
            if (data.hasOwnProperty('clientComment')) {
                obj['clientComment'] = ApiClient.convertToType(data['clientComment'], 'String');
            }
            if (data.hasOwnProperty('orderSupplier')) {
                obj['orderSupplier'] = ApiV1AdminsGetProductsByStatusSuppliers.constructFromObject(data['orderSupplier']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
        }
        return obj;
    }


}

/**
 * GUID продукта в базе данных
 * @member {String} _id
 */
ApiV1BoxesClientsLightOrder.prototype['_id'] = undefined;

/**
 * id заказ.
 * @member {Number} id
 */
ApiV1BoxesClientsLightOrder.prototype['id'] = undefined;

/**
 * @member {String} item
 */
ApiV1BoxesClientsLightOrder.prototype['item'] = undefined;

/**
 * Комментарии к товару, от клиента.
 * @member {String} clientComment
 */
ApiV1BoxesClientsLightOrder.prototype['clientComment'] = undefined;

/**
 * @member {module:model/ApiV1AdminsGetProductsByStatusSuppliers} orderSupplier
 */
ApiV1BoxesClientsLightOrder.prototype['orderSupplier'] = undefined;

/**
 * Приоритет заказа: от 10 до 50 - от найменее значимого до найболее значимого соответственно
 * @member {module:model/ApiV1BoxesClientsLightOrder.PriorityEnum} priority
 */
ApiV1BoxesClientsLightOrder.prototype['priority'] = undefined;





/**
 * Allowed values for the <code>priority</code> property.
 * @enum {String}
 * @readonly
 */
ApiV1BoxesClientsLightOrder['PriorityEnum'] = {

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "20"
     * @const
     */
    "20": "20",

    /**
     * value: "30"
     * @const
     */
    "30": "30",

    /**
     * value: "40"
     * @const
     */
    "40": "40",

    /**
     * value: "50"
     * @const
     */
    "50": "50"
};



export default ApiV1BoxesClientsLightOrder;

